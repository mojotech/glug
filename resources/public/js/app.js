if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

/**
 * React v0.12.2
 */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.React=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var ReactChildren = _dereq_("./ReactChildren");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactDOM = _dereq_("./ReactDOM");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDefaultInjection = _dereq_("./ReactDefaultInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTypes = _dereq_("./ReactPropTypes");
var ReactServerRendering = _dereq_("./ReactServerRendering");
var ReactTextComponent = _dereq_("./ReactTextComponent");

var assign = _dereq_("./Object.assign");
var deprecated = _dereq_("./deprecated");
var onlyChild = _dereq_("./onlyChild");

ReactDefaultInjection.inject();

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;

if ("production" !== "development") {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
}

// TODO: Drop legacy elements once classes no longer export these factories
createElement = ReactLegacyElement.wrapCreateElement(
  createElement
);
createFactory = ReactLegacyElement.wrapCreateFactory(
  createFactory
);

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    only: onlyChild
  },
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactCompositeComponent.createClass,
  createElement: createElement,
  createFactory: createFactory,
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  render: render,
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidClass: ReactLegacyElement.isValidClass,
  isValidElement: ReactElement.isValidElement,
  withContext: ReactContext.withContext,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign,

  // Deprecations (remove for 0.13)
  renderComponent: deprecated(
    'React',
    'renderComponent',
    'render',
    this,
    render
  ),
  renderComponentToString: deprecated(
    'React',
    'renderComponentToString',
    'renderToString',
    this,
    ReactServerRendering.renderToString
  ),
  renderComponentToStaticMarkup: deprecated(
    'React',
    'renderComponentToStaticMarkup',
    'renderToStaticMarkup',
    this,
    ReactServerRendering.renderToStaticMarkup
  ),
  isValidComponent: deprecated(
    'React',
    'isValidComponent',
    'isValidElement',
    this,
    ReactElement.isValidElement
  )
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    Component: ReactComponent,
    CurrentOwner: ReactCurrentOwner,
    DOMComponent: ReactDOMComponent,
    DOMPropertyOperations: DOMPropertyOperations,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    MultiChild: ReactMultiChild,
    TextComponent: ReactTextComponent
  });
}

if ("production" !== "development") {
  var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // If we're in Chrome, look for the devtools marker and provide a download
    // link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        console.debug(
          'Download the React DevTools for a better development experience: ' +
          'http://fb.me/react-devtools'
        );
      }
    }

    var expectedFeatures = [
      // shims
      Array.isArray,
      Array.prototype.every,
      Array.prototype.forEach,
      Array.prototype.indexOf,
      Array.prototype.map,
      Date.now,
      Function.prototype.bind,
      Object.keys,
      String.prototype.split,
      String.prototype.trim,

      // shams
      Object.create,
      Object.freeze
    ];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error(
          'One or more ES5 shim/shams expected by React are not available: ' +
          'http://fb.me/react-warning-polyfills'
        );
        break;
      }
    }
  }
}

// Version exists only in the open-source version of React, not in Facebook's
// internal version.
React.version = '0.12.2';

module.exports = React;

},{"./DOMPropertyOperations":12,"./EventPluginUtils":20,"./ExecutionEnvironment":22,"./Object.assign":27,"./ReactChildren":31,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactDOM":37,"./ReactDOMComponent":39,"./ReactDefaultInjection":49,"./ReactElement":52,"./ReactElementValidator":53,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./ReactPropTypes":72,"./ReactServerRendering":76,"./ReactTextComponent":78,"./deprecated":106,"./onlyChild":137}],2:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

"use strict";

var focusNode = _dereq_("./focusNode");

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      focusNode(this.getDOMNode());
    }
  }
};

module.exports = AutoFocusMixin;

},{"./focusNode":111}],3:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var SyntheticInputEvent = _dereq_("./SyntheticInputEvent");

var keyOf = _dereq_("./keyOf");

var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !('documentMode' in document || isPresto())
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  }
};

// Track characters inserted via keypress and composition events.
var fallbackChars = null;

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey)
  );
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var chars;

    if (canUseTextInputEvent) {
      switch (topLevelType) {
        case topLevelTypes.topKeyPress:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return;
          }

          hasSpaceKeypress = true;
          chars = SPACEBAR_CHAR;
          break;

        case topLevelTypes.topTextInput:
          // Record the characters to be added to the DOM.
          chars = nativeEvent.data;

          // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to blacklist it.
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return;
          }

          // Otherwise, carry on.
          break;

        default:
          // For other native event types, do nothing.
          return;
      }
    } else {
      switch (topLevelType) {
        case topLevelTypes.topPaste:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          fallbackChars = null;
          break;
        case topLevelTypes.topKeyPress:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
            fallbackChars = String.fromCharCode(nativeEvent.which);
          }
          break;
        case topLevelTypes.topCompositionEnd:
          fallbackChars = nativeEvent.data;
          break;
      }

      // If no changes have occurred to the fallback string, no relevant
      // event has fired and we're done.
      if (fallbackChars === null) {
        return;
      }

      chars = fallbackChars;
    }

    // If no characters are being inserted, no BeforeInput event should
    // be fired.
    if (!chars) {
      return;
    }

    var event = SyntheticInputEvent.getPooled(
      eventTypes.beforeInput,
      topLevelTargetID,
      nativeEvent
    );

    event.data = chars;
    fallbackChars = null;
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }
};

module.exports = BeforeInputEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./SyntheticInputEvent":89,"./keyOf":133}],4:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

"use strict";

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  strokeOpacity: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],5:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var camelizeStyleName = _dereq_("./camelizeStyleName");
var dangerousStyleValue = _dereq_("./dangerousStyleValue");
var hyphenateStyleName = _dereq_("./hyphenateStyleName");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

var processStyleName = memoizeStringOnly(function(styleName) {
  return hyphenateStyleName(styleName);
});

var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== "development") {
  var warnedStyleNames = {};

  var warnHyphenatedStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== "development" ? warning(
      false,
      'Unsupported style property ' + name + '. Did you mean ' +
      camelizeStyleName(name) + '?'
    ) : null);
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

},{"./CSSProperty":4,"./ExecutionEnvironment":22,"./camelizeStyleName":100,"./dangerousStyleValue":105,"./hyphenateStyleName":124,"./memoizeStringOnly":135,"./warning":145}],6:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function(callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      ("production" !== "development" ? invariant(
        callbacks.length === contexts.length,
        "Mismatched list of contexts in callback queue"
      ) : invariant(callbacks.length === contexts.length));
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;

},{"./Object.assign":27,"./PooledClass":28,"./invariant":126}],7:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactUpdates = _dereq_("./ReactUpdates");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var isEventSupported = _dereq_("./isEventSupported");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    !('documentMode' in document) || document.documentMode > 8
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    !('documentMode' in document) || document.documentMode > 9
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactUpdates":79,"./SyntheticEvent":87,"./isEventSupported":127,"./isTextInputElement":129,"./keyOf":133}],8:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

"use strict";

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],9:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CompositionEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticCompositionEvent = _dereq_("./SyntheticCompositionEvent");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var keyOf = _dereq_("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var useCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. In Korean, for example,
// the compositionend event contains only one character regardless of
// how many characters have been composed since compositionstart.
// We therefore use the fallback data while still using the native
// events as triggers.
var useFallbackData = (
  !useCompositionEvent ||
  (
    'documentMode' in document &&
    document.documentMode > 8 &&
    document.documentMode <= 11
  )
);

var topLevelTypes = EventConstants.topLevelTypes;
var currentComposition = null;

// Events and their corresponding property names.
var eventTypes = {
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Helper class stores information about selection and document state
 * so we can figure out what changed at a later date.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this.root = root;
  this.startSelection = ReactInputSelection.getSelection(root);
  this.startValue = this.getText();
}

/**
 * Get current text of input.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getText = function() {
  return this.root.value || this.root[getTextContentAccessor()];
};

/**
 * Text that has changed since the start of composition.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getData = function() {
  var endValue = this.getText();
  var prefixLength = this.startSelection.start;
  var suffixLength = this.startValue.length - this.startSelection.end;

  return endValue.substr(
    prefixLength,
    endValue.length - suffixLength - prefixLength
  );
};

/**
 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and
 * `onCompositionEnd` events on inputs, textareas and contentEditable
 * nodes.
 */
var CompositionEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var eventType;
    var data;

    if (useCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }

    if (useFallbackData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = new FallbackCompositionState(topLevelTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          data = currentComposition.getData();
          currentComposition = null;
        }
      }
    }

    if (eventType) {
      var event = SyntheticCompositionEvent.getPooled(
        eventType,
        topLevelTargetID,
        nativeEvent
      );
      if (data) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = data;
      }
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }
  }
};

module.exports = CompositionEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactInputSelection":59,"./SyntheticCompositionEvent":85,"./getTextContentAccessor":121,"./keyOf":133}],10:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

"use strict";

var Danger = _dereq_("./Danger");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var invariant = _dereq_("./invariant");

/**
 * The DOM property to use when setting text content.
 *
 * @type {string}
 * @private
 */
var textContentAccessor = getTextContentAccessor();

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.
  parentNode.insertBefore(
    childNode,
    parentNode.childNodes[index] || null
  );
}

var updateTextContent;
if (textContentAccessor === 'textContent') {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    node.textContent = text;
  };
} else {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    // In order to preserve newlines correctly, we can't use .innerText to set
    // the contents (see #1080), so we empty the element then append a text node
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    if (text) {
      var doc = node.ownerDocument || document;
      node.appendChild(doc.createTextNode(text));
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: updateTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; update = updates[i]; i++) {
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        ("production" !== "development" ? invariant(
          updatedChild,
          'processUpdates(): Unable to find child %s of element. This ' +
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
          'browser), usually due to forgetting a <tbody> when using tables, ' +
          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements '+
          'in an <svg> parent. Try inspecting the child nodes of the element ' +
          'with React ID `%s`.',
          updatedIndex,
          parentID
        ) : invariant(updatedChild));

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; update = updates[k]; k++) {
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          updateTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

},{"./Danger":13,"./ReactMultiChildUpdateTypes":65,"./getTextContentAccessor":121,"./invariant":126}],11:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

"use strict";

var invariant = _dereq_("./invariant");

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== "development" ? invariant(
        !DOMProperty.isStandardName.hasOwnProperty(propName),
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        DOMProperty.getPossibleStandardName[attributeName] = propName;
        DOMProperty.getAttributeName[propName] = attributeName;
      } else {
        DOMProperty.getAttributeName[propName] = lowerCased;
      }

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames.hasOwnProperty(propName) ?
          DOMPropertyNames[propName] :
          propName;

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
      } else {
        DOMProperty.getMutationMethod[propName] = null;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
      DOMProperty.mustUseProperty[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
      DOMProperty.hasSideEffects[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
      DOMProperty.hasBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
      DOMProperty.hasNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
      DOMProperty.hasPositiveNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
      DOMProperty.hasOverloadedBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

      ("production" !== "development" ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== "development" ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== "development" ? invariant(
        !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
        'numeric value, but not a combination: %s',
        propName
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
        !!DOMProperty.hasNumericValue[propName] +
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be numeric or parse as a
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasNumericValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * Whether the property can be used as a flag as well as with a value. Removed
   * when strictly equal to false; present without a value when strictly equal
   * to true; present with a value otherwise.
   * @type {Object}
   */
  hasOverloadedBooleanValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

},{"./invariant":126}],12:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

function shouldIgnoreValue(name, value) {
  return value == null ||
    (DOMProperty.hasBooleanValue[name] && !value) ||
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
}

var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
  return escapeTextForBrowser(name) + '="';
});

if ("production" !== "development") {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = (
      DOMProperty.isCustomAttribute(lowerCasedName) ?
        lowerCasedName :
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
        DOMProperty.getPossibleStandardName[lowerCasedName] :
        null
    );

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    ("production" !== "development" ? warning(
      standardName == null,
      'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'
    ) : null);

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +
      escapeTextForBrowser(id) + '"';
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
        return escapeTextForBrowser(attributeName);
      }
      return processAttributeNameAndPrefix(attributeName) +
        escapeTextForBrowser(value) + '"';
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return processAttributeNameAndPrefix(name) +
        escapeTextForBrowser(value) + '"';
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== ('' + value)) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          propName
        );
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

},{"./DOMProperty":11,"./escapeTextForBrowser":109,"./memoizeStringOnly":135,"./warning":145}],13:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createNodesFromMarkup = _dereq_("./createNodesFromMarkup");
var emptyFunction = _dereq_("./emptyFunction");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
      'thread. Make sure `window` and `document` are available globally ' +
      'before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== "development" ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      for (var resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (i = 0; i < renderNodes.length; ++i) {
        var renderNode = renderNodes[i];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== "development" ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== "development") {
          console.error(
            "Danger: Discarding unexpected node:",
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== "development" ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== "development" ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. Make sure `window` and `document` are available ' +
      'globally before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== "development" ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== "development" ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See renderComponentToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

},{"./ExecutionEnvironment":22,"./createNodesFromMarkup":104,"./emptyFunction":107,"./getMarkupWrap":118,"./invariant":126}],14:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

"use strict";

 var keyOf = _dereq_("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({CompositionEventPlugin: null}),
  keyOf({BeforeInputEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":133}],15:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

var ReactMount = _dereq_("./ReactMount");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactMount":63,"./SyntheticMouseEvent":91,"./keyOf":133}],16:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTextInput: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":132}],17:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== "development") {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  },

  registerDefault: function() {}
};

module.exports = EventListener;

},{"./emptyFunction":107}],18:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

"use strict";

var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var EventPluginUtils = _dereq_("./EventPluginUtils");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var invalid = !InstanceHandle||
    !InstanceHandle.traverseTwoPhase ||
    !InstanceHandle.traverseEnterLeave;
  if (invalid) {
    throw new Error('InstanceHandle not injected before use!');
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== "development") {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== "development") {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== "development" ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== "development" ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

},{"./EventPluginRegistry":19,"./EventPluginUtils":20,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],19:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== "development" ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== "development" ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== "development" ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== "development" ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
      'once. You are likely trying to load more than one copy of React.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== "development" ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

},{"./invariant":126}],20:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var invariant = _dereq_("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== "development") {
      ("production" !== "development" ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== "development") {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== "development" ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, executeDispatch) {
  forEachEventDispatch(event, executeDispatch);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== "development" ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

},{"./EventConstants":16,"./invariant":126}],21:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== "development") {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners =
      accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners =
        accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

},{"./EventConstants":16,"./EventPluginHub":18,"./accumulateInto":97,"./forEachAccumulated":112}],22:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = !!(
  typeof window !== 'undefined' &&
  window.document &&
  window.document.createElement
);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],23:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE =
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = (
    implementation &&
    implementation.hasFeature &&
    implementation.hasFeature(
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
      '1.1'
    )
  );
}


var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints
    autoCorrect: null, // Supported in Mobile Safari for keyboard hints
    itemProp: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE, // Microdata: http://schema.org/docs/gs.html
    itemType: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    property: null // Supports OG in meta tags
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    encType: 'enctype',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;

},{"./DOMProperty":11,"./ExecutionEnvironment":22}],24:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

"use strict";

var ReactPropTypes = _dereq_("./ReactPropTypes");

var invariant = _dereq_("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== "development" ? invariant(
    input.props.checkedLink == null || input.props.valueLink == null,
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `value` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultValue`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      checked: function(props, propName, componentName) {
        if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `checked` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultChecked`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

},{"./ReactPropTypes":72,"./invariant":126}],25:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LocalEventTrapMixin
 */

"use strict";

var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

function remove(event) {
  event.remove();
}

var LocalEventTrapMixin = {
  trapBubbledEvent:function(topLevelType, handlerBaseName) {
    ("production" !== "development" ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      this.getDOMNode()
    );
    this._localEventListeners =
      accumulateInto(this._localEventListeners, listener);
  },

  // trapCapturedEvent would look nearly identical. We don't implement that
  // method because it isn't currently needed.

  componentWillUnmount:function() {
    if (this._localEventListeners) {
      forEachAccumulated(this._localEventListeners, remove);
    }
  }
};

module.exports = LocalEventTrapMixin;

},{"./ReactBrowserEventEmitter":30,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],26:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var emptyFunction = _dereq_("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":16,"./emptyFunction":107}],27:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
};

module.exports = assign;

},{}],28:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== "development" ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

},{"./invariant":126}],29:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

"use strict";

var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactMount = _dereq_("./ReactMount");

var invariant = _dereq_("./invariant");

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function() {
    ("production" !== "development" ? invariant(
      this.isMounted(),
      'getDOMNode(): A component must be mounted to have a DOM node.'
    ) : invariant(this.isMounted()));
    if (ReactEmptyComponent.isNullComponentID(this._rootNodeID)) {
      return null;
    }
    return ReactMount.getNode(this._rootNodeID);
  }
};

module.exports = ReactBrowserComponentMixin;

},{"./ReactEmptyComponent":54,"./ReactMount":63,"./invariant":126}],30:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var ReactEventEmitterMixin = _dereq_("./ReactEventEmitterMixin");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var assign = _dereq_("./Object.assign");
var isEventSupported = _dereq_("./isEventSupported");

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTextInput: 'textInput',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
        ReactBrowserEventEmitter.handleTopLevel
      );
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      ReactBrowserEventEmitter.ReactEventListener &&
      ReactBrowserEventEmitter.ReactEventListener.isEnabled()
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!(
            isListening.hasOwnProperty(dependency) &&
            isListening[dependency]
          )) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'wheel',
              mountAt
            );
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'mousewheel',
              mountAt
            );
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt
            );
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topScroll,
              'scroll',
              mountAt
            );
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topScroll,
              'scroll',
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
            );
          }
        } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topFocus,
              'focus',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topBlur,
              'blur',
              mountAt
            );
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topFocus,
              'focusin',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topBlur,
              'focusout',
              mountAt
            );
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            dependency,
            topEventMapping[dependency],
            mountAt
          );
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function(){
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

module.exports = ReactBrowserEventEmitter;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPluginRegistry":19,"./Object.assign":27,"./ReactEventEmitterMixin":56,"./ViewportMetrics":96,"./isEventSupported":127}],31:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;

  var keyUnique = !mapResult.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'ReactChildren.map(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);

  if (keyUnique) {
    var mappedChild =
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
    mapResult[name] = mappedChild;
  }
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return mapResult;
}

function forEachSingleChildDummy(traverseContext, child, name, i) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  count: countChildren
};

module.exports = ReactChildren;

},{"./PooledClass":28,"./traverseAllChildren":144,"./warning":145}],32:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");

/**
 * Every React component is in one of these life cycles.
 */
var ComponentLifeCycle = keyMirror({
  /**
   * Mounted components have a DOM node representation and are capable of
   * receiving new props.
   */
  MOUNTED: null,
  /**
   * Unmounted components are inactive and cannot receive new props.
   */
  UNMOUNTED: null
});

var injected = false;

/**
 * Optionally injectable environment dependent cleanup hook. (server vs.
 * browser etc). Example: A browser system caches DOM nodes based on component
 * ID and must remove that cache entry when this instance is unmounted.
 *
 * @private
 */
var unmountIDFromEnvironment = null;

/**
 * The "image" of a component tree, is the platform specific (typically
 * serialized) data that represents a tree of lower level UI building blocks.
 * On the web, this "image" is HTML markup which describes a construction of
 * low level `div` and `span` nodes. Other platforms may have different
 * encoding of this "image". This must be injected.
 *
 * @private
 */
var mountImageIntoNode = null;

/**
 * Components are the basic units of composition in React.
 *
 * Every component accepts a set of keyed input parameters known as "props" that
 * are initialized by the constructor. Once a component is mounted, the props
 * can be mutated using `setProps` or `replaceProps`.
 *
 * Every component is capable of the following operations:
 *
 *   `mountComponent`
 *     Initializes the component, renders markup, and registers event listeners.
 *
 *   `receiveComponent`
 *     Updates the rendered DOM nodes to match the given component.
 *
 *   `unmountComponent`
 *     Releases any resources allocated by this component.
 *
 * Components can also be "owned" by other components. Being owned by another
 * component means being constructed by that component. This is different from
 * being the child of a component, which means having a DOM representation that
 * is a child of the DOM representation of that component.
 *
 * @class ReactComponent
 */
var ReactComponent = {

  injection: {
    injectEnvironment: function(ReactComponentEnvironment) {
      ("production" !== "development" ? invariant(
        !injected,
        'ReactComponent: injectEnvironment() can only be called once.'
      ) : invariant(!injected));
      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;
      unmountIDFromEnvironment =
        ReactComponentEnvironment.unmountIDFromEnvironment;
      ReactComponent.BackendIDOperations =
        ReactComponentEnvironment.BackendIDOperations;
      injected = true;
    }
  },

  /**
   * @internal
   */
  LifeCycle: ComponentLifeCycle,

  /**
   * Injected module that provides ability to mutate individual properties.
   * Injected into the base class because many different subclasses need access
   * to this.
   *
   * @internal
   */
  BackendIDOperations: null,

  /**
   * Base functionality for every ReactComponent constructor. Mixed into the
   * `ReactComponent` prototype, but exposed statically for easy access.
   *
   * @lends {ReactComponent.prototype}
   */
  Mixin: {

    /**
     * Checks whether or not this component is mounted.
     *
     * @return {boolean} True if mounted, false otherwise.
     * @final
     * @protected
     */
    isMounted: function() {
      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
    },

    /**
     * Sets a subset of the props.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    setProps: function(partialProps, callback) {
      // Merge with the pending element if it exists, otherwise with existing
      // element props.
      var element = this._pendingElement || this._currentElement;
      this.replaceProps(
        assign({}, element.props, partialProps),
        callback
      );
    },

    /**
     * Replaces all of the props.
     *
     * @param {object} props New props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    replaceProps: function(props, callback) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'replaceProps(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      ("production" !== "development" ? invariant(
        this._mountDepth === 0,
        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +
        'component with a parent. This is an anti-pattern since props will ' +
        'get reactively updated when rendered. Instead, change the owner\'s ' +
        '`render` method to pass the correct value as props to the component ' +
        'where it is created.'
      ) : invariant(this._mountDepth === 0));
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        this._pendingElement || this._currentElement,
        props
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Schedule a partial update to the props. Only used for internal testing.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @internal
     */
    _setPropsInternal: function(partialProps, callback) {
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      var element = this._pendingElement || this._currentElement;
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        element,
        assign({}, element.props, partialProps)
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Base constructor for all React components.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.construct.call(this, ...)`.
     *
     * @param {ReactElement} element
     * @internal
     */
    construct: function(element) {
      // This is the public exposed props object after it has been processed
      // with default props. The element's props represents the true internal
      // state of the props.
      this.props = element.props;
      // Record the component responsible for creating this component.
      // This is accessible through the element but we maintain an extra
      // field for compatibility with devtools and as a way to make an
      // incremental update. TODO: Consider deprecating this field.
      this._owner = element._owner;

      // All components start unmounted.
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;

      // See ReactUpdates.
      this._pendingCallbacks = null;

      // We keep the old element and a reference to the pending element
      // to track updates.
      this._currentElement = element;
      this._pendingElement = null;
    },

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * NOTE: This does not insert any nodes into the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {number} mountDepth number of components in the owner hierarchy.
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @internal
     */
    mountComponent: function(rootID, transaction, mountDepth) {
      ("production" !== "development" ? invariant(
        !this.isMounted(),
        'mountComponent(%s, ...): Can only mount an unmounted component. ' +
        'Make sure to avoid storing components between renders or reusing a ' +
        'single component instance in multiple places.',
        rootID
      ) : invariant(!this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        var owner = this._currentElement._owner;
        ReactOwner.addComponentAsRefTo(this, ref, owner);
      }
      this._rootNodeID = rootID;
      this._lifeCycleState = ComponentLifeCycle.MOUNTED;
      this._mountDepth = mountDepth;
      // Effectively: return '';
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * NOTE: This does not remove any nodes from the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.unmountComponent.call(this)`.
     *
     * @internal
     */
    unmountComponent: function() {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'unmountComponent(): Can only unmount a mounted component.'
      ) : invariant(this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        ReactOwner.removeComponentAsRefFrom(this, ref, this._owner);
      }
      unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
    },

    /**
     * Given a new instance of this component, updates the rendered DOM nodes
     * as if that instance was rendered instead.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.
     *
     * @param {object} nextComponent Next set of properties.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function(nextElement, transaction) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'receiveComponent(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      this._pendingElement = nextElement;
      this.performUpdateIfNecessary(transaction);
    },

    /**
     * If `_pendingElement` is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function(transaction) {
      if (this._pendingElement == null) {
        return;
      }
      var prevElement = this._currentElement;
      var nextElement = this._pendingElement;
      this._currentElement = nextElement;
      this.props = nextElement.props;
      this._owner = nextElement._owner;
      this._pendingElement = null;
      this.updateComponent(transaction, prevElement);
    },

    /**
     * Updates the component's currently mounted representation.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {object} prevElement
     * @internal
     */
    updateComponent: function(transaction, prevElement) {
      var nextElement = this._currentElement;

      // If either the owner or a `ref` has changed, make sure the newest owner
      // has stored a reference to `this`, and the previous owner (if different)
      // has forgotten the reference to `this`. We use the element instead
      // of the public this.props because the post processing cannot determine
      // a ref. The ref conceptually lives on the element.

      // TODO: Should this even be possible? The owner cannot change because
      // it's forbidden by shouldUpdateReactComponent. The ref can change
      // if you swap the keys of but not the refs. Reconsider where this check
      // is made. It probably belongs where the key checking and
      // instantiateReactComponent is done.

      if (nextElement._owner !== prevElement._owner ||
          nextElement.ref !== prevElement.ref) {
        if (prevElement.ref != null) {
          ReactOwner.removeComponentAsRefFrom(
            this, prevElement.ref, prevElement._owner
          );
        }
        // Correct, even if the owner is the same, and only the ref has changed.
        if (nextElement.ref != null) {
          ReactOwner.addComponentAsRefTo(
            this,
            nextElement.ref,
            nextElement._owner
          );
        }
      }
    },

    /**
     * Mounts this component and inserts it into the DOM.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @internal
     * @see {ReactMount.render}
     */
    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {
      var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
      transaction.perform(
        this._mountComponentIntoNode,
        this,
        rootID,
        container,
        transaction,
        shouldReuseMarkup
      );
      ReactUpdates.ReactReconcileTransaction.release(transaction);
    },

    /**
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {ReactReconcileTransaction} transaction
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @private
     */
    _mountComponentIntoNode: function(
        rootID,
        container,
        transaction,
        shouldReuseMarkup) {
      var markup = this.mountComponent(rootID, transaction, 0);
      mountImageIntoNode(markup, container, shouldReuseMarkup);
    },

    /**
     * Checks if this component is owned by the supplied `owner` component.
     *
     * @param {ReactComponent} owner Component to check.
     * @return {boolean} True if `owners` owns this component.
     * @final
     * @internal
     */
    isOwnedBy: function(owner) {
      return this._owner === owner;
    },

    /**
     * Gets another component, that shares the same owner as this one, by ref.
     *
     * @param {string} ref of a sibling Component.
     * @return {?ReactComponent} the actual sibling Component.
     * @final
     * @internal
     */
    getSiblingByRef: function(ref) {
      var owner = this._owner;
      if (!owner || !owner.refs) {
        return null;
      }
      return owner.refs[ref];
    }
  }
};

module.exports = ReactComponent;

},{"./Object.assign":27,"./ReactElement":52,"./ReactOwner":67,"./ReactUpdates":79,"./invariant":126,"./keyMirror":132}],33:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

"use strict";

var ReactDOMIDOperations = _dereq_("./ReactDOMIDOperations");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");
var ReactReconcileTransaction = _dereq_("./ReactReconcileTransaction");

var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");


var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;


/**
 * Abstracts away all functionality of `ReactComponent` requires knowledge of
 * the browser context.
 */
var ReactComponentBrowserEnvironment = {
  ReactReconcileTransaction: ReactReconcileTransaction,

  BackendIDOperations: ReactDOMIDOperations,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  },

  /**
   * @param {string} markup Markup string to place into the DOM Element.
   * @param {DOMElement} container DOM Element to insert markup into.
   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the
   * container if possible.
   */
  mountImageIntoNode: ReactPerf.measure(
    'ReactComponentBrowserEnvironment',
    'mountImageIntoNode',
    function(markup, container, shouldReuseMarkup) {
      ("production" !== "development" ? invariant(
        container && (
          container.nodeType === ELEMENT_NODE_TYPE ||
            container.nodeType === DOC_NODE_TYPE
        ),
        'mountComponentIntoNode(...): Target container is not valid.'
      ) : invariant(container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
          container.nodeType === DOC_NODE_TYPE
      )));

      if (shouldReuseMarkup) {
        if (ReactMarkupChecksum.canReuseMarkup(
          markup,
          getReactRootElementInContainer(container))) {
          return;
        } else {
          ("production" !== "development" ? invariant(
            container.nodeType !== DOC_NODE_TYPE,
            'You\'re trying to render a component to the document using ' +
            'server rendering but the checksum was invalid. This usually ' +
            'means you rendered a different component type or props on ' +
            'the client from the one on the server, or your render() ' +
            'methods are impure. React cannot handle this case due to ' +
            'cross-browser quirks by rendering at the document root. You ' +
            'should look for environment dependent code in your components ' +
            'and ensure the props are the same client and server side.'
          ) : invariant(container.nodeType !== DOC_NODE_TYPE));

          if ("production" !== "development") {
            console.warn(
              'React attempted to use reuse markup in a container but the ' +
              'checksum was invalid. This generally means that you are ' +
              'using server rendering and the markup generated on the ' +
              'server was not what the client was expecting. React injected ' +
              'new markup to compensate which works but you have lost many ' +
              'of the benefits of server rendering. Instead, figure out ' +
              'why the markup being generated is different on the client ' +
              'or server.'
            );
          }
        }
      }

      ("production" !== "development" ? invariant(
        container.nodeType !== DOC_NODE_TYPE,
        'You\'re trying to render a component to the document but ' +
          'you didn\'t use server rendering. We can\'t do this ' +
          'without using server rendering due to cross-browser quirks. ' +
          'See renderComponentToString() for server rendering.'
      ) : invariant(container.nodeType !== DOC_NODE_TYPE));

      setInnerHTML(container, markup);
    }
  )
};

module.exports = ReactComponentBrowserEnvironment;

},{"./ReactDOMIDOperations":41,"./ReactMarkupChecksum":62,"./ReactMount":63,"./ReactPerf":68,"./ReactReconcileTransaction":74,"./getReactRootElementInContainer":120,"./invariant":126,"./setInnerHTML":140}],34:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactErrorUtils = _dereq_("./ReactErrorUtils");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTransferer = _dereq_("./ReactPropTransferer");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var mapObject = _dereq_("./mapObject");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var MIXINS_KEY = keyOf({mixins: null});

/**
 * Policies that describe methods in `ReactCompositeComponentInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base ReactCompositeComponent class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactCompositeComponent`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactCompositeComponentInterface
 * @internal
 */
var ReactCompositeComponentInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function(Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(Constructor, childContextTypes) {
    validateTypeDef(
      Constructor,
      childContextTypes,
      ReactPropTypeLocations.childContext
    );
    Constructor.childContextTypes = assign(
      {},
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(Constructor, contextTypes) {
    validateTypeDef(
      Constructor,
      contextTypes,
      ReactPropTypeLocations.context
    );
    Constructor.contextTypes = assign(
      {},
      Constructor.contextTypes,
      contextTypes
    );
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function(Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
        Constructor.getDefaultProps,
        getDefaultProps
      );
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function(Constructor, propTypes) {
    validateTypeDef(
      Constructor,
      propTypes,
      ReactPropTypeLocations.prop
    );
    Constructor.propTypes = assign(
      {},
      Constructor.propTypes,
      propTypes
    );
  },
  statics: function(Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  }
};

function getDeclarationErrorAddendum(component) {
  var owner = component._owner || null;
  if (owner && owner.constructor && owner.constructor.displayName) {
    return ' Check the render method of `' + owner.constructor.displayName +
      '`.';
  }
  return '';
}

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      ("production" !== "development" ? invariant(
        typeof typeDef[propName] == 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactCompositeComponent',
        ReactPropTypeLocationNames[location],
        propName
      ) : invariant(typeof typeDef[propName] == 'function'));
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ?
    ReactCompositeComponentInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactCompositeComponentInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactCompositeComponentInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

function validateLifeCycleOnReplaceState(instance) {
  var compositeLifeCycleState = instance._compositeLifeCycleState;
  ("production" !== "development" ? invariant(
    instance.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
    'replaceState(...): Can only update a mounted or mounting component.'
  ) : invariant(instance.isMounted() ||
    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
  ("production" !== "development" ? invariant(
    ReactCurrentOwner.current == null,
    'replaceState(...): Cannot update during an existing state transition ' +
    '(such as within `render`). Render methods should be a pure function ' +
    'of props and state.'
  ) : invariant(ReactCurrentOwner.current == null));
  ("production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
    'replaceState(...): Cannot update while unmounting component. This ' +
    'usually means you called setState() on an unmounted component.'
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building `ReactCompositeComponent` classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  ("production" !== "development" ? invariant(
    !ReactLegacyElement.isValidFactory(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactLegacyElement.isValidFactory(spec)));
  ("production" !== "development" ? invariant(
    !ReactElement.isValidElement(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactElement.isValidElement(spec)));

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactCompositeComponent methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isCompositeComponentMethod =
        ReactCompositeComponentInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isCompositeComponentMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactCompositeComponentInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== "development" ? invariant(
            isCompositeComponentMethod && (
              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
              specPolicy === SpecPolicy.DEFINE_MANY
            ),
            'ReactCompositeComponent: Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isCompositeComponentMethod && (
            specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
            specPolicy === SpecPolicy.DEFINE_MANY
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== "development") {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    ("production" !== "development" ? invariant(
      !isReserved,
      'ReactCompositeComponent: You are attempting to define a reserved ' +
      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
      'as an instance property instead; it will still be accessible on the ' +
      'constructor.',
      name
    ) : invariant(!isReserved));

    var isInherited = name in Constructor;
    ("production" !== "development" ? invariant(
      !isInherited,
      'ReactCompositeComponent: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be ' +
      'due to a mixin.',
      name
    ) : invariant(!isInherited));
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeObjectsWithNoDuplicateKeys(one, two) {
  ("production" !== "development" ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  mapObject(two, function(value, key) {
    ("production" !== "development" ? invariant(
      one[key] === undefined,
      'mergeObjectsWithNoDuplicateKeys(): ' +
      'Tried to merge two objects with the same key: `%s`. This conflict ' +
      'may be due to a mixin; in particular, this may be caused by two ' +
      'getInitialState() or getDefaultProps() methods returning objects ' +
      'with clashing keys.',
      key
    ) : invariant(one[key] === undefined));
    one[key] = value;
  });
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    return mergeObjectsWithNoDuplicateKeys(a, b);
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * `ReactCompositeComponent` maintains an auxiliary life cycle state in
 * `this._compositeLifeCycleState` (which can be null).
 *
 * This is different from the life cycle state maintained by `ReactComponent` in
 * `this._lifeCycleState`. The following diagram shows how the states overlap in
 * time. There are times when the CompositeLifeCycle is null - at those times it
 * is only meaningful to look at ComponentLifeCycle alone.
 *
 * Top Row: ReactComponent.ComponentLifeCycle
 * Low Row: ReactComponent.CompositeLifeCycle
 *
 * +-------+---------------------------------+--------+
 * |  UN   |             MOUNTED             |   UN   |
 * |MOUNTED|                                 | MOUNTED|
 * +-------+---------------------------------+--------+
 * |       ^--------+   +-------+   +--------^        |
 * |       |        |   |       |   |        |        |
 * |    0--|MOUNTING|-0-|RECEIVE|-0-|   UN   |--->0   |
 * |       |        |   |PROPS  |   |MOUNTING|        |
 * |       |        |   |       |   |        |        |
 * |       |        |   |       |   |        |        |
 * |       +--------+   +-------+   +--------+        |
 * |       |                                 |        |
 * +-------+---------------------------------+--------+
 */
var CompositeLifeCycle = keyMirror({
  /**
   * Components in the process of being mounted respond to state changes
   * differently.
   */
  MOUNTING: null,
  /**
   * Components in the process of being unmounted are guarded against state
   * changes.
   */
  UNMOUNTING: null,
  /**
   * Components that are mounted and receiving new props respond to state
   * changes differently.
   */
  RECEIVING_PROPS: null
});

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function(element) {
    // Children can be either an array or more than one argument
    ReactComponent.Mixin.construct.apply(this, arguments);
    ReactOwner.Mixin.construct.apply(this, arguments);

    this.state = null;
    this._pendingState = null;

    // This is the public post-processed context. The real context and pending
    // context lives on the element.
    this.context = null;

    this._compositeLifeCycleState = null;
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    return ReactComponent.Mixin.isMounted.call(this) &&
      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;

      if (this.__reactAutoBindMap) {
        this._bindAutoBindMethods();
      }

      this.context = this._processContext(this._currentElement._context);
      this.props = this._processProps(this.props);

      this.state = this.getInitialState ? this.getInitialState() : null;
      ("production" !== "development" ? invariant(
        typeof this.state === 'object' && !Array.isArray(this.state),
        '%s.getInitialState(): must return an object or null',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));

      this._pendingState = null;
      this._pendingForceUpdate = false;

      if (this.componentWillMount) {
        this.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingState` without triggering a re-render.
        if (this._pendingState) {
          this.state = this._pendingState;
          this._pendingState = null;
        }
      }

      this._renderedComponent = instantiateReactComponent(
        this._renderValidatedComponent(),
        this._currentElement.type // The wrapping type
      );

      // Done with mounting, `setState` will now trigger UI changes.
      this._compositeLifeCycleState = null;
      var markup = this._renderedComponent.mountComponent(
        rootID,
        transaction,
        mountDepth + 1
      );
      if (this.componentDidMount) {
        transaction.getReactMountReady().enqueue(this.componentDidMount, this);
      }
      return markup;
    }
  ),

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
    if (this.componentWillUnmount) {
      this.componentWillUnmount();
    }
    this._compositeLifeCycleState = null;

    this._renderedComponent.unmountComponent();
    this._renderedComponent = null;

    ReactComponent.Mixin.unmountComponent.call(this);

    // Some existing components rely on this.props even after they've been
    // destroyed (in event handlers).
    // TODO: this.props = null;
    // TODO: this.state = null;
  },

  /**
   * Sets a subset of the state. Always use this or `replaceState` to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  setState: function(partialState, callback) {
    ("production" !== "development" ? invariant(
      typeof partialState === 'object' || partialState == null,
      'setState(...): takes an object of state variables to update.'
    ) : invariant(typeof partialState === 'object' || partialState == null));
    if ("production" !== "development"){
      ("production" !== "development" ? warning(
        partialState != null,
        'setState(...): You passed an undefined or null state object; ' +
        'instead, use forceUpdate().'
      ) : null);
    }
    // Merge with `_pendingState` if it exists, otherwise with existing state.
    this.replaceState(
      assign({}, this._pendingState || this.state, partialState),
      callback
    );
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {object} completeState Next state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  replaceState: function(completeState, callback) {
    validateLifeCycleOnReplaceState(this);
    this._pendingState = completeState;
    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {
      // If we're in a componentWillMount handler, don't enqueue a rerender
      // because ReactUpdates assumes we're in a browser context (which is wrong
      // for server rendering) and we're about to do a render anyway.
      // TODO: The callback here is ignored when setState is called from
      // componentWillMount. Either fix it or disallow doing so completely in
      // favor of getInitialState.
      ReactUpdates.enqueueUpdate(this, callback);
    }
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = null;
    var contextTypes = this.constructor.contextTypes;
    if (contextTypes) {
      maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      if ("production" !== "development") {
        this._checkPropTypes(
          contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function(currentContext) {
    var childContext = this.getChildContext && this.getChildContext();
    var displayName = this.constructor.displayName || 'ReactCompositeComponent';
    if (childContext) {
      ("production" !== "development" ? invariant(
        typeof this.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        displayName
      ) : invariant(typeof this.constructor.childContextTypes === 'object'));
      if ("production" !== "development") {
        this._checkPropTypes(
          this.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== "development" ? invariant(
          name in this.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          displayName,
          name
        ) : invariant(name in this.constructor.childContextTypes));
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    if ("production" !== "development") {
      var propTypes = this.constructor.propTypes;
      if (propTypes) {
        this._checkPropTypes(propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.constructor.displayName;
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error =
          propTypes[propName](props, propName, componentName, location);
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // renderComponent calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);
          ("production" !== "development" ? warning(false, error.message + addendum) : null);
        }
      }
    }
  },

  /**
   * If any of `_pendingElement`, `_pendingState`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(transaction) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    // Do not trigger a state transition if we are in the middle of mounting or
    // receiving props because both of those will already be doing this.
    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||
        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {
      return;
    }

    if (this._pendingElement == null &&
        this._pendingState == null &&
        !this._pendingForceUpdate) {
      return;
    }

    var nextContext = this.context;
    var nextProps = this.props;
    var nextElement = this._currentElement;
    if (this._pendingElement != null) {
      nextElement = this._pendingElement;
      nextContext = this._processContext(nextElement._context);
      nextProps = this._processProps(nextElement.props);
      this._pendingElement = null;

      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
      if (this.componentWillReceiveProps) {
        this.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    this._compositeLifeCycleState = null;

    var nextState = this._pendingState || this.state;
    this._pendingState = null;

    var shouldUpdate =
      this._pendingForceUpdate ||
      !this.shouldComponentUpdate ||
      this.shouldComponentUpdate(nextProps, nextState, nextContext);

    if ("production" !== "development") {
      if (typeof shouldUpdate === "undefined") {
        console.warn(
          (this.constructor.displayName || 'ReactCompositeComponent') +
          '.shouldComponentUpdate(): Returned undefined instead of a ' +
          'boolean value. Make sure to return true or false.'
        );
      }
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(
        nextElement,
        nextProps,
        nextState,
        nextContext,
        transaction
      );
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state.
      this._currentElement = nextElement;
      this.props = nextProps;
      this.state = nextState;
      this.context = nextContext;

      // Owner cannot change because shouldUpdateReactComponent doesn't allow
      // it. TODO: Remove this._owner completely.
      this._owner = nextElement._owner;
    }
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @private
   */
  _performComponentUpdate: function(
    nextElement,
    nextProps,
    nextState,
    nextContext,
    transaction
  ) {
    var prevElement = this._currentElement;
    var prevProps = this.props;
    var prevState = this.state;
    var prevContext = this.context;

    if (this.componentWillUpdate) {
      this.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this.props = nextProps;
    this.state = nextState;
    this.context = nextContext;

    // Owner cannot change because shouldUpdateReactComponent doesn't allow
    // it. TODO: Remove this._owner completely.
    this._owner = nextElement._owner;

    this.updateComponent(
      transaction,
      prevElement
    );

    if (this.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),
        this
      );
    }
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'updateComponent',
    function(transaction, prevParentElement) {
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevParentElement
      );

      var prevComponentInstance = this._renderedComponent;
      var prevElement = prevComponentInstance._currentElement;
      var nextElement = this._renderValidatedComponent();
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        prevComponentInstance.receiveComponent(nextElement, transaction);
      } else {
        // These two IDs are actually the same! But nothing should rely on that.
        var thisID = this._rootNodeID;
        var prevComponentID = prevComponentInstance._rootNodeID;
        prevComponentInstance.unmountComponent();
        this._renderedComponent = instantiateReactComponent(
          nextElement,
          this._currentElement.type
        );
        var nextMarkup = this._renderedComponent.mountComponent(
          thisID,
          transaction,
          this._mountDepth + 1
        );
        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(
          prevComponentID,
          nextMarkup
        );
      }
    }
  ),

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  forceUpdate: function(callback) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    ("production" !== "development" ? invariant(
      this.isMounted() ||
        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
      'forceUpdate(...): Can only force an update on mounted or mounting ' +
        'components.'
    ) : invariant(this.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
    ("production" !== "development" ? invariant(
      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
      ReactCurrentOwner.current == null,
      'forceUpdate(...): Cannot force an update while unmounting component ' +
      'or within a `render` function.'
    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
    ReactCurrentOwner.current == null));
    this._pendingForceUpdate = true;
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * @private
   */
  _renderValidatedComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    '_renderValidatedComponent',
    function() {
      var renderedComponent;
      var previousContext = ReactContext.current;
      ReactContext.current = this._processChildContext(
        this._currentElement._context
      );
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = this.render();
        if (renderedComponent === null || renderedComponent === false) {
          renderedComponent = ReactEmptyComponent.getEmptyComponent();
          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);
        } else {
          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);
        }
      } finally {
        ReactContext.current = previousContext;
        ReactCurrentOwner.current = null;
      }
      ("production" !== "development" ? invariant(
        ReactElement.isValidElement(renderedComponent),
        '%s.render(): A valid ReactComponent must be returned. You may have ' +
          'returned undefined, an array or some other invalid object.',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(ReactElement.isValidElement(renderedComponent)));
      return renderedComponent;
    }
  ),

  /**
   * @private
   */
  _bindAutoBindMethods: function() {
    for (var autoBindKey in this.__reactAutoBindMap) {
      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        continue;
      }
      var method = this.__reactAutoBindMap[autoBindKey];
      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(
        method,
        this.constructor.displayName + '.' + autoBindKey
      ));
    }
  },

  /**
   * Binds a method to the component.
   *
   * @param {function} method Method to be bound.
   * @private
   */
  _bindAutoBindMethod: function(method) {
    var component = this;
    var boundMethod = method.bind(component);
    if ("production" !== "development") {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): React component methods may only be bound to the ' +
            'component instance. See ' + componentName
          );
        } else if (!args.length) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): You are binding a component method to the component. ' +
            'React does this for you automatically in a high-performance ' +
            'way, so you can safely remove this call. See ' + componentName
          );
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }
};

var ReactCompositeComponentBase = function() {};
assign(
  ReactCompositeComponentBase.prototype,
  ReactComponent.Mixin,
  ReactOwner.Mixin,
  ReactPropTransferer.Mixin,
  ReactCompositeComponentMixin
);

/**
 * Module for creating composite components.
 *
 * @class ReactCompositeComponent
 * @extends ReactComponent
 * @extends ReactOwner
 * @extends ReactPropTransferer
 */
var ReactCompositeComponent = {

  LifeCycle: CompositeLifeCycle,

  Base: ReactCompositeComponentBase,

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function(props) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted. This will later be used
      // by the stand-alone class implementation.
    };
    Constructor.prototype = new ReactCompositeComponentBase();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(
      mixSpecIntoComponent.bind(null, Constructor)
    );

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    ("production" !== "development" ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== "development") {
      if (Constructor.prototype.componentShouldUpdate) {
        monitorCodeUse(
          'react_component_should_update_warning',
          { component: spec.displayName }
        );
        console.warn(
          (spec.displayName || 'A component') + ' has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.'
         );
      }
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactCompositeComponentInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    if ("production" !== "development") {
      return ReactLegacyElement.wrapFactory(
        ReactElementValidator.createFactory(Constructor)
      );
    }
    return ReactLegacyElement.wrapFactory(
      ReactElement.createFactory(Constructor)
    );
  },

  injection: {
    injectMixin: function(mixin) {
      injectedMixins.push(mixin);
    }
  }
};

module.exports = ReactCompositeComponent;

},{"./Object.assign":27,"./ReactComponent":32,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactElementValidator":53,"./ReactEmptyComponent":54,"./ReactErrorUtils":55,"./ReactLegacyElement":61,"./ReactOwner":67,"./ReactPerf":68,"./ReactPropTransferer":69,"./ReactPropTypeLocationNames":70,"./ReactPropTypeLocations":71,"./ReactUpdates":79,"./instantiateReactComponent":125,"./invariant":126,"./keyMirror":132,"./keyOf":133,"./mapObject":134,"./monitorCodeUse":136,"./shouldUpdateReactComponent":142,"./warning":145}],35:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactContext
 */

"use strict";

var assign = _dereq_("./Object.assign");

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: {},

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = assign({}, previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

},{"./Object.assign":27}],36:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

"use strict";

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],37:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");

var mapObject = _dereq_("./mapObject");

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if ("production" !== "development") {
    return ReactLegacyElement.markNonLegacyFactory(
      ReactElementValidator.createFactory(tag)
    );
  }
  return ReactLegacyElement.markNonLegacyFactory(
    ReactElement.createFactory(tag)
  );
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOM;

},{"./ReactElement":52,"./ReactElementValidator":53,"./ReactLegacyElement":61,"./mapObject":134}],38:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var keyMirror = _dereq_("./keyMirror");

// Store a reference to the <button> `ReactDOMComponent`. TODO: use string
var button = ReactElement.createFactory(ReactDOM.button.type);

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMButton',

  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":2,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./keyMirror":132}],39:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMProperty = _dereq_("./DOMProperty");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponent = _dereq_("./ReactComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var invariant = _dereq_("./invariant");
var isEventSupported = _dereq_("./isEventSupported");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  ("production" !== "development" ? invariant(
    props.children == null || props.dangerouslySetInnerHTML == null,
    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));
  if ("production" !== "development") {
    if (props.contentEditable && props.children != null) {
      console.warn(
        'A component is `contentEditable` and contains `children` managed by ' +
        'React. It is now your responsibility to guarantee that none of those '+
        'nodes are unexpectedly modified or duplicated. This is probably not ' +
        'intentional.'
      );
    }
  }
  ("production" !== "development" ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  if ("production" !== "development") {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    if (registrationName === 'onScroll' &&
        !isEventSupported('scroll', true)) {
      monitorCodeUse('react_no_scroll_event');
      console.warn('This browser doesn\'t support the `onScroll` event');
    }
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// We accept any tag to be rendered but since this gets injected into abitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    ("production" !== "development" ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;
  }
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag;
  this.tagName = tag.toUpperCase();
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} The computed markup.
   */
  mountComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      assertValidProps(this.props);
      var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
      return (
        this._createOpenTagMarkupAndPutListeners(transaction) +
        this._createContentMarkup(transaction) +
        closeTag
      );
    }
  ),

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this.props;
    var ret = '<' + this._tag;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = props.style = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = this.props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
      var childrenToUse = contentToUse != null ? null : this.props.children;
      if (contentToUse != null) {
        return escapeTextForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction
        );
        return mountImages.join('');
      }
    }
    return '';
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'updateComponent',
    function(transaction, prevElement) {
      assertValidProps(this._currentElement.props);
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevElement
      );
      this._updateDOMProperties(prevElement.props, transaction);
      this._updateDOMChildren(prevElement.props, transaction);
    }
  ),

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = lastProps[propKey];
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = nextProps.style = assign({}, nextProp);
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      ReactComponent.BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction) {
    var nextProps = this.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        ReactComponent.BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponent.Mixin.unmountComponent.call(this);
  }

};

assign(
  ReactDOMComponent.prototype,
  ReactComponent.Mixin,
  ReactDOMComponent.Mixin,
  ReactMultiChild.Mixin,
  ReactBrowserComponentMixin
);

module.exports = ReactDOMComponent;

},{"./CSSPropertyOperations":5,"./DOMProperty":11,"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./escapeTextForBrowser":109,"./invariant":126,"./isEventSupported":127,"./keyOf":133,"./monitorCodeUse":136}],40:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMForm
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <form> `ReactDOMComponent`. TODO: use string
var form = ReactElement.createFactory(ReactDOM.form.type);

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMForm',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return form(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],41:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMChildrenOperations = _dereq_("./DOMChildrenOperations");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updatePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertantly setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      if (value != null) {
        DOMPropertyOperations.setValueForProperty(node, name, value);
      } else {
        DOMPropertyOperations.deleteValueForProperty(node, name);
      }
    }
  ),

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'deletePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
      DOMPropertyOperations.deleteValueForProperty(node, name, value);
    }
  ),

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateStylesByID',
    function(id, styles) {
      var node = ReactMount.getNode(id);
      CSSPropertyOperations.setValueForStyles(node, styles);
    }
  ),

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateInnerHTMLByID',
    function(id, html) {
      var node = ReactMount.getNode(id);
      setInnerHTML(node, html);
    }
  ),

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateTextContentByID',
    function(id, content) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.updateTextContent(node, content);
    }
  ),

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyReplaceNodeWithMarkupByID',
    function(id, markup) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
    }
  ),

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyProcessChildrenUpdates',
    function(updates, markup) {
      for (var i = 0; i < updates.length; i++) {
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
      }
      DOMChildrenOperations.processUpdates(updates, markup);
    }
  )
};

module.exports = ReactDOMIDOperations;

},{"./CSSPropertyOperations":5,"./DOMChildrenOperations":10,"./DOMPropertyOperations":12,"./ReactMount":63,"./ReactPerf":68,"./invariant":126,"./setInnerHTML":140}],42:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMImg
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <img> `ReactDOMComponent`. TODO: use string
var img = ReactElement.createFactory(ReactDOM.img.type);

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],43:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

// Store a reference to the <input> `ReactDOMComponent`. TODO: use string
var input = ReactElement.createFactory(ReactDOM.input.type);

var instancesByReactID = {};

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMInput',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      initialChecked: this.props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.initialValue;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.initialChecked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== "development" ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== "development" ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactMount":63,"./ReactUpdates":79,"./invariant":126}],44:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

"use strict";

var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var warning = _dereq_("./warning");

// Store a reference to the <option> `ReactDOMComponent`. TODO: use string
var option = ReactElement.createFactory(ReactDOM.option.type);

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMOption',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select> instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

},{"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./warning":145}],45:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");

// Store a reference to the <select> `ReactDOMComponent`. TODO: use string
var select = ReactElement.createFactory(ReactDOM.select.type);

function updateWithPendingValueIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.setState({value: this._pendingValue});
    this._pendingValue = 0;
  }
}

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * If `value` is supplied, updates <option> elements on mount and update.
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {?*} propValue For uncontrolled components, null/undefined. For
 * controlled components, a string (or with `multiple`, a list of strings).
 * @private
 */
function updateOptions(component, propValue) {
  var multiple = component.props.multiple;
  var value = propValue != null ? propValue : component.state.value;
  var options = component.getDOMNode().options;
  var selectedValue, i, l;
  if (multiple) {
    selectedValue = {};
    for (i = 0, l = value.length; i < l; ++i) {
      selectedValue['' + value[i]] = true;
    }
  } else {
    selectedValue = '' + value;
  }
  for (i = 0, l = options.length; i < l; i++) {
    var selected = multiple ?
      selectedValue.hasOwnProperty(options[i].value) :
      options[i].value === selectedValue;

    if (selected !== options[i].selected) {
      options[i].selected = selected;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * string. If `multiple` is true, the prop must be an array of strings.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMSelect',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  getInitialState: function() {
    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};
  },

  componentWillMount: function() {
    this._pendingValue = null;
  },

  componentWillReceiveProps: function(nextProps) {
    if (!this.props.multiple && nextProps.multiple) {
      this.setState({value: [this.state.value]});
    } else if (this.props.multiple && !nextProps.multiple) {
      this.setState({value: this.state.value[0]});
    }
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentDidMount: function() {
    updateOptions(this, LinkedValueUtils.getValue(this));
  },

  componentDidUpdate: function(prevProps) {
    var value = LinkedValueUtils.getValue(this);
    var prevMultiple = !!prevProps.multiple;
    var multiple = !!this.props.multiple;
    if (value != null || prevMultiple !== multiple) {
      updateOptions(this, value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }

    var selectedValue;
    if (this.props.multiple) {
      selectedValue = [];
      var options = event.target.options;
      for (var i = 0, l = options.length; i < l; i++) {
        if (options[i].selected) {
          selectedValue.push(options[i].value);
        }
      }
    } else {
      selectedValue = event.target.value;
    }

    this._pendingValue = selectedValue;
    ReactUpdates.asap(updateWithPendingValueIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":2,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79}],46:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var getNodeForCharacterOffset = _dereq_("./getNodeForCharacterOffset");
var getTextContentAccessor = _dereq_("./getTextContentAccessor");

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
    selection.anchorNode,
    selection.anchorOffset,
    selection.focusNode,
    selection.focusOffset
  );

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
    tempRange.startContainer,
    tempRange.startOffset,
    tempRange.endContainer,
    tempRange.endOffset
  );

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && document.selection;

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

},{"./ExecutionEnvironment":22,"./getNodeForCharacterOffset":119,"./getTextContentAccessor":121}],47:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var warning = _dereq_("./warning");

// Store a reference to the <textarea> `ReactDOMComponent`. TODO: use string
var textarea = ReactElement.createFactory(ReactDOM.textarea.type);

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMTextarea',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== "development") {
        ("production" !== "development" ? warning(
          false,
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        ) : null);
      }
      ("production" !== "development" ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== "development" ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue)
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    ("production" !== "development" ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = null;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79,"./invariant":126,"./warning":145}],48:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

"use strict";

var ReactUpdates = _dereq_("./ReactUpdates");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(
  ReactDefaultBatchingStrategyTransaction.prototype,
  Transaction.Mixin,
  {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    }
  }
);

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, a, b) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b);
    } else {
      transaction.perform(callback, null, a, b);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./Object.assign":27,"./ReactUpdates":79,"./Transaction":95,"./emptyFunction":107}],49:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

"use strict";

var BeforeInputEventPlugin = _dereq_("./BeforeInputEventPlugin");
var ChangeEventPlugin = _dereq_("./ChangeEventPlugin");
var ClientReactRootIndex = _dereq_("./ClientReactRootIndex");
var CompositionEventPlugin = _dereq_("./CompositionEventPlugin");
var DefaultEventPluginOrder = _dereq_("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = _dereq_("./EnterLeaveEventPlugin");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var HTMLDOMPropertyConfig = _dereq_("./HTMLDOMPropertyConfig");
var MobileSafariClickEventPlugin = _dereq_("./MobileSafariClickEventPlugin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponentBrowserEnvironment =
  _dereq_("./ReactComponentBrowserEnvironment");
var ReactDefaultBatchingStrategy = _dereq_("./ReactDefaultBatchingStrategy");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDOMButton = _dereq_("./ReactDOMButton");
var ReactDOMForm = _dereq_("./ReactDOMForm");
var ReactDOMImg = _dereq_("./ReactDOMImg");
var ReactDOMInput = _dereq_("./ReactDOMInput");
var ReactDOMOption = _dereq_("./ReactDOMOption");
var ReactDOMSelect = _dereq_("./ReactDOMSelect");
var ReactDOMTextarea = _dereq_("./ReactDOMTextarea");
var ReactEventListener = _dereq_("./ReactEventListener");
var ReactInjection = _dereq_("./ReactInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var SelectEventPlugin = _dereq_("./SelectEventPlugin");
var ServerReactRootIndex = _dereq_("./ServerReactRootIndex");
var SimpleEventPlugin = _dereq_("./SimpleEventPlugin");
var SVGDOMPropertyConfig = _dereq_("./SVGDOMPropertyConfig");

var createFullPageComponent = _dereq_("./createFullPageComponent");

function inject() {
  ReactInjection.EventEmitter.injectReactEventListener(
    ReactEventListener
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    CompositionEventPlugin: CompositionEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(
    ReactDOMComponent
  );

  ReactInjection.NativeComponent.injectComponentClasses({
    'button': ReactDOMButton,
    'form': ReactDOMForm,
    'img': ReactDOMImg,
    'input': ReactDOMInput,
    'option': ReactDOMOption,
    'select': ReactDOMSelect,
    'textarea': ReactDOMTextarea,

    'html': createFullPageComponent('html'),
    'head': createFullPageComponent('head'),
    'body': createFullPageComponent('body')
  });

  // This needs to happen after createFullPageComponent() otherwise the mixin
  // gets double injected.
  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(
    ReactComponentBrowserEnvironment.ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if ("production" !== "development") {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = _dereq_("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

},{"./BeforeInputEventPlugin":3,"./ChangeEventPlugin":7,"./ClientReactRootIndex":8,"./CompositionEventPlugin":9,"./DefaultEventPluginOrder":14,"./EnterLeaveEventPlugin":15,"./ExecutionEnvironment":22,"./HTMLDOMPropertyConfig":23,"./MobileSafariClickEventPlugin":26,"./ReactBrowserComponentMixin":29,"./ReactComponentBrowserEnvironment":33,"./ReactDOMButton":38,"./ReactDOMComponent":39,"./ReactDOMForm":40,"./ReactDOMImg":42,"./ReactDOMInput":43,"./ReactDOMOption":44,"./ReactDOMSelect":45,"./ReactDOMTextarea":47,"./ReactDefaultBatchingStrategy":48,"./ReactDefaultPerf":50,"./ReactEventListener":57,"./ReactInjection":58,"./ReactInstanceHandles":60,"./ReactMount":63,"./SVGDOMPropertyConfig":80,"./SelectEventPlugin":81,"./ServerReactRootIndex":82,"./SimpleEventPlugin":83,"./createFullPageComponent":103}],50:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactDefaultPerfAnalysis = _dereq_("./ReactDefaultPerfAnalysis");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var performanceNow = _dereq_("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  getMeasurementsSummaryMap: function(measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    return summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (moduleName === 'ReactDOMIDOperations' ||
        moduleName === 'ReactComponentBrowserEnvironment') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === 'mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        fnName === 'mountComponent' ||
        fnName === 'updateComponent' || // TODO: receiveComponent()?
        fnName === '_renderValidatedComponent')) {

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.constructor.displayName,
          owner: this._owner ? this._owner.constructor.displayName : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":11,"./ReactDefaultPerfAnalysis":51,"./ReactMount":63,"./ReactPerf":68,"./performanceNow":139}],51:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var assign = _dereq_("./Object.assign");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  'mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./Object.assign":27}],52:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

"use strict";

var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var warning = _dereq_("./warning");

var RESERVED_PROPS = {
  key: true,
  ref: true
};

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} object
 * @param {string} key
 */
function defineWarningProperty(object, key) {
  Object.defineProperty(object, key, {

    configurable: false,
    enumerable: true,

    get: function() {
      if (!this._store) {
        return null;
      }
      return this._store[key];
    },

    set: function(value) {
      ("production" !== "development" ? warning(
        false,
        'Don\'t set the ' + key + ' property of the component. ' +
        'Mutate the existing props object instead.'
      ) : null);
      this._store[key] = value;
    }

  });
}

/**
 * This is updated to true if the membrane is successfully created.
 */
var useMutationMembrane = false;

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} element
 */
function defineMutationMembrane(prototype) {
  try {
    var pseudoFrozenProperties = {
      props: true
    };
    for (var key in pseudoFrozenProperties) {
      defineWarningProperty(prototype, key);
    }
    useMutationMembrane = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {string|object} ref
 * @param {*} key
 * @param {*} props
 * @internal
 */
var ReactElement = function(type, key, ref, owner, context, props) {
  // Built-in properties that belong on the element
  this.type = type;
  this.key = key;
  this.ref = ref;

  // Record the component responsible for creating this element.
  this._owner = owner;

  // TODO: Deprecate withContext, and then the context becomes accessible
  // through the owner.
  this._context = context;

  if ("production" !== "development") {
    // The validation flag and props are currently mutative. We put them on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    this._store = { validated: false, props: props };

    // We're not allowed to set props directly on the object so we early
    // return and rely on the prototype membrane to forward to the backing
    // store.
    if (useMutationMembrane) {
      Object.freeze(this);
      return;
    }
  }

  this.props = props;
};

// We intentionally don't expose the function on the constructor property.
// ReactElement should be indistinguishable from a plain object.
ReactElement.prototype = {
  _isReactElement: true
};

if ("production" !== "development") {
  defineMutationMembrane(ReactElement.prototype);
}

ReactElement.createElement = function(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        config.key !== null,
        'createElement(...): Encountered component with a `key` of null. In ' +
        'a future version, this will be treated as equivalent to the string ' +
        '\'null\'; instead, provide an explicit key or use undefined.'
      ) : null);
    }
    // TODO: Change this back to `config.key === undefined`
    key = config.key == null ? null : '' + config.key;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return new ReactElement(
    type,
    key,
    ref,
    ReactCurrentOwner.current,
    ReactContext.current,
    props
  );
};

ReactElement.createFactory = function(type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
  var newElement = new ReactElement(
    oldElement.type,
    oldElement.key,
    oldElement.ref,
    oldElement._owner,
    oldElement._context,
    newProps
  );

  if ("production" !== "development") {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }
  return newElement;
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function(object) {
  // ReactTestUtils is often used outside of beforeEach where as React is
  // within it. This leads to two different instances of React on the same
  // page. To identify a element from a different React instance we use
  // a flag instead of an instanceof check.
  var isElement = !!(object && object._isReactElement);
  // if (isElement && !(object instanceof ReactElement)) {
  // This is an indicator that you're using multiple versions of React at the
  // same time. This will screw with ownership and stuff. Fix it, please.
  // TODO: We could possibly warn here.
  // }
  return isElement;
};

module.exports = ReactElement;

},{"./ReactContext":35,"./ReactCurrentOwner":36,"./warning":145}],53:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {
  'react_key_warning': {},
  'react_numeric_key_warning': {}
};
var ownerHasMonitoredObjectMap = {};

var loggedTypeFailures = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Gets the current owner's displayName for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getCurrentOwnerDisplayName() {
  var current = ReactCurrentOwner.current;
  return current && current.constructor.displayName || undefined;
}

/**
 * Warn if the component doesn't have an explicit key assigned to it.
 * This component is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validateExplicitKey(component, parentType) {
  if (component._store.validated || component.key != null) {
    return;
  }
  component._store.validated = true;

  warnAndMonitorForKeyUse(
    'react_key_warning',
    'Each child in an array should have a unique "key" prop.',
    component,
    parentType
  );
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validatePropertyKey(name, component, parentType) {
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
    return;
  }
  warnAndMonitorForKeyUse(
    'react_numeric_key_warning',
    'Child objects should have non-numeric keys so ordering is preserved.',
    component,
    parentType
  );
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} warningID The id used when logging.
 * @param {string} message The base warning that gets output.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function warnAndMonitorForKeyUse(warningID, message, component, parentType) {
  var ownerName = getCurrentOwnerDisplayName();
  var parentName = parentType.displayName;

  var useName = ownerName || parentName;
  var memoizer = ownerHasKeyUseWarning[warningID];
  if (memoizer.hasOwnProperty(useName)) {
    return;
  }
  memoizer[useName] = true;

  message += ownerName ?
    (" Check the render method of " + ownerName + ".") :
    (" Check the renderComponent call using <" + parentName + ">.");

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerName = null;
  if (component._owner && component._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    childOwnerName = component._owner.constructor.displayName;

    message += (" It was passed a child from " + childOwnerName + ".");
  }

  message += ' See http://fb.me/react-warning-keys for more information.';
  monitorCodeUse(warningID, {
    component: useName,
    componentOwner: childOwnerName
  });
  console.warn(message);
}

/**
 * Log that we're using an object map. We're considering deprecating this
 * feature and replace it with proper Map and ImmutableMap data structures.
 *
 * @internal
 */
function monitorUseOfObjectMap() {
  var currentName = getCurrentOwnerDisplayName() || '';
  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {
    return;
  }
  ownerHasMonitoredObjectMap[currentName] = true;
  monitorCodeUse('react_object_map_children');
}

/**
 * Ensure that every component either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {*} component Statically passed child of any type.
 * @param {*} parentType component's parent's type.
 * @return {boolean}
 */
function validateChildKeys(component, parentType) {
  if (Array.isArray(component)) {
    for (var i = 0; i < component.length; i++) {
      var child = component[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(component)) {
    // This component was passed in a valid location.
    component._store.validated = true;
  } else if (component && typeof component === 'object') {
    monitorUseOfObjectMap();
    for (var name in component) {
      validatePropertyKey(name, component[name], parentType);
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;
        // This will soon use the warning module
        monitorCodeUse(
          'react_failed_descriptor_type_check',
          { message: error.message }
        );
      }
    }
  }
}

var ReactElementValidator = {

  createElement: function(type, props, children) {
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    ("production" !== "development" ? warning(
      type != null,
      'React.createElement: type should not be null or undefined. It should ' +
        'be a string (for DOM elements) or a ReactClass (for composite ' +
        'components).'
    ) : null);

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }

    if (type) {
      var name = type.displayName;
      if (type.propTypes) {
        checkPropTypes(
          name,
          type.propTypes,
          element.props,
          ReactPropTypeLocations.prop
        );
      }
      if (type.contextTypes) {
        checkPropTypes(
          name,
          type.contextTypes,
          element._context,
          ReactPropTypeLocations.context
        );
      }
    }
    return element;
  },

  createFactory: function(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(
      null,
      type
    );
    validatedFactory.type = type;
    return validatedFactory;
  }

};

module.exports = ReactElementValidator;

},{"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactPropTypeLocations":71,"./monitorCodeUse":136,"./warning":145}],54:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

var component;
// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIdsRegistry = {};

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function(emptyComponent) {
    component = ReactElement.createFactory(emptyComponent);
  }
};

/**
 * @return {ReactComponent} component The injected empty component.
 */
function getEmptyComponent() {
  ("production" !== "development" ? invariant(
    component,
    'Trying to return null from a render, but no null placeholder component ' +
    'was injected.'
  ) : invariant(component));
  return component();
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIdsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIdsRegistry[id];
}

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return nullComponentIdsRegistry[id];
}

var ReactEmptyComponent = {
  deregisterNullComponentID: deregisterNullComponentID,
  getEmptyComponent: getEmptyComponent,
  injection: ReactEmptyComponentInjection,
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID
};

module.exports = ReactEmptyComponent;

},{"./ReactElement":52,"./invariant":126}],55:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],56:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

"use strict";

var EventPluginHub = _dereq_("./EventPluginHub");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":18}],57:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

"use strict";

var EventListener = _dereq_("./EventListener");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var PooledClass = _dereq_("./PooledClass");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var getEventTarget = _dereq_("./getEventTarget");
var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(
  TopLevelCallbackBookKeeping,
  PooledClass.twoArgumentPooler
);

function handleTopLevelImpl(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(bookKeeping.nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(
      bookKeeping.topLevelType,
      topLevelTarget,
      topLevelTargetID,
      bookKeeping.nativeEvent
    );
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function() {
    return ReactEventListener._enabled;
  },


  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.listen(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.capture(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  monitorScrollValue: function(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
    EventListener.listen(window, 'resize', callback);
  },

  dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
      topLevelType,
      nativeEvent
    );
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

},{"./EventListener":17,"./ExecutionEnvironment":22,"./Object.assign":27,"./PooledClass":28,"./ReactInstanceHandles":60,"./ReactMount":63,"./ReactUpdates":79,"./getEventTarget":117,"./getUnboundedScrollPosition":122}],58:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var EventPluginHub = _dereq_("./EventPluginHub");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactPerf = _dereq_("./ReactPerf");
var ReactRootIndex = _dereq_("./ReactRootIndex");
var ReactUpdates = _dereq_("./ReactUpdates");

var ReactInjection = {
  Component: ReactComponent.injection,
  CompositeComponent: ReactCompositeComponent.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":11,"./EventPluginHub":18,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactEmptyComponent":54,"./ReactNativeComponent":66,"./ReactPerf":68,"./ReactRootIndex":75,"./ReactUpdates":79}],59:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

"use strict";

var ReactDOMSelection = _dereq_("./ReactDOMSelection");

var containsNode = _dereq_("./containsNode");
var focusNode = _dereq_("./focusNode");
var getActiveElement = _dereq_("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      (elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' ||
      elem.contentEditable === 'true'
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":46,"./containsNode":101,"./focusNode":111,"./getActiveElement":113}],60:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

"use strict";

var ReactRootIndex = _dereq_("./ReactRootIndex");

var invariant = _dereq_("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== "development" ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== "development" ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  for (var i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== "development" ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== "development" ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== "development" ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== "development" ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

},{"./ReactRootIndex":75,"./invariant":126}],61:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLegacyElement
 */

"use strict";

var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var invariant = _dereq_("./invariant");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

var legacyFactoryLogs = {};
function warnForLegacyFactoryCall() {
  if (!ReactLegacyElementFactory._isLegacyCallWarningEnabled) {
    return;
  }
  var owner = ReactCurrentOwner.current;
  var name = owner && owner.constructor ? owner.constructor.displayName : '';
  if (!name) {
    name = 'Something';
  }
  if (legacyFactoryLogs.hasOwnProperty(name)) {
    return;
  }
  legacyFactoryLogs[name] = true;
  ("production" !== "development" ? warning(
    false,
    name + ' is calling a React component directly. ' +
    'Use a factory or JSX instead. See: http://fb.me/react-legacyfactory'
  ) : null);
  monitorCodeUse('react_legacy_factory_call', { version: 3, name: name });
}

function warnForPlainFunctionType(type) {
  var isReactClass =
    type.prototype &&
    typeof type.prototype.mountComponent === 'function' &&
    typeof type.prototype.receiveComponent === 'function';
  if (isReactClass) {
    ("production" !== "development" ? warning(
      false,
      'Did not expect to get a React class here. Use `Component` instead ' +
      'of `Component.type` or `this.constructor`.'
    ) : null);
  } else {
    if (!type._reactWarnedForThisType) {
      try {
        type._reactWarnedForThisType = true;
      } catch (x) {
        // just incase this is a frozen object or some special object
      }
      monitorCodeUse(
        'react_non_component_in_jsx',
        { version: 3, name: type.name }
      );
    }
    ("production" !== "development" ? warning(
      false,
      'This JSX uses a plain function. Only React components are ' +
      'valid in React\'s JSX transform.'
    ) : null);
  }
}

function warnForNonLegacyFactory(type) {
  ("production" !== "development" ? warning(
    false,
    'Do not pass React.DOM.' + type.type + ' to JSX or createFactory. ' +
    'Use the string "' + type.type + '" instead.'
  ) : null);
}

/**
 * Transfer static properties from the source to the target. Functions are
 * rebound to have this reflect the original source.
 */
function proxyStaticMethods(target, source) {
  if (typeof source !== 'function') {
    return;
  }
  for (var key in source) {
    if (source.hasOwnProperty(key)) {
      var value = source[key];
      if (typeof value === 'function') {
        var bound = value.bind(source);
        // Copy any properties defined on the function, such as `isRequired` on
        // a PropTypes validator.
        for (var k in value) {
          if (value.hasOwnProperty(k)) {
            bound[k] = value[k];
          }
        }
        target[key] = bound;
      } else {
        target[key] = value;
      }
    }
  }
}

// We use an object instead of a boolean because booleans are ignored by our
// mocking libraries when these factories gets mocked.
var LEGACY_MARKER = {};
var NON_LEGACY_MARKER = {};

var ReactLegacyElementFactory = {};

ReactLegacyElementFactory.wrapCreateFactory = function(createFactory) {
  var legacyCreateFactory = function(type) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createFactory(type);
    }

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      return createFactory(type.type);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      return createFactory(type.type);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // Unless it's a legacy factory, then this is probably a plain function,
    // that is expecting to be invoked by JSX. We can just return it as is.
    return type;
  };
  return legacyCreateFactory;
};

ReactLegacyElementFactory.wrapCreateElement = function(createElement) {
  var legacyCreateElement = function(type, props, children) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createElement.apply(this, arguments);
    }

    var args;

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      if (type._isMockFunction) {
        // If this is a mock function, people will expect it to be called. We
        // will actually call the original mock factory function instead. This
        // future proofs unit testing that assume that these are classes.
        type.type._mockedReactClassConstructor = type;
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // This is being called with a plain function we should invoke it
    // immediately as if this was used with legacy JSX.
    return type.apply(null, Array.prototype.slice.call(arguments, 1));
  };
  return legacyCreateElement;
};

ReactLegacyElementFactory.wrapFactory = function(factory) {
  ("production" !== "development" ? invariant(
    typeof factory === 'function',
    'This is suppose to accept a element factory'
  ) : invariant(typeof factory === 'function'));
  var legacyElementFactory = function(config, children) {
    // This factory should not be called when JSX is used. Use JSX instead.
    if ("production" !== "development") {
      warnForLegacyFactoryCall();
    }
    return factory.apply(this, arguments);
  };
  proxyStaticMethods(legacyElementFactory, factory.type);
  legacyElementFactory.isReactLegacyFactory = LEGACY_MARKER;
  legacyElementFactory.type = factory.type;
  return legacyElementFactory;
};

// This is used to mark a factory that will remain. E.g. we're allowed to call
// it as a function. However, you're not suppose to pass it to createElement
// or createFactory, so it will warn you if you do.
ReactLegacyElementFactory.markNonLegacyFactory = function(factory) {
  factory.isReactNonLegacyFactory = NON_LEGACY_MARKER;
  return factory;
};

// Checks if a factory function is actually a legacy factory pretending to
// be a class.
ReactLegacyElementFactory.isValidFactory = function(factory) {
  // TODO: This will be removed and moved into a class validator or something.
  return typeof factory === 'function' &&
    factory.isReactLegacyFactory === LEGACY_MARKER;
};

ReactLegacyElementFactory.isValidClass = function(factory) {
  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      false,
      'isValidClass is deprecated and will be removed in a future release. ' +
      'Use a more specific validator instead.'
    ) : null);
  }
  return ReactLegacyElementFactory.isValidFactory(factory);
};

ReactLegacyElementFactory._isLegacyCallWarningEnabled = true;

module.exports = ReactLegacyElementFactory;

},{"./ReactCurrentOwner":36,"./invariant":126,"./monitorCodeUse":136,"./warning":145}],62:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

"use strict";

var adler32 = _dereq_("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":98}],63:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactPerf = _dereq_("./ReactPerf");

var containsNode = _dereq_("./containsNode");
var deprecated = _dereq_("./deprecated");
var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var createElement = ReactLegacyElement.wrapCreateElement(
  ReactElement.createElement
);

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== "development") {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== "development" ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== "development" ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounting is the process of initializing a React component by creatings its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextComponent,
      container,
      callback) {
    var nextProps = nextComponent.props;
    ReactMount.scrollMonitor(container, function() {
      prevComponent.replaceProps(nextProps, callback);
    });

    if ("production" !== "development") {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== "development" ? invariant(
      container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
        container.nodeType === DOC_NODE_TYPE
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      container.nodeType === ELEMENT_NODE_TYPE ||
      container.nodeType === DOC_NODE_TYPE
    )));

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: ReactPerf.measure(
    'ReactMount',
    '_renderNewRootComponent',
    function(
        nextComponent,
        container,
        shouldReuseMarkup) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case.
      ("production" !== "development" ? warning(
        ReactCurrentOwner.current == null,
        '_renderNewRootComponent(): Render methods should be a pure function ' +
        'of props and state; triggering nested component updates from ' +
        'render is not allowed. If necessary, trigger nested updates in ' +
        'componentDidUpdate.'
      ) : null);

      var componentInstance = instantiateReactComponent(nextComponent, null);
      var reactRootID = ReactMount._registerComponent(
        componentInstance,
        container
      );
      componentInstance.mountComponentIntoNode(
        reactRootID,
        container,
        shouldReuseMarkup
      );

      if ("production" !== "development") {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[reactRootID] =
          getReactRootElementInContainer(container);
      }

      return componentInstance;
    }
  ),

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function(nextElement, container, callback) {
    ("production" !== "development" ? invariant(
      ReactElement.isValidElement(nextElement),
      'renderComponent(): Invalid component element.%s',
      (
        typeof nextElement === 'string' ?
          ' Instead of passing an element string, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        ReactLegacyElement.isValidFactory(nextElement) ?
          ' Instead of passing a component class, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        // Check if it quacks like a element
        typeof nextElement.props !== "undefined" ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactElement.isValidElement(nextElement)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevElement = prevComponent._currentElement;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextElement,
          container,
          callback
        );
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextElement,
      container,
      shouldReuseMarkup
    );
    callback && callback.call(component);
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    var element = createElement(constructor, props);
    return ReactMount.render(element, container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== "development" ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    ("production" !== "development" ? warning(
      ReactCurrentOwner.current == null,
      'unmountComponentAtNode(): Render methods should be a pure function of ' +
      'props and state; triggering nested component updates from render is ' +
      'not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== "development") {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    instance.unmountComponent();

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== "development") {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== "development" ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          console.warn(
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          );
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== "development" ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
      'parent. ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },


  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  purgeID: purgeID
};

// Deprecations (remove for 0.13)
ReactMount.renderComponent = deprecated(
  'ReactMount',
  'renderComponent',
  'render',
  this,
  ReactMount.render
);

module.exports = ReactMount;

},{"./DOMProperty":11,"./ReactBrowserEventEmitter":30,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactPerf":68,"./containsNode":101,"./deprecated":106,"./getReactRootElementInContainer":120,"./instantiateReactComponent":125,"./invariant":126,"./shouldUpdateReactComponent":142,"./warning":145}],64:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var flattenChildren = _dereq_("./flattenChildren");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction) {
      var children = flattenChildren(nestedChildren);
      var mountImages = [];
      var index = 0;
      this._renderedChildren = children;
      for (var name in children) {
        var child = children[name];
        if (children.hasOwnProperty(name)) {
          // The rendered children must be turned into instances as they're
          // mounted.
          var childInstance = instantiateReactComponent(child, null);
          children[name] = childInstance;
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = childInstance.mountComponent(
            rootID,
            transaction,
            this._mountDepth + 1
          );
          childInstance._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction) {
      var nextChildren = flattenChildren(nextNestedChildren);
      var prevChildren = this._renderedChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var prevElement = prevChild && prevChild._currentElement;
        var nextElement = nextChildren[name];
        if (shouldUpdateReactComponent(prevElement, nextElement)) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild.receiveComponent(nextElement, transaction);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          var nextChildInstance = instantiateReactComponent(
            nextElement,
            null
          );
          this._mountChildByNameAtIndex(
            nextChildInstance, name, nextIndex, transaction
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren[name])) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      for (var name in renderedChildren) {
        var renderedChild = renderedChildren[name];
        // TODO: When is this not true?
        if (renderedChild.unmountComponent) {
          renderedChild.unmountComponent();
        }
      }
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(child, name, index, transaction) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = child.mountComponent(
        rootID,
        transaction,
        this._mountDepth + 1
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
      this._renderedChildren = this._renderedChildren || {};
      this._renderedChildren[name] = child;
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      this.removeChild(child);
      child._mountIndex = null;
      child.unmountComponent();
      delete this._renderedChildren[name];
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactComponent":32,"./ReactMultiChildUpdateTypes":65,"./flattenChildren":110,"./instantiateReactComponent":125,"./shouldUpdateReactComponent":142}],65:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":132}],66:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

"use strict";

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags
var tagToComponentClass = {};

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function(componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Create an internal class for a specific tag.
 *
 * @param {string} tag The tag for which to create an internal instance.
 * @param {any} props The props passed to the instance constructor.
 * @return {ReactComponent} component The injected empty component.
 */
function createInstanceForTag(tag, props, parentType) {
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  if (parentType === tag) {
    // Avoid recursion
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  // Unwrap legacy factories
  return new componentClass.type(props);
}

var ReactNativeComponent = {
  createInstanceForTag: createInstanceForTag,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;

},{"./Object.assign":27,"./invariant":126}],67:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

"use strict";

var emptyObject = _dereq_("./emptyObject");
var invariant = _dereq_("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      object &&
      typeof object.attachRef === 'function' &&
      typeof object.detachRef === 'function'
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.refs[ref] === component) {
      owner.detachRef(ref);
    }
  },

  /**
   * A ReactComponent must mix this in to have refs.
   *
   * @lends {ReactOwner.prototype}
   */
  Mixin: {

    construct: function() {
      this.refs = emptyObject;
    },

    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function(ref, component) {
      ("production" !== "development" ? invariant(
        component.isOwnedBy(this),
        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',
        ref
      ) : invariant(component.isOwnedBy(this)));
      var refs = this.refs === emptyObject ? (this.refs = {}) : this.refs;
      refs[ref] = component;
    },

    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function(ref) {
      delete this.refs[ref];
    }

  }

};

module.exports = ReactOwner;

},{"./emptyObject":108,"./invariant":126}],68:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

"use strict";

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== "development") {
      var measuredFunc = null;
      var wrapper = function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

},{}],69:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTransferer
 */

"use strict";

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var invariant = _dereq_("./invariant");
var joinClasses = _dereq_("./joinClasses");
var warning = _dereq_("./warning");

var didWarn = false;

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

var transferStrategyMerge = createTransferStrategy(function(a, b) {
  // `merge` overrides the first object's (`props[key]` above) keys using the
  // second object's (`value`) keys. An object's style's existing `propA` would
  // get overridden. Flip the order here.
  return assign({}, b, a);
});

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: transferStrategyMerge
};

/**
 * Mutates the first argument by transferring the properties from the second
 * argument.
 *
 * @param {object} props
 * @param {object} newProps
 * @return {object}
 */
function transferInto(props, newProps) {
  for (var thisKey in newProps) {
    if (!newProps.hasOwnProperty(thisKey)) {
      continue;
    }

    var transferStrategy = TransferStrategies[thisKey];

    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
      transferStrategy(props, thisKey, newProps[thisKey]);
    } else if (!props.hasOwnProperty(thisKey)) {
      props[thisKey] = newProps[thisKey];
    }
  }
  return props;
}

/**
 * ReactPropTransferer are capable of transferring props to another component
 * using a `transferPropsTo` method.
 *
 * @class ReactPropTransferer
 */
var ReactPropTransferer = {

  TransferStrategies: TransferStrategies,

  /**
   * Merge two props objects using TransferStrategies.
   *
   * @param {object} oldProps original props (they take precedence)
   * @param {object} newProps new props to merge in
   * @return {object} a new object containing both sets of props merged.
   */
  mergeProps: function(oldProps, newProps) {
    return transferInto(assign({}, oldProps), newProps);
  },

  /**
   * @lends {ReactPropTransferer.prototype}
   */
  Mixin: {

    /**
     * Transfer props from this component to a target component.
     *
     * Props that do not have an explicit transfer strategy will be transferred
     * only if the target component does not already have the prop set.
     *
     * This is usually used to pass down props to a returned root component.
     *
     * @param {ReactElement} element Component receiving the properties.
     * @return {ReactElement} The supplied `component`.
     * @final
     * @protected
     */
    transferPropsTo: function(element) {
      ("production" !== "development" ? invariant(
        element._owner === this,
        '%s: You can\'t call transferPropsTo() on a component that you ' +
        'don\'t own, %s. This usually means you are calling ' +
        'transferPropsTo() on a component passed in as props or children.',
        this.constructor.displayName,
        typeof element.type === 'string' ?
        element.type :
        element.type.displayName
      ) : invariant(element._owner === this));

      if ("production" !== "development") {
        if (!didWarn) {
          didWarn = true;
          ("production" !== "development" ? warning(
            false,
            'transferPropsTo is deprecated. ' +
            'See http://fb.me/react-transferpropsto for more information.'
          ) : null);
        }
      }

      // Because elements are immutable we have to merge into the existing
      // props object rather than clone it.
      transferInto(element.props, this.props);

      return element;
    }

  }
};

module.exports = ReactPropTransferer;

},{"./Object.assign":27,"./emptyFunction":107,"./invariant":126,"./joinClasses":131,"./warning":145}],70:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

"use strict";

var ReactPropTypeLocationNames = {};

if ("production" !== "development") {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

},{}],71:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":132}],72:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");

var deprecated = _dereq_("./deprecated");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var elementTypeChecker = createElementTypeChecker();
var nodeTypeChecker = createNodeChecker();

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: elementTypeChecker,
  instanceOf: createInstanceTypeChecker,
  node: nodeTypeChecker,
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker,

  component: deprecated(
    'React.PropTypes',
    'component',
    'element',
    this,
    elementTypeChecker
  ),
  renderable: deprecated(
    'React.PropTypes',
    'renderable',
    'node',
    this,
    nodeTypeChecker
  )
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
          ("Required " + locationName + " `" + propName + "` was not specified in ")+
          ("`" + componentName + "`.")
        );
      }
    } else {
      return validate(props, propName, componentName, location);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns());
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
      );
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location);
      if (error instanceof Error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactElement.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
    );
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
      );
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  function validate(props, propName, componentName, location) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location) == null) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
      ("`" + componentName + "`.")
    );
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactNode.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
        ("supplied to `" + componentName + "`, expected `object`.")
      );
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location);
      if (error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate, 'expected `object`');
}

function isNode(propValue) {
  switch(typeof propValue) {
    case 'number':
    case 'string':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (ReactElement.isValidElement(propValue)) {
        return true;
      }
      for (var k in propValue) {
        if (!isNode(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"./ReactElement":52,"./ReactPropTypeLocationNames":70,"./deprecated":106,"./emptyFunction":107}],73:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPutListenerQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var assign = _dereq_("./Object.assign");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

assign(ReactPutListenerQueue.prototype, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30}],74:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30,"./ReactInputSelection":59,"./ReactPutListenerQueue":73,"./Transaction":95}],75:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

"use strict";

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],76:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactServerRenderingTransaction =
  _dereq_("./ReactServerRenderingTransaction");

var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToString(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, 0);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToStaticMarkup(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, 0);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactMarkupChecksum":62,"./ReactServerRenderingTransaction":77,"./instantiateReactComponent":125,"./invariant":126}],77:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var CallbackQueue = _dereq_("./CallbackQueue");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  ON_DOM_READY_QUEUEING
];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap proceedures.
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(
  ReactServerRenderingTransaction.prototype,
  Transaction.Mixin,
  Mixin
);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactPutListenerQueue":73,"./Transaction":95,"./emptyFunction":107}],78:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTextComponent
 * @typechecks static-only
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactComponent = _dereq_("./ReactComponent");
var ReactElement = _dereq_("./ReactElement");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactTextComponent = function(props) {
  // This constructor and it's argument is currently used by mocks.
};

assign(ReactTextComponent.prototype, ReactComponent.Mixin, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, mountDepth) {
    ReactComponent.Mixin.mountComponent.call(
      this,
      rootID,
      transaction,
      mountDepth
    );

    var escapedText = escapeTextForBrowser(this.props);

    if (transaction.renderToStaticMarkup) {
      // Normally we'd wrap this in a `span` for the reasons stated above, but
      // since this is a situation where React won't take over (static pages),
      // we can simply return the text as it is.
      return escapedText;
    }

    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {object} nextComponent Contains the next text content.
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextComponent, transaction) {
    var nextProps = nextComponent.props;
    if (nextProps !== this.props) {
      this.props = nextProps;
      ReactComponent.BackendIDOperations.updateTextContentByID(
        this._rootNodeID,
        nextProps
      );
    }
  }

});

var ReactTextComponentFactory = function(text) {
  // Bypass validation and configuration
  return new ReactElement(ReactTextComponent, null, null, null, null, text);
};

ReactTextComponentFactory.type = ReactTextComponent;

module.exports = ReactTextComponentFactory;

},{"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactComponent":32,"./ReactElement":52,"./escapeTextForBrowser":109}],79:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactPerf = _dereq_("./ReactPerf");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var warning = _dereq_("./warning");

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  ("production" !== "development" ? invariant(
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
    'ReactUpdates: must inject a reconcile transaction class and batching ' +
    'strategy'
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
}

var NESTED_UPDATES = {
  initialize: function() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function() {
    this.callbackQueue.reset();
  },
  close: function() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction =
    ReactUpdates.ReactReconcileTransaction.getPooled();
}

assign(
  ReactUpdatesFlushTransaction.prototype,
  Transaction.Mixin, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
      this,
      this.reconcileTransaction.perform,
      this.reconcileTransaction,
      method,
      scope,
      a
    );
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b);
}

/**
 * Array comparator for ReactComponents by owner depth
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountDepthComparator(c1, c2) {
  return c1._mountDepth - c2._mountDepth;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== "development" ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountDepthComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, ignore them
    // TODO: Queue unmounts in the same list to avoid this happening at all
    var component = dirtyComponents[i];
    if (component.isMounted()) {
      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;
      component.performUpdateIfNecessary(transaction.reconcileTransaction);

      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          transaction.callbackQueue.enqueue(
            callbacks[j],
            component
          );
        }
      }
    }
  }
}

var flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  function() {
    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
    // array and perform any updates enqueued by mount-ready handlers (i.e.,
    // componentDidUpdate) but we need to check here too in order to catch
    // updates enqueued by setState callbacks and asap calls.
    while (dirtyComponents.length || asapEnqueued) {
      if (dirtyComponents.length) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction);
        ReactUpdatesFlushTransaction.release(transaction);
      }

      if (asapEnqueued) {
        asapEnqueued = false;
        var queue = asapCallbackQueue;
        asapCallbackQueue = CallbackQueue.getPooled();
        queue.notifyAll();
        CallbackQueue.release(queue);
      }
    }
  }
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component, callback) {
  ("production" !== "development" ? invariant(
    !callback || typeof callback === "function",
    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +
    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
    'isn\'t callable.'
  ) : invariant(!callback || typeof callback === "function"));
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)
  ("production" !== "development" ? warning(
    ReactCurrentOwner.current == null,
    'enqueueUpdate(): Render methods should be a pure function of props ' +
    'and state; triggering nested component updates from render is not ' +
    'allowed. If necessary, trigger nested updates in ' +
    'componentDidUpdate.'
  ) : null);

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component, callback);
    return;
  }

  dirtyComponents.push(component);

  if (callback) {
    if (component._pendingCallbacks) {
      component._pendingCallbacks.push(callback);
    } else {
      component._pendingCallbacks = [callback];
    }
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  ("production" !== "development" ? invariant(
    batchingStrategy.isBatchingUpdates,
    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
    'updates are not being batched.'
  ) : invariant(batchingStrategy.isBatchingUpdates));
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function(ReconcileTransaction) {
    ("production" !== "development" ? invariant(
      ReconcileTransaction,
      'ReactUpdates: must provide a reconcile transaction class'
    ) : invariant(ReconcileTransaction));
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== "development" ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactCurrentOwner":36,"./ReactPerf":68,"./Transaction":95,"./invariant":126,"./warning":145}],80:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var SVGDOMPropertyConfig = {
  Properties: {
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox'
  }
};

module.exports = SVGDOMPropertyConfig;

},{"./DOMProperty":11}],81:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var getActiveElement = _dereq_("./getActiveElement");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");
var shallowEqual = _dereq_("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement != getActiveElement()) {
    return;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactInputSelection":59,"./SyntheticEvent":87,"./getActiveElement":113,"./isTextInputElement":129,"./keyOf":133,"./shallowEqual":141}],82:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

"use strict";

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],83:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticClipboardEvent = _dereq_("./SyntheticClipboardEvent");
var SyntheticEvent = _dereq_("./SyntheticEvent");
var SyntheticFocusEvent = _dereq_("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = _dereq_("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");
var SyntheticDragEvent = _dereq_("./SyntheticDragEvent");
var SyntheticTouchEvent = _dereq_("./SyntheticTouchEvent");
var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var SyntheticWheelEvent = _dereq_("./SyntheticWheelEvent");

var getEventCharCode = _dereq_("./getEventCharCode");

var invariant = _dereq_("./invariant");
var keyOf = _dereq_("./keyOf");
var warning = _dereq_("./warning");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var topLevelType in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false. This behavior will be disabled in a future release.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

    ("production" !== "development" ? warning(
      typeof returnValue !== 'boolean',
      'Returning `false` from an event handler is deprecated and will be ' +
      'ignored in a future release. Instead, manually call ' +
      'e.stopPropagation() or e.preventDefault(), as appropriate.'
    ) : null);

    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== "development" ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

},{"./EventConstants":16,"./EventPluginUtils":20,"./EventPropagators":21,"./SyntheticClipboardEvent":84,"./SyntheticDragEvent":86,"./SyntheticEvent":87,"./SyntheticFocusEvent":88,"./SyntheticKeyboardEvent":90,"./SyntheticMouseEvent":91,"./SyntheticTouchEvent":92,"./SyntheticUIEvent":93,"./SyntheticWheelEvent":94,"./getEventCharCode":114,"./invariant":126,"./keyOf":133,"./warning":145}],84:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;


},{"./SyntheticEvent":87}],85:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;


},{"./SyntheticEvent":87}],86:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":91}],87:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    event.preventDefault ? event.preventDefault() : event.returnValue = false;
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./Object.assign":27,"./PooledClass":28,"./emptyFunction":107,"./getEventTarget":117}],88:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":93}],89:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticInputEvent,
  InputEventInterface
);

module.exports = SyntheticInputEvent;


},{"./SyntheticEvent":87}],90:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventCharCode = _dereq_("./getEventCharCode");
var getEventKey = _dereq_("./getEventKey");
var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":93,"./getEventCharCode":114,"./getEventKey":115,"./getEventModifierState":116}],91:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      event.fromElement === event.srcElement ?
        event.toElement :
        event.fromElement
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":93,"./ViewportMetrics":96,"./getEventModifierState":116}],92:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":93,"./getEventModifierState":116}],93:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":87,"./getEventTarget":117}],94:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":91}],95:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM upates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== "development" ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== "development" ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR) {
          wrapper.close && wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

},{"./invariant":126}],96:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

"use strict";

var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function() {
    var scrollPosition = getUnboundedScrollPosition(window);
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{"./getUnboundedScrollPosition":122}],97:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  ("production" !== "development" ? invariant(
    next != null,
    'accumulateInto(...): Accumulated items must not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

},{"./invariant":126}],98:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

"use strict";

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonably good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],99:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function(_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

},{}],100:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

"use strict";

var camelize = _dereq_("./camelize");

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

},{"./camelize":99}],101:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = _dereq_("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":130}],102:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFrom
 * @typechecks
 */

var toArray = _dereq_("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFrom = require('createArrayFrom');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFrom(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFrom(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFrom;

},{"./toArray":143}],103:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

"use strict";

// Defeat circular references by requiring this directly.
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {string} tag The tag to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(tag) {
  var elementFactory = ReactElement.createFactory(tag);

  var FullPageComponent = ReactCompositeComponent.createClass({
    displayName: 'ReactFullPageComponent' + tag,

    componentWillUnmount: function() {
      ("production" !== "development" ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return elementFactory(this.props);
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

},{"./ReactCompositeComponent":34,"./ReactElement":52,"./invariant":126}],104:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createArrayFrom = _dereq_("./createArrayFrom");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== "development" ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== "development" ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFrom(scripts).forEach(handleScript);
  }

  var nodes = createArrayFrom(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

},{"./ExecutionEnvironment":22,"./createArrayFrom":102,"./getMarkupWrap":118,"./invariant":126}],105:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":4}],106:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

var assign = _dereq_("./Object.assign");
var warning = _dereq_("./warning");

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} namespace The namespace of the call, eg 'React'
 * @param {string} oldName The old function name, eg 'renderComponent'
 * @param {string} newName The new function name, eg 'render'
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {*} Will be the value as returned from `fn`
 */
function deprecated(namespace, oldName, newName, ctx, fn) {
  var warned = false;
  if ("production" !== "development") {
    var newFn = function() {
      ("production" !== "development" ? warning(
        warned,
        (namespace + "." + oldName + " will be deprecated in a future version. ") +
        ("Use " + namespace + "." + newName + " instead.")
      ) : null);
      warned = true;
      return fn.apply(ctx, arguments);
    };
    newFn.displayName = (namespace + "_" + oldName);
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;

},{"./Object.assign":27,"./warning":145}],107:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() { return this; };
emptyFunction.thatReturnsArgument = function(arg) { return arg; };

module.exports = emptyFunction;

},{}],108:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

"use strict";

var emptyObject = {};

if ("production" !== "development") {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

},{}],109:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextForBrowser
 * @typechecks static-only
 */

"use strict";

var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  "\"": "&quot;",
  "'": "&#x27;"
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextForBrowser;

},{}],110:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

"use strict";

var ReactTextComponent = _dereq_("./ReactTextComponent");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = !result.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'flattenChildren(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);
  if (keyUnique && child != null) {
    var type = typeof child;
    var normalizedValue;

    if (type === 'string') {
      normalizedValue = ReactTextComponent(child);
    } else if (type === 'number') {
      normalizedValue = ReactTextComponent('' + child);
    } else {
      normalizedValue = child;
    }

    result[name] = normalizedValue;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

},{"./ReactTextComponent":78,"./traverseAllChildren":144,"./warning":145}],111:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

"use strict";

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch(e) {
  }
}

module.exports = focusNode;

},{}],112:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

"use strict";

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],113:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],114:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

"use strict";

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

},{}],115:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

"use strict";

var getEventCharCode = _dereq_("./getEventCharCode");

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

},{"./getEventCharCode":114}],116:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

"use strict";

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  /*jshint validthis:true */
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

},{}],117:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

"use strict";

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],118:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var invariant = _dereq_("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'defs': true,
  'ellipse': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'defs': svgWrap,
  'ellipse': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== "development" ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

},{"./ExecutionEnvironment":22,"./invariant":126}],119:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

"use strict";

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType == 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],120:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getReactRootElementInContainer
 */

"use strict";

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],121:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":22}],122:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],123:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],124:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

"use strict";

var hyphenate = _dereq_("./hyphenate");

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{"./hyphenate":123}],125:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

"use strict";

var warning = _dereq_("./warning");

var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");

/**
 * Given an `element` create an instance that will actually be mounted.
 *
 * @param {object} element
 * @param {*} parentCompositeType The composite type that resolved this.
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(element, parentCompositeType) {
  var instance;

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      element && (typeof element.type === 'function' ||
                     typeof element.type === 'string'),
      'Only functions or strings can be mounted as React components.'
    ) : null);

    // Resolve mock instances
    if (element.type._mockedReactClassConstructor) {
      // If this is a mocked class, we treat the legacy factory as if it was the
      // class constructor for future proofing unit tests. Because this might
      // be mocked as a legacy factory, we ignore any warnings triggerd by
      // this temporary hack.
      ReactLegacyElement._isLegacyCallWarningEnabled = false;
      try {
        instance = new element.type._mockedReactClassConstructor(
          element.props
        );
      } finally {
        ReactLegacyElement._isLegacyCallWarningEnabled = true;
      }

      // If the mock implementation was a legacy factory, then it returns a
      // element. We need to turn this into a real component instance.
      if (ReactElement.isValidElement(instance)) {
        instance = new instance.type(instance.props);
      }

      var render = instance.render;
      if (!render) {
        // For auto-mocked factories, the prototype isn't shimmed and therefore
        // there is no render function on the instance. We replace the whole
        // component with an empty component instance instead.
        element = ReactEmptyComponent.getEmptyComponent();
      } else {
        if (render._isMockFunction && !render._getMockImplementation()) {
          // Auto-mocked components may have a prototype with a mocked render
          // function. For those, we'll need to mock the result of the render
          // since we consider undefined to be invalid results from render.
          render.mockImplementation(
            ReactEmptyComponent.getEmptyComponent
          );
        }
        instance.construct(element);
        return instance;
      }
    }
  }

  // Special case string values
  if (typeof element.type === 'string') {
    instance = ReactNativeComponent.createInstanceForTag(
      element.type,
      element.props,
      parentCompositeType
    );
  } else {
    // Normal case for non-mocks and non-strings
    instance = new element.type(element.props);
  }

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      typeof instance.construct === 'function' &&
      typeof instance.mountComponent === 'function' &&
      typeof instance.receiveComponent === 'function',
      'Only React Components can be mounted.'
    ) : null);
  }

  // This actually sets up the internal instance. This will become decoupled
  // from the public instance in a future diff.
  instance.construct(element);

  return instance;
}

module.exports = instantiateReactComponent;

},{"./ReactElement":52,"./ReactEmptyComponent":54,"./ReactLegacyElement":61,"./ReactNativeComponent":66,"./warning":145}],126:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if ("production" !== "development") {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

},{}],127:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":22}],128:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    typeof Node === 'function' ? object instanceof Node :
      typeof object === 'object' &&
      typeof object.nodeType === 'number' &&
      typeof object.nodeName === 'string'
  ));
}

module.exports = isNode;

},{}],129:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

"use strict";

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||
    elem.nodeName === 'TEXTAREA'
  );
}

module.exports = isTextInputElement;

},{}],130:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = _dereq_("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":128}],131:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule joinClasses
 * @typechecks static-only
 */

"use strict";

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      if (nextClass) {
        className = (className ? className + ' ' : '') + nextClass;
      }
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],132:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== "development" ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

},{"./invariant":126}],133:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],134:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;

},{}],135:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

"use strict";

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (cache.hasOwnProperty(string)) {
      return cache[string];
    } else {
      return cache[string] = callback.call(this, string);
    }
  };
}

module.exports = memoizeStringOnly;

},{}],136:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule monitorCodeUse
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Provides open-source compatible instrumentation for monitoring certain API
 * uses before we're ready to issue a warning or refactor. It accepts an event
 * name which may only contain the characters [a-z0-9_] and an optional data
 * object with further information.
 */

function monitorCodeUse(eventName, data) {
  ("production" !== "development" ? invariant(
    eventName && !/[^a-z0-9_]/.test(eventName),
    'You must provide an eventName using only the characters [a-z0-9_]'
  ) : invariant(eventName && !/[^a-z0-9_]/.test(eventName)));
}

module.exports = monitorCodeUse;

},{"./invariant":126}],137:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactElement.isValidElement(children)));
  return children;
}

module.exports = onlyChild;

},{"./ReactElement":52,"./invariant":126}],138:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance =
    window.performance ||
    window.msPerformance ||
    window.webkitPerformance;
}

module.exports = performance || {};

},{"./ExecutionEnvironment":22}],139:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

var performance = _dereq_("./performance");

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./performance":138}],140:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function(node, html) {
  node.innerHTML = html;
};

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) ||
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;

},{"./ExecutionEnvironment":22}],141:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 */

"use strict";

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B's keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],142:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

"use strict";

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  if (prevElement && nextElement &&
      prevElement.type === nextElement.type &&
      prevElement.key === nextElement.key &&
      prevElement._owner === nextElement._owner) {
    return true;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

},{}],143:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = _dereq_("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFrom.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== "development" ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== "development" ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== "development" ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

},{"./invariant":126}],144:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");

var invariant = _dereq_("./invariant");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that:
 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.
 * 2. it('should fail when supplied duplicate key', function() {
 * 3. That a single child and an array with one item have the same key pattern.
 * });
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
var traverseAllChildrenImpl =
  function(children, nameSoFar, indexSoFar, callback, traverseContext) {
    var nextName, nextIndex;
    var subtreeCount = 0;  // Count of children found in the current subtree.
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        nextName = (
          nameSoFar +
          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
          getComponentKey(child, i)
        );
        nextIndex = indexSoFar + subtreeCount;
        subtreeCount += traverseAllChildrenImpl(
          child,
          nextName,
          nextIndex,
          callback,
          traverseContext
        );
      }
    } else {
      var type = typeof children;
      var isOnlyChild = nameSoFar === '';
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows
      var storageName =
        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
      if (children == null || type === 'boolean') {
        // All of the above are perceived as null.
        callback(traverseContext, null, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'string' || type === 'number' ||
                 ReactElement.isValidElement(children)) {
        callback(traverseContext, children, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'object') {
        ("production" !== "development" ? invariant(
          !children || children.nodeType !== 1,
          'traverseAllChildren(...): Encountered an invalid child; DOM ' +
          'elements are not valid children of React components.'
        ) : invariant(!children || children.nodeType !== 1));
        for (var key in children) {
          if (children.hasOwnProperty(key)) {
            nextName = (
              nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
              wrapUserProvidedKey(key) + SUBSEPARATOR +
              getComponentKey(children[key], 0)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              children[key],
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        }
      }
    }
    return subtreeCount;
  };

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
}

module.exports = traverseAllChildren;

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./invariant":126}],145:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== "development") {
  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (!condition) {
      var argIndex = 0;
      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));
    }
  };
}

module.exports = warning;

},{"./emptyFunction":107}]},{},[1])(1)
});
var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-3123";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_target_STAR_ = "default";
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function cljs$core$_STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function cljs$core$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function cljs$core$pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function cljs$core$enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__5619__delegate = function(args) {
      return console.log.apply(console, function() {
        var G__5618 = args;
        return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(G__5618) : cljs.core.into_array.call(null, G__5618);
      }());
    };
    var G__5619 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__5620__i = 0, G__5620__a = new Array(arguments.length - 0);
        while (G__5620__i < G__5620__a.length) {
          G__5620__a[G__5620__i] = arguments[G__5620__i + 0];
          ++G__5620__i;
        }
        args = new cljs.core.IndexedSeq(G__5620__a, 0);
      }
      return G__5619__delegate.call(this, args);
    };
    G__5619.cljs$lang$maxFixedArity = 0;
    G__5619.cljs$lang$applyTo = function(arglist__5621) {
      var args = cljs.core.seq(arglist__5621);
      return G__5619__delegate(args);
    };
    G__5619.cljs$core$IFn$_invoke$arity$variadic = G__5619__delegate;
    return G__5619;
  }();
};
cljs.core.truth_ = function cljs$core$truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function cljs$core$identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function cljs$core$nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function cljs$core$array_QMARK_(x) {
  if (cljs.core._STAR_target_STAR_ === "nodejs") {
    return Array.isArray(x);
  } else {
    return x instanceof Array;
  }
};
cljs.core.number_QMARK_ = function cljs$core$number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function cljs$core$not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function cljs$core$some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function cljs$core$object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function cljs$core$string_QMARK_(x) {
  var G__5623 = x;
  return goog.isString(G__5623);
};
cljs.core.native_satisfies_QMARK_ = function cljs$core$native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[function() {
    var G__5625 = x__$1;
    return goog.typeOf(G__5625);
  }()]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function cljs$core$is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function cljs$core$type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function cljs$core$missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__4110__auto__ = ty;
    if (cljs.core.truth_(and__4110__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__4110__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : function() {
    var G__5627 = obj;
    return goog.typeOf(G__5627);
  }();
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function cljs$core$type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function cljs$core$load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.nodeGlobalRequire(file);
  }
};
if (typeof Symbol !== "undefined" && function() {
  var G__5629 = Symbol;
  return goog.typeOf(G__5629);
}() === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.make_array = function() {
  var cljs$core$make_array = null;
  var cljs$core$make_array__1 = function(size) {
    return new Array(size);
  };
  var cljs$core$make_array__2 = function(type, size) {
    return cljs$core$make_array.cljs$core$IFn$_invoke$arity$1(size);
  };
  cljs$core$make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return cljs$core$make_array__1.call(this, type);
      case 2:
        return cljs$core$make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$make_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$make_array__1;
  cljs$core$make_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$make_array__2;
  return cljs$core$make_array;
}();
cljs.core.aclone = function cljs$core$aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__5007__auto___5631 = len;
  var i_5632 = 0;
  while (true) {
    if (i_5632 < n__5007__auto___5631) {
      new_arr[i_5632] = arr[i_5632];
      var G__5633 = i_5632 + 1;
      i_5632 = G__5633;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function cljs$core$array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__5634 = i + 1;
      i = G__5634;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function() {
  var cljs$core$aget = null;
  var cljs$core$aget__2 = function(array, i) {
    return array[i];
  };
  var cljs$core$aget__3 = function() {
    var G__5643__delegate = function(array, i, idxs) {
      var G__5640 = cljs$core$aget;
      var G__5641 = cljs$core$aget.cljs$core$IFn$_invoke$arity$2(array, i);
      var G__5642 = idxs;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__5640, G__5641, G__5642) : cljs.core.apply.call(null, G__5640, G__5641, G__5642);
    };
    var G__5643 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        var G__5644__i = 0, G__5644__a = new Array(arguments.length - 2);
        while (G__5644__i < G__5644__a.length) {
          G__5644__a[G__5644__i] = arguments[G__5644__i + 2];
          ++G__5644__i;
        }
        idxs = new cljs.core.IndexedSeq(G__5644__a, 0);
      }
      return G__5643__delegate.call(this, array, i, idxs);
    };
    G__5643.cljs$lang$maxFixedArity = 2;
    G__5643.cljs$lang$applyTo = function(arglist__5645) {
      var array = cljs.core.first(arglist__5645);
      arglist__5645 = cljs.core.next(arglist__5645);
      var i = cljs.core.first(arglist__5645);
      var idxs = cljs.core.rest(arglist__5645);
      return G__5643__delegate(array, i, idxs);
    };
    G__5643.cljs$core$IFn$_invoke$arity$variadic = G__5643__delegate;
    return G__5643;
  }();
  cljs$core$aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$aget__2.call(this, array, i);
      default:
        var G__5646 = null;
        if (arguments.length > 2) {
          var G__5647__i = 0, G__5647__a = new Array(arguments.length - 2);
          while (G__5647__i < G__5647__a.length) {
            G__5647__a[G__5647__i] = arguments[G__5647__i + 2];
            ++G__5647__i;
          }
          G__5646 = new cljs.core.IndexedSeq(G__5647__a, 0);
        }
        return cljs$core$aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, G__5646);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$aget.cljs$lang$maxFixedArity = 2;
  cljs$core$aget.cljs$lang$applyTo = cljs$core$aget__3.cljs$lang$applyTo;
  cljs$core$aget.cljs$core$IFn$_invoke$arity$2 = cljs$core$aget__2;
  cljs$core$aget.cljs$core$IFn$_invoke$arity$variadic = cljs$core$aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$aget;
}();
cljs.core.aset = function() {
  var cljs$core$aset = null;
  var cljs$core$aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var cljs$core$aset__4 = function() {
    var G__5656__delegate = function(array, idx, idx2, idxv) {
      var G__5652 = cljs$core$aset;
      var G__5653 = array[idx];
      var G__5654 = idx2;
      var G__5655 = idxv;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__5652, G__5653, G__5654, G__5655) : cljs.core.apply.call(null, G__5652, G__5653, G__5654, G__5655);
    };
    var G__5656 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        var G__5657__i = 0, G__5657__a = new Array(arguments.length - 3);
        while (G__5657__i < G__5657__a.length) {
          G__5657__a[G__5657__i] = arguments[G__5657__i + 3];
          ++G__5657__i;
        }
        idxv = new cljs.core.IndexedSeq(G__5657__a, 0);
      }
      return G__5656__delegate.call(this, array, idx, idx2, idxv);
    };
    G__5656.cljs$lang$maxFixedArity = 3;
    G__5656.cljs$lang$applyTo = function(arglist__5658) {
      var array = cljs.core.first(arglist__5658);
      arglist__5658 = cljs.core.next(arglist__5658);
      var idx = cljs.core.first(arglist__5658);
      arglist__5658 = cljs.core.next(arglist__5658);
      var idx2 = cljs.core.first(arglist__5658);
      var idxv = cljs.core.rest(arglist__5658);
      return G__5656__delegate(array, idx, idx2, idxv);
    };
    G__5656.cljs$core$IFn$_invoke$arity$variadic = G__5656__delegate;
    return G__5656;
  }();
  cljs$core$aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return cljs$core$aset__3.call(this, array, idx, idx2);
      default:
        var G__5659 = null;
        if (arguments.length > 3) {
          var G__5660__i = 0, G__5660__a = new Array(arguments.length - 3);
          while (G__5660__i < G__5660__a.length) {
            G__5660__a[G__5660__i] = arguments[G__5660__i + 3];
            ++G__5660__i;
          }
          G__5659 = new cljs.core.IndexedSeq(G__5660__a, 0);
        }
        return cljs$core$aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, G__5659);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$aset.cljs$lang$maxFixedArity = 3;
  cljs$core$aset.cljs$lang$applyTo = cljs$core$aset__4.cljs$lang$applyTo;
  cljs$core$aset.cljs$core$IFn$_invoke$arity$3 = cljs$core$aset__3;
  cljs$core$aset.cljs$core$IFn$_invoke$arity$variadic = cljs$core$aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$aset;
}();
cljs.core.alength = function cljs$core$alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var cljs$core$into_array = null;
  var cljs$core$into_array__1 = function(aseq) {
    return cljs$core$into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
  };
  var cljs$core$into_array__2 = function(type, aseq) {
    var G__5666 = function(a, x) {
      a.push(x);
      return a;
    };
    var G__5667 = [];
    var G__5668 = aseq;
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__5666, G__5667, G__5668) : cljs.core.reduce.call(null, G__5666, G__5667, G__5668);
  };
  cljs$core$into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return cljs$core$into_array__1.call(this, type);
      case 2:
        return cljs$core$into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$into_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$into_array__1;
  cljs$core$into_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$into_array__2;
  return cljs$core$into_array;
}();
cljs.core.js_invoke = function() {
  var cljs$core$js_invoke__delegate = function(obj, s, args) {
    return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
  };
  var cljs$core$js_invoke = function(obj, s, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__5669__i = 0, G__5669__a = new Array(arguments.length - 2);
      while (G__5669__i < G__5669__a.length) {
        G__5669__a[G__5669__i] = arguments[G__5669__i + 2];
        ++G__5669__i;
      }
      args = new cljs.core.IndexedSeq(G__5669__a, 0);
    }
    return cljs$core$js_invoke__delegate.call(this, obj, s, args);
  };
  cljs$core$js_invoke.cljs$lang$maxFixedArity = 2;
  cljs$core$js_invoke.cljs$lang$applyTo = function(arglist__5670) {
    var obj = cljs.core.first(arglist__5670);
    arglist__5670 = cljs.core.next(arglist__5670);
    var s = cljs.core.first(arglist__5670);
    var args = cljs.core.rest(arglist__5670);
    return cljs$core$js_invoke__delegate(obj, s, args);
  };
  cljs$core$js_invoke.cljs$core$IFn$_invoke$arity$variadic = cljs$core$js_invoke__delegate;
  return cljs$core$js_invoke;
}();
cljs.core.Fn = function() {
  var obj5672 = {};
  return obj5672;
}();
cljs.core.IFn = function() {
  var obj5674 = {};
  return obj5674;
}();
cljs.core._invoke = function() {
  var cljs$core$_invoke = null;
  var cljs$core$_invoke__1 = function(this$) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5720 = x__4758__auto__;
          return goog.typeOf(G__5720);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var cljs$core$_invoke__2 = function(this$, a) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5722 = x__4758__auto__;
          return goog.typeOf(G__5722);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var cljs$core$_invoke__3 = function(this$, a, b) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5724 = x__4758__auto__;
          return goog.typeOf(G__5724);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var cljs$core$_invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5726 = x__4758__auto__;
          return goog.typeOf(G__5726);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var cljs$core$_invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5728 = x__4758__auto__;
          return goog.typeOf(G__5728);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var cljs$core$_invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5730 = x__4758__auto__;
          return goog.typeOf(G__5730);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var cljs$core$_invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5732 = x__4758__auto__;
          return goog.typeOf(G__5732);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var cljs$core$_invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5734 = x__4758__auto__;
          return goog.typeOf(G__5734);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var cljs$core$_invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5736 = x__4758__auto__;
          return goog.typeOf(G__5736);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var cljs$core$_invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5738 = x__4758__auto__;
          return goog.typeOf(G__5738);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var cljs$core$_invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5740 = x__4758__auto__;
          return goog.typeOf(G__5740);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var cljs$core$_invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5742 = x__4758__auto__;
          return goog.typeOf(G__5742);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var cljs$core$_invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5744 = x__4758__auto__;
          return goog.typeOf(G__5744);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var cljs$core$_invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5746 = x__4758__auto__;
          return goog.typeOf(G__5746);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var cljs$core$_invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5748 = x__4758__auto__;
          return goog.typeOf(G__5748);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var cljs$core$_invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5750 = x__4758__auto__;
          return goog.typeOf(G__5750);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var cljs$core$_invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5752 = x__4758__auto__;
          return goog.typeOf(G__5752);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var cljs$core$_invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5754 = x__4758__auto__;
          return goog.typeOf(G__5754);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var cljs$core$_invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5756 = x__4758__auto__;
          return goog.typeOf(G__5756);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    }
  };
  var cljs$core$_invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5758 = x__4758__auto__;
          return goog.typeOf(G__5758);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    }
  };
  var cljs$core$_invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5760 = x__4758__auto__;
          return goog.typeOf(G__5760);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
  };
  var cljs$core$_invoke__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$22;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__5762 = x__4758__auto__;
          return goog.typeOf(G__5762);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
  };
  cljs$core$_invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return cljs$core$_invoke__1.call(this, this$);
      case 2:
        return cljs$core$_invoke__2.call(this, this$, a);
      case 3:
        return cljs$core$_invoke__3.call(this, this$, a, b);
      case 4:
        return cljs$core$_invoke__4.call(this, this$, a, b, c);
      case 5:
        return cljs$core$_invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return cljs$core$_invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return cljs$core$_invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return cljs$core$_invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return cljs$core$_invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return cljs$core$_invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return cljs$core$_invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return cljs$core$_invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return cljs$core$_invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return cljs$core$_invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return cljs$core$_invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return cljs$core$_invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return cljs$core$_invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return cljs$core$_invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return cljs$core$_invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return cljs$core$_invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return cljs$core$_invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return cljs$core$_invoke__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$1 = cljs$core$_invoke__1;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$2 = cljs$core$_invoke__2;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$3 = cljs$core$_invoke__3;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$4 = cljs$core$_invoke__4;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$5 = cljs$core$_invoke__5;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$6 = cljs$core$_invoke__6;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$7 = cljs$core$_invoke__7;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$8 = cljs$core$_invoke__8;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$9 = cljs$core$_invoke__9;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$10 = cljs$core$_invoke__10;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$11 = cljs$core$_invoke__11;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$12 = cljs$core$_invoke__12;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$13 = cljs$core$_invoke__13;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$14 = cljs$core$_invoke__14;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$15 = cljs$core$_invoke__15;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$16 = cljs$core$_invoke__16;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$17 = cljs$core$_invoke__17;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$18 = cljs$core$_invoke__18;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$19 = cljs$core$_invoke__19;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$20 = cljs$core$_invoke__20;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$21 = cljs$core$_invoke__21;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$22 = cljs$core$_invoke__22;
  return cljs$core$_invoke;
}();
cljs.core.ICloneable = function() {
  var obj5764 = {};
  return obj5764;
}();
cljs.core._clone = function cljs$core$_clone(value) {
  if (function() {
    var and__4110__auto__ = value;
    if (and__4110__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4758__auto__ = value == null ? null : value;
    return function() {
      var or__4122__auto__ = cljs.core._clone[function() {
        var G__5768 = x__4758__auto__;
        return goog.typeOf(G__5768);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._clone["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj5770 = {};
  return obj5770;
}();
cljs.core._count = function cljs$core$_count(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._count[function() {
        var G__5774 = x__4758__auto__;
        return goog.typeOf(G__5774);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._count["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj5776 = {};
  return obj5776;
}();
cljs.core._empty = function cljs$core$_empty(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._empty[function() {
        var G__5780 = x__4758__auto__;
        return goog.typeOf(G__5780);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._empty["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj5782 = {};
  return obj5782;
}();
cljs.core._conj = function cljs$core$_conj(coll, o) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._conj[function() {
        var G__5786 = x__4758__auto__;
        return goog.typeOf(G__5786);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._conj["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj5788 = {};
  return obj5788;
}();
cljs.core._nth = function() {
  var cljs$core$_nth = null;
  var cljs$core$_nth__2 = function(coll, n) {
    if (function() {
      var and__4110__auto__ = coll;
      if (and__4110__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4758__auto__ = coll == null ? null : coll;
      return function() {
        var or__4122__auto__ = cljs.core._nth[function() {
          var G__5794 = x__4758__auto__;
          return goog.typeOf(G__5794);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._nth["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var cljs$core$_nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__4110__auto__ = coll;
      if (and__4110__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4758__auto__ = coll == null ? null : coll;
      return function() {
        var or__4122__auto__ = cljs.core._nth[function() {
          var G__5796 = x__4758__auto__;
          return goog.typeOf(G__5796);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._nth["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  cljs$core$_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$_nth__2.call(this, coll, n);
      case 3:
        return cljs$core$_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_nth.cljs$core$IFn$_invoke$arity$2 = cljs$core$_nth__2;
  cljs$core$_nth.cljs$core$IFn$_invoke$arity$3 = cljs$core$_nth__3;
  return cljs$core$_nth;
}();
cljs.core.ASeq = function() {
  var obj5798 = {};
  return obj5798;
}();
cljs.core.ISeq = function() {
  var obj5800 = {};
  return obj5800;
}();
cljs.core._first = function cljs$core$_first(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._first[function() {
        var G__5804 = x__4758__auto__;
        return goog.typeOf(G__5804);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._first["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function cljs$core$_rest(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._rest[function() {
        var G__5808 = x__4758__auto__;
        return goog.typeOf(G__5808);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._rest["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj5810 = {};
  return obj5810;
}();
cljs.core._next = function cljs$core$_next(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._next[function() {
        var G__5814 = x__4758__auto__;
        return goog.typeOf(G__5814);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._next["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj5816 = {};
  return obj5816;
}();
cljs.core._lookup = function() {
  var cljs$core$_lookup = null;
  var cljs$core$_lookup__2 = function(o, k) {
    if (function() {
      var and__4110__auto__ = o;
      if (and__4110__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4758__auto__ = o == null ? null : o;
      return function() {
        var or__4122__auto__ = cljs.core._lookup[function() {
          var G__5822 = x__4758__auto__;
          return goog.typeOf(G__5822);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._lookup["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var cljs$core$_lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__4110__auto__ = o;
      if (and__4110__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4758__auto__ = o == null ? null : o;
      return function() {
        var or__4122__auto__ = cljs.core._lookup[function() {
          var G__5824 = x__4758__auto__;
          return goog.typeOf(G__5824);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._lookup["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  cljs$core$_lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$_lookup__2.call(this, o, k);
      case 3:
        return cljs$core$_lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_lookup.cljs$core$IFn$_invoke$arity$2 = cljs$core$_lookup__2;
  cljs$core$_lookup.cljs$core$IFn$_invoke$arity$3 = cljs$core$_lookup__3;
  return cljs$core$_lookup;
}();
cljs.core.IAssociative = function() {
  var obj5826 = {};
  return obj5826;
}();
cljs.core._contains_key_QMARK_ = function cljs$core$_contains_key_QMARK_(coll, k) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._contains_key_QMARK_[function() {
        var G__5830 = x__4758__auto__;
        return goog.typeOf(G__5830);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function cljs$core$_assoc(coll, k, v) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._assoc[function() {
        var G__5834 = x__4758__auto__;
        return goog.typeOf(G__5834);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._assoc["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj5836 = {};
  return obj5836;
}();
cljs.core._dissoc = function cljs$core$_dissoc(coll, k) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._dissoc[function() {
        var G__5840 = x__4758__auto__;
        return goog.typeOf(G__5840);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._dissoc["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj5842 = {};
  return obj5842;
}();
cljs.core._key = function cljs$core$_key(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._key[function() {
        var G__5846 = x__4758__auto__;
        return goog.typeOf(G__5846);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._key["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function cljs$core$_val(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._val[function() {
        var G__5850 = x__4758__auto__;
        return goog.typeOf(G__5850);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._val["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj5852 = {};
  return obj5852;
}();
cljs.core._disjoin = function cljs$core$_disjoin(coll, v) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._disjoin[function() {
        var G__5856 = x__4758__auto__;
        return goog.typeOf(G__5856);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._disjoin["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj5858 = {};
  return obj5858;
}();
cljs.core._peek = function cljs$core$_peek(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._peek[function() {
        var G__5862 = x__4758__auto__;
        return goog.typeOf(G__5862);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._peek["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function cljs$core$_pop(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._pop[function() {
        var G__5866 = x__4758__auto__;
        return goog.typeOf(G__5866);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._pop["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj5868 = {};
  return obj5868;
}();
cljs.core._assoc_n = function cljs$core$_assoc_n(coll, n, val) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._assoc_n[function() {
        var G__5872 = x__4758__auto__;
        return goog.typeOf(G__5872);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._assoc_n["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj5874 = {};
  return obj5874;
}();
cljs.core._deref = function cljs$core$_deref(o) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._deref[function() {
        var G__5878 = x__4758__auto__;
        return goog.typeOf(G__5878);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._deref["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj5880 = {};
  return obj5880;
}();
cljs.core._deref_with_timeout = function cljs$core$_deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._deref_with_timeout[function() {
        var G__5884 = x__4758__auto__;
        return goog.typeOf(G__5884);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj5886 = {};
  return obj5886;
}();
cljs.core._meta = function cljs$core$_meta(o) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._meta[function() {
        var G__5890 = x__4758__auto__;
        return goog.typeOf(G__5890);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._meta["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj5892 = {};
  return obj5892;
}();
cljs.core._with_meta = function cljs$core$_with_meta(o, meta) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._with_meta[function() {
        var G__5896 = x__4758__auto__;
        return goog.typeOf(G__5896);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._with_meta["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj5898 = {};
  return obj5898;
}();
cljs.core._reduce = function() {
  var cljs$core$_reduce = null;
  var cljs$core$_reduce__2 = function(coll, f) {
    if (function() {
      var and__4110__auto__ = coll;
      if (and__4110__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4758__auto__ = coll == null ? null : coll;
      return function() {
        var or__4122__auto__ = cljs.core._reduce[function() {
          var G__5904 = x__4758__auto__;
          return goog.typeOf(G__5904);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._reduce["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var cljs$core$_reduce__3 = function(coll, f, start) {
    if (function() {
      var and__4110__auto__ = coll;
      if (and__4110__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4758__auto__ = coll == null ? null : coll;
      return function() {
        var or__4122__auto__ = cljs.core._reduce[function() {
          var G__5906 = x__4758__auto__;
          return goog.typeOf(G__5906);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._reduce["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  cljs$core$_reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return cljs$core$_reduce__2.call(this, coll, f);
      case 3:
        return cljs$core$_reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_reduce.cljs$core$IFn$_invoke$arity$2 = cljs$core$_reduce__2;
  cljs$core$_reduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$_reduce__3;
  return cljs$core$_reduce;
}();
cljs.core.IKVReduce = function() {
  var obj5908 = {};
  return obj5908;
}();
cljs.core._kv_reduce = function cljs$core$_kv_reduce(coll, f, init) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._kv_reduce[function() {
        var G__5912 = x__4758__auto__;
        return goog.typeOf(G__5912);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj5914 = {};
  return obj5914;
}();
cljs.core._equiv = function cljs$core$_equiv(o, other) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._equiv[function() {
        var G__5918 = x__4758__auto__;
        return goog.typeOf(G__5918);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._equiv["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj5920 = {};
  return obj5920;
}();
cljs.core._hash = function cljs$core$_hash(o) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._hash[function() {
        var G__5924 = x__4758__auto__;
        return goog.typeOf(G__5924);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._hash["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj5926 = {};
  return obj5926;
}();
cljs.core._seq = function cljs$core$_seq(o) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._seq[function() {
        var G__5930 = x__4758__auto__;
        return goog.typeOf(G__5930);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._seq["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj5932 = {};
  return obj5932;
}();
cljs.core.IList = function() {
  var obj5934 = {};
  return obj5934;
}();
cljs.core.IRecord = function() {
  var obj5936 = {};
  return obj5936;
}();
cljs.core.IReversible = function() {
  var obj5938 = {};
  return obj5938;
}();
cljs.core._rseq = function cljs$core$_rseq(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._rseq[function() {
        var G__5942 = x__4758__auto__;
        return goog.typeOf(G__5942);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._rseq["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj5944 = {};
  return obj5944;
}();
cljs.core._sorted_seq = function cljs$core$_sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._sorted_seq[function() {
        var G__5948 = x__4758__auto__;
        return goog.typeOf(G__5948);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function cljs$core$_sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._sorted_seq_from[function() {
        var G__5952 = x__4758__auto__;
        return goog.typeOf(G__5952);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function cljs$core$_entry_key(coll, entry) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._entry_key[function() {
        var G__5956 = x__4758__auto__;
        return goog.typeOf(G__5956);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._entry_key["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function cljs$core$_comparator(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._comparator[function() {
        var G__5960 = x__4758__auto__;
        return goog.typeOf(G__5960);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._comparator["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj5962 = {};
  return obj5962;
}();
cljs.core._write = function cljs$core$_write(writer, s) {
  if (function() {
    var and__4110__auto__ = writer;
    if (and__4110__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4758__auto__ = writer == null ? null : writer;
    return function() {
      var or__4122__auto__ = cljs.core._write[function() {
        var G__5966 = x__4758__auto__;
        return goog.typeOf(G__5966);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._write["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function cljs$core$_flush(writer) {
  if (function() {
    var and__4110__auto__ = writer;
    if (and__4110__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4758__auto__ = writer == null ? null : writer;
    return function() {
      var or__4122__auto__ = cljs.core._flush[function() {
        var G__5970 = x__4758__auto__;
        return goog.typeOf(G__5970);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._flush["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj5972 = {};
  return obj5972;
}();
cljs.core._pr_writer = function cljs$core$_pr_writer(o, writer, opts) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._pr_writer[function() {
        var G__5976 = x__4758__auto__;
        return goog.typeOf(G__5976);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._pr_writer["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj5978 = {};
  return obj5978;
}();
cljs.core._realized_QMARK_ = function cljs$core$_realized_QMARK_(d) {
  if (function() {
    var and__4110__auto__ = d;
    if (and__4110__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4758__auto__ = d == null ? null : d;
    return function() {
      var or__4122__auto__ = cljs.core._realized_QMARK_[function() {
        var G__5982 = x__4758__auto__;
        return goog.typeOf(G__5982);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj5984 = {};
  return obj5984;
}();
cljs.core._notify_watches = function cljs$core$_notify_watches(this$, oldval, newval) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = cljs.core._notify_watches[function() {
        var G__5988 = x__4758__auto__;
        return goog.typeOf(G__5988);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._notify_watches["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function cljs$core$_add_watch(this$, key, f) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = cljs.core._add_watch[function() {
        var G__5992 = x__4758__auto__;
        return goog.typeOf(G__5992);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._add_watch["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function cljs$core$_remove_watch(this$, key) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = cljs.core._remove_watch[function() {
        var G__5996 = x__4758__auto__;
        return goog.typeOf(G__5996);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._remove_watch["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj5998 = {};
  return obj5998;
}();
cljs.core._as_transient = function cljs$core$_as_transient(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._as_transient[function() {
        var G__6002 = x__4758__auto__;
        return goog.typeOf(G__6002);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._as_transient["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj6004 = {};
  return obj6004;
}();
cljs.core._conj_BANG_ = function cljs$core$_conj_BANG_(tcoll, val) {
  if (function() {
    var and__4110__auto__ = tcoll;
    if (and__4110__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4758__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4122__auto__ = cljs.core._conj_BANG_[function() {
        var G__6008 = x__4758__auto__;
        return goog.typeOf(G__6008);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function cljs$core$_persistent_BANG_(tcoll) {
  if (function() {
    var and__4110__auto__ = tcoll;
    if (and__4110__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4758__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4122__auto__ = cljs.core._persistent_BANG_[function() {
        var G__6012 = x__4758__auto__;
        return goog.typeOf(G__6012);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj6014 = {};
  return obj6014;
}();
cljs.core._assoc_BANG_ = function cljs$core$_assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__4110__auto__ = tcoll;
    if (and__4110__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4758__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4122__auto__ = cljs.core._assoc_BANG_[function() {
        var G__6018 = x__4758__auto__;
        return goog.typeOf(G__6018);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj6020 = {};
  return obj6020;
}();
cljs.core._dissoc_BANG_ = function cljs$core$_dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__4110__auto__ = tcoll;
    if (and__4110__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4758__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4122__auto__ = cljs.core._dissoc_BANG_[function() {
        var G__6024 = x__4758__auto__;
        return goog.typeOf(G__6024);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj6026 = {};
  return obj6026;
}();
cljs.core._assoc_n_BANG_ = function cljs$core$_assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__4110__auto__ = tcoll;
    if (and__4110__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4758__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4122__auto__ = cljs.core._assoc_n_BANG_[function() {
        var G__6030 = x__4758__auto__;
        return goog.typeOf(G__6030);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function cljs$core$_pop_BANG_(tcoll) {
  if (function() {
    var and__4110__auto__ = tcoll;
    if (and__4110__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4758__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4122__auto__ = cljs.core._pop_BANG_[function() {
        var G__6034 = x__4758__auto__;
        return goog.typeOf(G__6034);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj6036 = {};
  return obj6036;
}();
cljs.core._disjoin_BANG_ = function cljs$core$_disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__4110__auto__ = tcoll;
    if (and__4110__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4758__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4122__auto__ = cljs.core._disjoin_BANG_[function() {
        var G__6040 = x__4758__auto__;
        return goog.typeOf(G__6040);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj6042 = {};
  return obj6042;
}();
cljs.core._compare = function cljs$core$_compare(x, y) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = cljs.core._compare[function() {
        var G__6046 = x__4758__auto__;
        return goog.typeOf(G__6046);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._compare["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj6048 = {};
  return obj6048;
}();
cljs.core._drop_first = function cljs$core$_drop_first(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._drop_first[function() {
        var G__6052 = x__4758__auto__;
        return goog.typeOf(G__6052);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._drop_first["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj6054 = {};
  return obj6054;
}();
cljs.core._chunked_first = function cljs$core$_chunked_first(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._chunked_first[function() {
        var G__6058 = x__4758__auto__;
        return goog.typeOf(G__6058);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._chunked_first["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function cljs$core$_chunked_rest(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._chunked_rest[function() {
        var G__6062 = x__4758__auto__;
        return goog.typeOf(G__6062);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj6064 = {};
  return obj6064;
}();
cljs.core._chunked_next = function cljs$core$_chunked_next(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._chunked_next[function() {
        var G__6068 = x__4758__auto__;
        return goog.typeOf(G__6068);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._chunked_next["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj6070 = {};
  return obj6070;
}();
cljs.core._name = function cljs$core$_name(x) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = cljs.core._name[function() {
        var G__6074 = x__4758__auto__;
        return goog.typeOf(G__6074);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._name["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function cljs$core$_namespace(x) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = cljs.core._namespace[function() {
        var G__6078 = x__4758__auto__;
        return goog.typeOf(G__6078);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._namespace["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj6080 = {};
  return obj6080;
}();
cljs.core.IReset = function() {
  var obj6082 = {};
  return obj6082;
}();
cljs.core._reset_BANG_ = function cljs$core$_reset_BANG_(o, new_value) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._reset_BANG_[function() {
        var G__6086 = x__4758__auto__;
        return goog.typeOf(G__6086);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj6088 = {};
  return obj6088;
}();
cljs.core._swap_BANG_ = function() {
  var cljs$core$_swap_BANG_ = null;
  var cljs$core$_swap_BANG___2 = function(o, f) {
    if (function() {
      var and__4110__auto__ = o;
      if (and__4110__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4758__auto__ = o == null ? null : o;
      return function() {
        var or__4122__auto__ = cljs.core._swap_BANG_[function() {
          var G__6098 = x__4758__auto__;
          return goog.typeOf(G__6098);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var cljs$core$_swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__4110__auto__ = o;
      if (and__4110__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4758__auto__ = o == null ? null : o;
      return function() {
        var or__4122__auto__ = cljs.core._swap_BANG_[function() {
          var G__6100 = x__4758__auto__;
          return goog.typeOf(G__6100);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var cljs$core$_swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__4110__auto__ = o;
      if (and__4110__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4758__auto__ = o == null ? null : o;
      return function() {
        var or__4122__auto__ = cljs.core._swap_BANG_[function() {
          var G__6102 = x__4758__auto__;
          return goog.typeOf(G__6102);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var cljs$core$_swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__4110__auto__ = o;
      if (and__4110__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4758__auto__ = o == null ? null : o;
      return function() {
        var or__4122__auto__ = cljs.core._swap_BANG_[function() {
          var G__6104 = x__4758__auto__;
          return goog.typeOf(G__6104);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  cljs$core$_swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return cljs$core$_swap_BANG___2.call(this, o, f);
      case 3:
        return cljs$core$_swap_BANG___3.call(this, o, f, a);
      case 4:
        return cljs$core$_swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return cljs$core$_swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_swap_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_swap_BANG___2;
  cljs$core$_swap_BANG_.cljs$core$IFn$_invoke$arity$3 = cljs$core$_swap_BANG___3;
  cljs$core$_swap_BANG_.cljs$core$IFn$_invoke$arity$4 = cljs$core$_swap_BANG___4;
  cljs$core$_swap_BANG_.cljs$core$IFn$_invoke$arity$5 = cljs$core$_swap_BANG___5;
  return cljs$core$_swap_BANG_;
}();
cljs.core.IVolatile = function() {
  var obj6106 = {};
  return obj6106;
}();
cljs.core._vreset_BANG_ = function cljs$core$_vreset_BANG_(o, new_value) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IVolatile$_vreset_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._vreset_BANG_[function() {
        var G__6110 = x__4758__auto__;
        return goog.typeOf(G__6110);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._vreset_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.IIterable = function() {
  var obj6112 = {};
  return obj6112;
}();
cljs.core._iterator = function cljs$core$_iterator(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._iterator[function() {
        var G__6116 = x__4758__auto__;
        return goog.typeOf(G__6116);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._iterator["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function cljs$core$__GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function cljs$core$pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return[cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function cljs$core$int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(function() {
  var G__6119 = 4294967295;
  var G__6120 = 5;
  return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__6119, G__6120) : Math.imul.call(null, G__6119, G__6120);
}() === 0)) {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var G__6123 = a;
    var G__6124 = b;
    return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__6123, G__6124) : Math.imul.call(null, G__6123, G__6124);
  };
} else {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353 | 0;
cljs.core.m3_C2 = 461845907 | 0;
cljs.core.m3_mix_K1 = function cljs$core$m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function cljs$core$m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + (3864292196 | 0) | 0;
};
cljs.core.m3_fmix = function cljs$core$m3_fmix(h1, len) {
  var h1__$1 = h1 | 0;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507 | 0);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909 | 0);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function cljs$core$m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function cljs$core$m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__6125 = i + 2;
        var G__6126 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__6125;
        h1 = G__6126;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj6128 = {};
  return obj6128;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function cljs$core$hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__6129 = i + 1;
          var G__6130 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__6129;
          hash = G__6130;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function cljs$core$add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function cljs$core$hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj6134 = {};
      return obj6134;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function cljs$core$hash(o) {
  if (function() {
    var G__6137 = o;
    if (G__6137) {
      var bit__4789__auto__ = G__6137.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4789__auto__ || G__6137.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return function() {
        var G__6138 = o;
        return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__6138) : Math.floor.call(null, G__6138);
      }() % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function cljs$core$hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function cljs$core$instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function cljs$core$symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function cljs$core$hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function cljs$core$compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4110__auto__ = cljs.core.not(a.ns);
      if (and__4110__auto__) {
        return b.ns;
      } else {
        return and__4110__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__6145 = a.ns;
            var G__6146 = b.ns;
            return goog.array.defaultCompare(G__6145, G__6146);
          }();
          if (0 === nsc) {
            var G__6147 = a.name;
            var G__6148 = b.name;
            return goog.array.defaultCompare(G__6147, G__6148);
          } else {
            return nsc;
          }
        }
      } else {
        var G__6149 = a.name;
        var G__6150 = b.name;
        return goog.array.defaultCompare(G__6149, G__6150);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4538__auto__ = self__._hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__6152 = null;
  var G__6152__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
  };
  var G__6152__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
  };
  G__6152 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6152__2.call(this, self__, coll);
      case 3:
        return G__6152__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6152.cljs$core$IFn$_invoke$arity$2 = G__6152__2;
  G__6152.cljs$core$IFn$_invoke$arity$3 = G__6152__3;
  return G__6152;
}();
cljs.core.Symbol.prototype.apply = function(self__, args6151) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args6151)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function cljs$core$__GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var cljs$core$symbol = null;
  var cljs$core$symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return cljs$core$symbol.cljs$core$IFn$_invoke$arity$2(null, name);
    }
  };
  var cljs$core$symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  cljs$core$symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return cljs$core$symbol__1.call(this, ns);
      case 2:
        return cljs$core$symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$symbol.cljs$core$IFn$_invoke$arity$1 = cljs$core$symbol__1;
  cljs$core$symbol.cljs$core$IFn$_invoke$arity$2 = cljs$core$symbol__2;
  return cljs$core$symbol;
}();
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 163841;
};
cljs.core.Var.prototype.call = function() {
  var G__6200 = null;
  var G__6200__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null);
  };
  var G__6200__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a);
  };
  var G__6200__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b);
  };
  var G__6200__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c);
  };
  var G__6200__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d);
  };
  var G__6200__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e);
  };
  var G__6200__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f);
  };
  var G__6200__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g);
  };
  var G__6200__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h);
  };
  var G__6200__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__6200__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__6200__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__6200__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__6200__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__6200__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__6200__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__6200__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__6200__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__6200__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__6200__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__6200__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__6200__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6156 = function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }();
    var G__6157 = a;
    var G__6158 = b;
    var G__6159 = c;
    var G__6160 = d;
    var G__6161 = e;
    var G__6162 = f;
    var G__6163 = g;
    var G__6164 = h;
    var G__6165 = i;
    var G__6166 = j;
    var G__6167 = k;
    var G__6168 = l;
    var G__6169 = m;
    var G__6170 = n;
    var G__6171 = o;
    var G__6172 = p;
    var G__6173 = q;
    var G__6174 = r;
    var G__6175 = s;
    var G__6176 = t;
    var G__6177 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__6156, G__6157, G__6158, G__6159, G__6160, G__6161, G__6162, G__6163, G__6164, G__6165, G__6166, G__6167, G__6168, G__6169, G__6170, G__6171, G__6172, G__6173, G__6174, G__6175, G__6176, G__6177) : cljs.core.apply.call(null, G__6156, G__6157, G__6158, G__6159, G__6160, G__6161, G__6162, G__6163, G__6164, G__6165, G__6166, G__6167, G__6168, G__6169, G__6170, G__6171, G__6172, G__6173, G__6174, 
    G__6175, G__6176, G__6177);
  };
  G__6200 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__6200__1.call(this, self__);
      case 2:
        return G__6200__2.call(this, self__, a);
      case 3:
        return G__6200__3.call(this, self__, a, b);
      case 4:
        return G__6200__4.call(this, self__, a, b, c);
      case 5:
        return G__6200__5.call(this, self__, a, b, c, d);
      case 6:
        return G__6200__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__6200__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__6200__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__6200__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__6200__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__6200__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__6200__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__6200__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__6200__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__6200__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__6200__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__6200__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__6200__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__6200__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__6200__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__6200__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__6200__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6200.cljs$core$IFn$_invoke$arity$1 = G__6200__1;
  G__6200.cljs$core$IFn$_invoke$arity$2 = G__6200__2;
  G__6200.cljs$core$IFn$_invoke$arity$3 = G__6200__3;
  G__6200.cljs$core$IFn$_invoke$arity$4 = G__6200__4;
  G__6200.cljs$core$IFn$_invoke$arity$5 = G__6200__5;
  G__6200.cljs$core$IFn$_invoke$arity$6 = G__6200__6;
  G__6200.cljs$core$IFn$_invoke$arity$7 = G__6200__7;
  G__6200.cljs$core$IFn$_invoke$arity$8 = G__6200__8;
  G__6200.cljs$core$IFn$_invoke$arity$9 = G__6200__9;
  G__6200.cljs$core$IFn$_invoke$arity$10 = G__6200__10;
  G__6200.cljs$core$IFn$_invoke$arity$11 = G__6200__11;
  G__6200.cljs$core$IFn$_invoke$arity$12 = G__6200__12;
  G__6200.cljs$core$IFn$_invoke$arity$13 = G__6200__13;
  G__6200.cljs$core$IFn$_invoke$arity$14 = G__6200__14;
  G__6200.cljs$core$IFn$_invoke$arity$15 = G__6200__15;
  G__6200.cljs$core$IFn$_invoke$arity$16 = G__6200__16;
  G__6200.cljs$core$IFn$_invoke$arity$17 = G__6200__17;
  G__6200.cljs$core$IFn$_invoke$arity$18 = G__6200__18;
  G__6200.cljs$core$IFn$_invoke$arity$19 = G__6200__19;
  G__6200.cljs$core$IFn$_invoke$arity$20 = G__6200__20;
  G__6200.cljs$core$IFn$_invoke$arity$21 = G__6200__21;
  G__6200.cljs$core$IFn$_invoke$arity$22 = G__6200__22;
  return G__6200;
}();
cljs.core.Var.prototype.apply = function(self__, args6155) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args6155)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__6178 = function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }();
  var G__6179 = a;
  var G__6180 = b;
  var G__6181 = c;
  var G__6182 = d;
  var G__6183 = e;
  var G__6184 = f;
  var G__6185 = g;
  var G__6186 = h;
  var G__6187 = i;
  var G__6188 = j;
  var G__6189 = k;
  var G__6190 = l;
  var G__6191 = m;
  var G__6192 = n;
  var G__6193 = o;
  var G__6194 = p;
  var G__6195 = q;
  var G__6196 = r;
  var G__6197 = s;
  var G__6198 = t;
  var G__6199 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__6178, G__6179, G__6180, G__6181, G__6182, G__6183, G__6184, G__6185, G__6186, G__6187, G__6188, G__6189, G__6190, G__6191, G__6192, G__6193, G__6194, G__6195, G__6196, G__6197, G__6198, G__6199) : cljs.core.apply.call(null, G__6178, G__6179, G__6180, G__6181, G__6182, G__6183, G__6184, G__6185, G__6186, G__6187, G__6188, G__6189, G__6190, G__6191, G__6192, G__6193, G__6194, G__6195, G__6196, 
  G__6197, G__6198, G__6199);
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function cljs$core$__GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.iterable_QMARK_ = function cljs$core$iterable_QMARK_(x) {
  var G__6202 = x;
  if (G__6202) {
    var bit__4796__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4122__auto__ = bit__4796__auto__;
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return G__6202.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__6202.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__6202);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__6202);
  }
};
cljs.core.clone = function cljs$core$clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cljs$core$cloneable_QMARK_(value) {
  var G__6204 = value;
  if (G__6204) {
    var bit__4796__auto__ = G__6204.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4796__auto__ || G__6204.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__6204.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__6204);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__6204);
  }
};
cljs.core.seq = function cljs$core$seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__6206 = coll;
      if (G__6206) {
        var bit__4789__auto__ = G__6206.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4789__auto__ || G__6206.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function cljs$core$first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__6208 = coll;
      if (G__6208) {
        var bit__4789__auto__ = G__6208.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4789__auto__ || G__6208.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function cljs$core$rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__6210 = coll;
      if (G__6210) {
        var bit__4789__auto__ = G__6210.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4789__auto__ || G__6210.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function cljs$core$next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__6212 = coll;
      if (G__6212) {
        var bit__4789__auto__ = G__6212.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4789__auto__ || G__6212.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var cljs$core$_EQ_ = null;
  var cljs$core$_EQ___1 = function(x) {
    return true;
  };
  var cljs$core$_EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv(x, y);
    }
  };
  var cljs$core$_EQ___3 = function() {
    var G__6217__delegate = function(x, y, more) {
      while (true) {
        if (cljs$core$_EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
          if (cljs.core.next(more)) {
            var G__6218 = y;
            var G__6219 = cljs.core.first(more);
            var G__6220 = cljs.core.next(more);
            x = G__6218;
            y = G__6219;
            more = G__6220;
            continue;
          } else {
            return cljs$core$_EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6217 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__6221__i = 0, G__6221__a = new Array(arguments.length - 2);
        while (G__6221__i < G__6221__a.length) {
          G__6221__a[G__6221__i] = arguments[G__6221__i + 2];
          ++G__6221__i;
        }
        more = new cljs.core.IndexedSeq(G__6221__a, 0);
      }
      return G__6217__delegate.call(this, x, y, more);
    };
    G__6217.cljs$lang$maxFixedArity = 2;
    G__6217.cljs$lang$applyTo = function(arglist__6222) {
      var x = cljs.core.first(arglist__6222);
      arglist__6222 = cljs.core.next(arglist__6222);
      var y = cljs.core.first(arglist__6222);
      var more = cljs.core.rest(arglist__6222);
      return G__6217__delegate(x, y, more);
    };
    G__6217.cljs$core$IFn$_invoke$arity$variadic = G__6217__delegate;
    return G__6217;
  }();
  cljs$core$_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_EQ___1.call(this, x);
      case 2:
        return cljs$core$_EQ___2.call(this, x, y);
      default:
        var G__6223 = null;
        if (arguments.length > 2) {
          var G__6224__i = 0, G__6224__a = new Array(arguments.length - 2);
          while (G__6224__i < G__6224__a.length) {
            G__6224__a[G__6224__i] = arguments[G__6224__i + 2];
            ++G__6224__i;
          }
          G__6223 = new cljs.core.IndexedSeq(G__6224__a, 0);
        }
        return cljs$core$_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__6223);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_EQ_.cljs$lang$maxFixedArity = 2;
  cljs$core$_EQ_.cljs$lang$applyTo = cljs$core$_EQ___3.cljs$lang$applyTo;
  cljs$core$_EQ_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_EQ___1;
  cljs$core$_EQ_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_EQ___2;
  cljs$core$_EQ_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_EQ_;
}();
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function cljs$core$__GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function cljs$core$es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = function() {
      var G__6225 = self__.iter;
      return cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(G__6225) : cljs.core.es6_iterator_seq.call(null, G__6225);
    }();
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function cljs$core$__GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function cljs$core$es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function cljs$core$mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function cljs$core$hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__6226 = n + 1;
      var G__6227 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__6228 = cljs.core.next(coll__$1);
      n = G__6226;
      hash_code = G__6227;
      coll__$1 = G__6228;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function cljs$core$hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__6229 = n + 1;
      var G__6230 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__6231 = cljs.core.next(coll__$1);
      n = G__6229;
      hash_code = G__6230;
      coll__$1 = G__6231;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IComparable$ = true;
Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  var G__6232 = this$__$1.valueOf();
  var G__6233 = other.valueOf();
  return goog.array.defaultCompare(G__6232, G__6233);
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.valueOf() === other.valueOf();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  var G__6234 = o;
  return goog.getUid(G__6234);
};
cljs.core.inc = function cljs$core$inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function cljs$core$__GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function cljs$core$reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function cljs$core$reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function cljs$core$ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function cljs$core$unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    var G__6236 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__6236) : cljs.core.deref.call(null, G__6236);
  } else {
    return x;
  }
};
cljs.core.deref = function cljs$core$deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function() {
  var cljs$core$ci_reduce = null;
  var cljs$core$ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count(cicoll);
    if (cnt === 0) {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    } else {
      var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = function() {
            var G__6243 = val;
            var G__6244 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6243, G__6244) : f.call(null, G__6243, G__6244);
          }();
          if (cljs.core.reduced_QMARK_(nval)) {
            return cljs.core.deref(nval);
          } else {
            var G__6249 = nval;
            var G__6250 = n + 1;
            val = G__6249;
            n = G__6250;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var cljs$core$ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count(cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__6245 = val__$1;
          var G__6246 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6245, G__6246) : f.call(null, G__6245, G__6246);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__6251 = nval;
          var G__6252 = n + 1;
          val__$1 = G__6251;
          n = G__6252;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var cljs$core$ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count(cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__6247 = val__$1;
          var G__6248 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6247, G__6248) : f.call(null, G__6247, G__6248);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__6253 = nval;
          var G__6254 = n + 1;
          val__$1 = G__6253;
          n = G__6254;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  cljs$core$ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return cljs$core$ci_reduce__2.call(this, cicoll, f);
      case 3:
        return cljs$core$ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return cljs$core$ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$ci_reduce.cljs$core$IFn$_invoke$arity$2 = cljs$core$ci_reduce__2;
  cljs$core$ci_reduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$ci_reduce__3;
  cljs$core$ci_reduce.cljs$core$IFn$_invoke$arity$4 = cljs$core$ci_reduce__4;
  return cljs$core$ci_reduce;
}();
cljs.core.array_reduce = function() {
  var cljs$core$array_reduce = null;
  var cljs$core$array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = function() {
            var G__6261 = val;
            var G__6262 = arr[n];
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6261, G__6262) : f.call(null, G__6261, G__6262);
          }();
          if (cljs.core.reduced_QMARK_(nval)) {
            return cljs.core.deref(nval);
          } else {
            var G__6267 = nval;
            var G__6268 = n + 1;
            val = G__6267;
            n = G__6268;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var cljs$core$array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__6263 = val__$1;
          var G__6264 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6263, G__6264) : f.call(null, G__6263, G__6264);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__6269 = nval;
          var G__6270 = n + 1;
          val__$1 = G__6269;
          n = G__6270;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var cljs$core$array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__6265 = val__$1;
          var G__6266 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6265, G__6266) : f.call(null, G__6265, G__6266);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__6271 = nval;
          var G__6272 = n + 1;
          val__$1 = G__6271;
          n = G__6272;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  cljs$core$array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return cljs$core$array_reduce__2.call(this, arr, f);
      case 3:
        return cljs$core$array_reduce__3.call(this, arr, f, val);
      case 4:
        return cljs$core$array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$array_reduce.cljs$core$IFn$_invoke$arity$2 = cljs$core$array_reduce__2;
  cljs$core$array_reduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$array_reduce__3;
  cljs$core$array_reduce.cljs$core$IFn$_invoke$arity$4 = cljs$core$array_reduce__4;
  return cljs$core$array_reduce;
}();
cljs.core.counted_QMARK_ = function cljs$core$counted_QMARK_(x) {
  var G__6274 = x;
  if (G__6274) {
    var bit__4796__auto__ = G__6274.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4796__auto__ || G__6274.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__6274.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__6274);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__6274);
  }
};
cljs.core.indexed_QMARK_ = function cljs$core$indexed_QMARK_(x) {
  var G__6276 = x;
  if (G__6276) {
    var bit__4796__auto__ = G__6276.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4796__auto__ || G__6276.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__6276.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__6276);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__6276);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function cljs$core$__GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__6277 = coll__$1;
  var G__6278 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__6277, G__6278) : cljs.core.equiv_sequential.call(null, G__6277, G__6278);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__6279 = o;
  var G__6280 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__6279, G__6280) : cljs.core.cons.call(null, G__6279, G__6280);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function cljs$core$__GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.prim_seq = function() {
  var cljs$core$prim_seq = null;
  var cljs$core$prim_seq__1 = function(prim) {
    return cljs$core$prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
  };
  var cljs$core$prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  cljs$core$prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return cljs$core$prim_seq__1.call(this, prim);
      case 2:
        return cljs$core$prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$prim_seq.cljs$core$IFn$_invoke$arity$1 = cljs$core$prim_seq__1;
  cljs$core$prim_seq.cljs$core$IFn$_invoke$arity$2 = cljs$core$prim_seq__2;
  return cljs$core$prim_seq;
}();
cljs.core.array_seq = function() {
  var cljs$core$array_seq = null;
  var cljs$core$array_seq__1 = function(array) {
    return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
  };
  var cljs$core$array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
  };
  cljs$core$array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return cljs$core$array_seq__1.call(this, array);
      case 2:
        return cljs$core$array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$array_seq.cljs$core$IFn$_invoke$arity$1 = cljs$core$array_seq__1;
  cljs$core$array_seq.cljs$core$IFn$_invoke$arity$2 = cljs$core$array_seq__2;
  return cljs$core$array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__6283 = coll__$1;
  var G__6284 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__6283, G__6284) : cljs.core.equiv_sequential.call(null, G__6283, G__6284);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__6285 = cljs.core.List.EMPTY;
  var G__6286 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__6285, G__6286) : cljs.core.with_meta.call(null, G__6285, G__6286);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  var G__6287 = f;
  var G__6288 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(G__6287, G__6288) : cljs.core.seq_reduce.call(null, G__6287, G__6288);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  var G__6289 = f;
  var G__6290 = start;
  var G__6291 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(G__6289, G__6290, G__6291) : cljs.core.seq_reduce.call(null, G__6289, G__6290, G__6291);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__6292 = o;
  var G__6293 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__6292, G__6293) : cljs.core.cons.call(null, G__6292, G__6293);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function cljs$core$__GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.second = function cljs$core$second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function cljs$core$ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function cljs$core$nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function cljs$core$fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function cljs$core$nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function cljs$core$last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__6294 = sn;
      s = G__6294;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var cljs$core$conj = null;
  var cljs$core$conj__0 = function() {
    return cljs.core.PersistentVector.EMPTY;
  };
  var cljs$core$conj__1 = function(coll) {
    return coll;
  };
  var cljs$core$conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj(coll, x);
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, x);
    }
  };
  var cljs$core$conj__3 = function() {
    var G__6299__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__6300 = cljs$core$conj.cljs$core$IFn$_invoke$arity$2(coll, x);
          var G__6301 = cljs.core.first(xs);
          var G__6302 = cljs.core.next(xs);
          coll = G__6300;
          x = G__6301;
          xs = G__6302;
          continue;
        } else {
          return cljs$core$conj.cljs$core$IFn$_invoke$arity$2(coll, x);
        }
        break;
      }
    };
    var G__6299 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        var G__6303__i = 0, G__6303__a = new Array(arguments.length - 2);
        while (G__6303__i < G__6303__a.length) {
          G__6303__a[G__6303__i] = arguments[G__6303__i + 2];
          ++G__6303__i;
        }
        xs = new cljs.core.IndexedSeq(G__6303__a, 0);
      }
      return G__6299__delegate.call(this, coll, x, xs);
    };
    G__6299.cljs$lang$maxFixedArity = 2;
    G__6299.cljs$lang$applyTo = function(arglist__6304) {
      var coll = cljs.core.first(arglist__6304);
      arglist__6304 = cljs.core.next(arglist__6304);
      var x = cljs.core.first(arglist__6304);
      var xs = cljs.core.rest(arglist__6304);
      return G__6299__delegate(coll, x, xs);
    };
    G__6299.cljs$core$IFn$_invoke$arity$variadic = G__6299__delegate;
    return G__6299;
  }();
  cljs$core$conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$conj__0.call(this);
      case 1:
        return cljs$core$conj__1.call(this, coll);
      case 2:
        return cljs$core$conj__2.call(this, coll, x);
      default:
        var G__6305 = null;
        if (arguments.length > 2) {
          var G__6306__i = 0, G__6306__a = new Array(arguments.length - 2);
          while (G__6306__i < G__6306__a.length) {
            G__6306__a[G__6306__i] = arguments[G__6306__i + 2];
            ++G__6306__i;
          }
          G__6305 = new cljs.core.IndexedSeq(G__6306__a, 0);
        }
        return cljs$core$conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, G__6305);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$conj.cljs$lang$maxFixedArity = 2;
  cljs$core$conj.cljs$lang$applyTo = cljs$core$conj__3.cljs$lang$applyTo;
  cljs$core$conj.cljs$core$IFn$_invoke$arity$0 = cljs$core$conj__0;
  cljs$core$conj.cljs$core$IFn$_invoke$arity$1 = cljs$core$conj__1;
  cljs$core$conj.cljs$core$IFn$_invoke$arity$2 = cljs$core$conj__2;
  cljs$core$conj.cljs$core$IFn$_invoke$arity$variadic = cljs$core$conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$conj;
}();
cljs.core.empty = function cljs$core$empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function cljs$core$accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__6307 = cljs.core.next(s);
      var G__6308 = acc + 1;
      s = G__6307;
      acc = G__6308;
      continue;
    }
    break;
  }
};
cljs.core.count = function cljs$core$count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__6310 = coll;
      if (G__6310) {
        var bit__4789__auto__ = G__6310.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4789__auto__ || G__6310.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, coll)) {
            return cljs.core._count(coll);
          } else {
            return cljs.core.accumulating_seq_count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var cljs$core$linear_traversal_nth = null;
  var cljs$core$linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq(coll)) {
            return cljs.core.first(coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_(coll)) {
            return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
          } else {
            if (cljs.core.seq(coll)) {
              var G__6311 = cljs.core.next(coll);
              var G__6312 = n - 1;
              coll = G__6311;
              n = G__6312;
              continue;
            } else {
              throw new Error("Index out of bounds");
            }
          }
        }
      }
      break;
    }
  };
  var cljs$core$linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq(coll)) {
            return cljs.core.first(coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_(coll)) {
            return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
          } else {
            if (cljs.core.seq(coll)) {
              var G__6313 = cljs.core.next(coll);
              var G__6314 = n - 1;
              var G__6315 = not_found;
              coll = G__6313;
              n = G__6314;
              not_found = G__6315;
              continue;
            } else {
              return not_found;
            }
          }
        }
      }
      break;
    }
  };
  cljs$core$linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return cljs$core$linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = cljs$core$linear_traversal_nth__2;
  cljs$core$linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = cljs$core$linear_traversal_nth__3;
  return cljs$core$linear_traversal_nth;
}();
cljs.core.nth = function() {
  var cljs$core$nth = null;
  var cljs$core$nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__6320 = coll;
          if (G__6320) {
            var bit__4789__auto__ = G__6320.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4789__auto__ || G__6320.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
        } else {
          if (cljs.core.array_QMARK_(coll)) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                if (function() {
                  var G__6321 = coll;
                  if (G__6321) {
                    var bit__4796__auto__ = G__6321.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4796__auto__ || G__6321.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__6321.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6321);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6321);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  var cljs$core$nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__6322 = coll;
          if (G__6322) {
            var bit__4789__auto__ = G__6322.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4789__auto__ || G__6322.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
        } else {
          if (cljs.core.array_QMARK_(coll)) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                if (function() {
                  var G__6323 = coll;
                  if (G__6323) {
                    var bit__4796__auto__ = G__6323.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4796__auto__ || G__6323.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__6323.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6323);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6323);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  cljs$core$nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$nth__2.call(this, coll, n);
      case 3:
        return cljs$core$nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$nth.cljs$core$IFn$_invoke$arity$2 = cljs$core$nth__2;
  cljs$core$nth.cljs$core$IFn$_invoke$arity$3 = cljs$core$nth__3;
  return cljs$core$nth;
}();
cljs.core.nthrest = function cljs$core$nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__6324 = n__$1 - 1;
      var G__6325 = cljs.core.rest(xs);
      n__$1 = G__6324;
      xs = G__6325;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function() {
  var cljs$core$get = null;
  var cljs$core$get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__6328 = o;
        if (G__6328) {
          var bit__4789__auto__ = G__6328.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4789__auto__ || G__6328.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return o.cljs$core$ILookup$_lookup$arity$2(null, k);
      } else {
        if (cljs.core.array_QMARK_(o)) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var cljs$core$get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__6329 = o;
        if (G__6329) {
          var bit__4789__auto__ = G__6329.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4789__auto__ || G__6329.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
      } else {
        if (cljs.core.array_QMARK_(o)) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
            } else {
              return not_found;
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  cljs$core$get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$get__2.call(this, o, k);
      case 3:
        return cljs$core$get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$get.cljs$core$IFn$_invoke$arity$2 = cljs$core$get__2;
  cljs$core$get.cljs$core$IFn$_invoke$arity$3 = cljs$core$get__3;
  return cljs$core$get;
}();
cljs.core.assoc = function() {
  var cljs$core$assoc = null;
  var cljs$core$assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc(coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays([k], [v]);
    }
  };
  var cljs$core$assoc__4 = function() {
    var G__6333__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = cljs$core$assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__6334 = ret;
          var G__6335 = cljs.core.first(kvs);
          var G__6336 = cljs.core.second(kvs);
          var G__6337 = cljs.core.nnext(kvs);
          coll = G__6334;
          k = G__6335;
          v = G__6336;
          kvs = G__6337;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__6333 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        var G__6338__i = 0, G__6338__a = new Array(arguments.length - 3);
        while (G__6338__i < G__6338__a.length) {
          G__6338__a[G__6338__i] = arguments[G__6338__i + 3];
          ++G__6338__i;
        }
        kvs = new cljs.core.IndexedSeq(G__6338__a, 0);
      }
      return G__6333__delegate.call(this, coll, k, v, kvs);
    };
    G__6333.cljs$lang$maxFixedArity = 3;
    G__6333.cljs$lang$applyTo = function(arglist__6339) {
      var coll = cljs.core.first(arglist__6339);
      arglist__6339 = cljs.core.next(arglist__6339);
      var k = cljs.core.first(arglist__6339);
      arglist__6339 = cljs.core.next(arglist__6339);
      var v = cljs.core.first(arglist__6339);
      var kvs = cljs.core.rest(arglist__6339);
      return G__6333__delegate(coll, k, v, kvs);
    };
    G__6333.cljs$core$IFn$_invoke$arity$variadic = G__6333__delegate;
    return G__6333;
  }();
  cljs$core$assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return cljs$core$assoc__3.call(this, coll, k, v);
      default:
        var G__6340 = null;
        if (arguments.length > 3) {
          var G__6341__i = 0, G__6341__a = new Array(arguments.length - 3);
          while (G__6341__i < G__6341__a.length) {
            G__6341__a[G__6341__i] = arguments[G__6341__i + 3];
            ++G__6341__i;
          }
          G__6340 = new cljs.core.IndexedSeq(G__6341__a, 0);
        }
        return cljs$core$assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, G__6340);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$assoc.cljs$lang$maxFixedArity = 3;
  cljs$core$assoc.cljs$lang$applyTo = cljs$core$assoc__4.cljs$lang$applyTo;
  cljs$core$assoc.cljs$core$IFn$_invoke$arity$3 = cljs$core$assoc__3;
  cljs$core$assoc.cljs$core$IFn$_invoke$arity$variadic = cljs$core$assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$assoc;
}();
cljs.core.dissoc = function() {
  var cljs$core$dissoc = null;
  var cljs$core$dissoc__1 = function(coll) {
    return coll;
  };
  var cljs$core$dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc(coll, k);
    }
  };
  var cljs$core$dissoc__3 = function() {
    var G__6344__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = cljs$core$dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
          if (cljs.core.truth_(ks)) {
            var G__6345 = ret;
            var G__6346 = cljs.core.first(ks);
            var G__6347 = cljs.core.next(ks);
            coll = G__6345;
            k = G__6346;
            ks = G__6347;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__6344 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__6348__i = 0, G__6348__a = new Array(arguments.length - 2);
        while (G__6348__i < G__6348__a.length) {
          G__6348__a[G__6348__i] = arguments[G__6348__i + 2];
          ++G__6348__i;
        }
        ks = new cljs.core.IndexedSeq(G__6348__a, 0);
      }
      return G__6344__delegate.call(this, coll, k, ks);
    };
    G__6344.cljs$lang$maxFixedArity = 2;
    G__6344.cljs$lang$applyTo = function(arglist__6349) {
      var coll = cljs.core.first(arglist__6349);
      arglist__6349 = cljs.core.next(arglist__6349);
      var k = cljs.core.first(arglist__6349);
      var ks = cljs.core.rest(arglist__6349);
      return G__6344__delegate(coll, k, ks);
    };
    G__6344.cljs$core$IFn$_invoke$arity$variadic = G__6344__delegate;
    return G__6344;
  }();
  cljs$core$dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$dissoc__1.call(this, coll);
      case 2:
        return cljs$core$dissoc__2.call(this, coll, k);
      default:
        var G__6350 = null;
        if (arguments.length > 2) {
          var G__6351__i = 0, G__6351__a = new Array(arguments.length - 2);
          while (G__6351__i < G__6351__a.length) {
            G__6351__a[G__6351__i] = arguments[G__6351__i + 2];
            ++G__6351__i;
          }
          G__6350 = new cljs.core.IndexedSeq(G__6351__a, 0);
        }
        return cljs$core$dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, G__6350);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$dissoc.cljs$lang$maxFixedArity = 2;
  cljs$core$dissoc.cljs$lang$applyTo = cljs$core$dissoc__3.cljs$lang$applyTo;
  cljs$core$dissoc.cljs$core$IFn$_invoke$arity$1 = cljs$core$dissoc__1;
  cljs$core$dissoc.cljs$core$IFn$_invoke$arity$2 = cljs$core$dissoc__2;
  cljs$core$dissoc.cljs$core$IFn$_invoke$arity$variadic = cljs$core$dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$dissoc;
}();
cljs.core.fn_QMARK_ = function cljs$core$fn_QMARK_(f) {
  var or__4122__auto__ = function() {
    var G__6356 = f;
    return goog.isFunction(G__6356);
  }();
  if (cljs.core.truth_(or__4122__auto__)) {
    return or__4122__auto__;
  } else {
    var G__6357 = f;
    if (G__6357) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto____$1 = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto____$1)) {
          return or__4122__auto____$1;
        } else {
          return G__6357.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__6357.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__6357);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__6357);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.prototype.call = function() {
  var G__6823 = null;
  var G__6823__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__6823__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6359 = a;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__6359) : self__.afn.call(null, G__6359);
  };
  var G__6823__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6360 = a;
    var G__6361 = b;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__6360, G__6361) : self__.afn.call(null, G__6360, G__6361);
  };
  var G__6823__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6362 = a;
    var G__6363 = b;
    var G__6364 = c;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__6362, G__6363, G__6364) : self__.afn.call(null, G__6362, G__6363, G__6364);
  };
  var G__6823__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6365 = a;
    var G__6366 = b;
    var G__6367 = c;
    var G__6368 = d;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__6365, G__6366, G__6367, G__6368) : self__.afn.call(null, G__6365, G__6366, G__6367, G__6368);
  };
  var G__6823__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6369 = a;
    var G__6370 = b;
    var G__6371 = c;
    var G__6372 = d;
    var G__6373 = e;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__6369, G__6370, G__6371, G__6372, G__6373) : self__.afn.call(null, G__6369, G__6370, G__6371, G__6372, G__6373);
  };
  var G__6823__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6374 = a;
    var G__6375 = b;
    var G__6376 = c;
    var G__6377 = d;
    var G__6378 = e;
    var G__6379 = f;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__6374, G__6375, G__6376, G__6377, G__6378, G__6379) : self__.afn.call(null, G__6374, G__6375, G__6376, G__6377, G__6378, G__6379);
  };
  var G__6823__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6380 = a;
    var G__6381 = b;
    var G__6382 = c;
    var G__6383 = d;
    var G__6384 = e;
    var G__6385 = f;
    var G__6386 = g;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__6380, G__6381, G__6382, G__6383, G__6384, G__6385, G__6386) : self__.afn.call(null, G__6380, G__6381, G__6382, G__6383, G__6384, G__6385, G__6386);
  };
  var G__6823__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6387 = a;
    var G__6388 = b;
    var G__6389 = c;
    var G__6390 = d;
    var G__6391 = e;
    var G__6392 = f;
    var G__6393 = g;
    var G__6394 = h;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__6387, G__6388, G__6389, G__6390, G__6391, G__6392, G__6393, G__6394) : self__.afn.call(null, G__6387, G__6388, G__6389, G__6390, G__6391, G__6392, G__6393, G__6394);
  };
  var G__6823__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6395 = a;
    var G__6396 = b;
    var G__6397 = c;
    var G__6398 = d;
    var G__6399 = e;
    var G__6400 = f;
    var G__6401 = g;
    var G__6402 = h;
    var G__6403 = i;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__6395, G__6396, G__6397, G__6398, G__6399, G__6400, G__6401, G__6402, G__6403) : self__.afn.call(null, G__6395, G__6396, G__6397, G__6398, G__6399, G__6400, G__6401, G__6402, G__6403);
  };
  var G__6823__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6404 = a;
    var G__6405 = b;
    var G__6406 = c;
    var G__6407 = d;
    var G__6408 = e;
    var G__6409 = f;
    var G__6410 = g;
    var G__6411 = h;
    var G__6412 = i;
    var G__6413 = j;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__6404, G__6405, G__6406, G__6407, G__6408, G__6409, G__6410, G__6411, G__6412, G__6413) : self__.afn.call(null, G__6404, G__6405, G__6406, G__6407, G__6408, G__6409, G__6410, G__6411, G__6412, G__6413);
  };
  var G__6823__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6414 = a;
    var G__6415 = b;
    var G__6416 = c;
    var G__6417 = d;
    var G__6418 = e;
    var G__6419 = f;
    var G__6420 = g;
    var G__6421 = h;
    var G__6422 = i;
    var G__6423 = j;
    var G__6424 = k;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__6414, G__6415, G__6416, G__6417, G__6418, G__6419, G__6420, G__6421, G__6422, G__6423, G__6424) : self__.afn.call(null, G__6414, G__6415, G__6416, G__6417, G__6418, G__6419, G__6420, G__6421, G__6422, G__6423, G__6424);
  };
  var G__6823__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6425 = a;
    var G__6426 = b;
    var G__6427 = c;
    var G__6428 = d;
    var G__6429 = e;
    var G__6430 = f;
    var G__6431 = g;
    var G__6432 = h;
    var G__6433 = i;
    var G__6434 = j;
    var G__6435 = k;
    var G__6436 = l;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__6425, G__6426, G__6427, G__6428, G__6429, G__6430, G__6431, G__6432, G__6433, G__6434, G__6435, G__6436) : self__.afn.call(null, G__6425, G__6426, G__6427, G__6428, G__6429, G__6430, G__6431, G__6432, G__6433, G__6434, G__6435, G__6436);
  };
  var G__6823__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6437 = a;
    var G__6438 = b;
    var G__6439 = c;
    var G__6440 = d;
    var G__6441 = e;
    var G__6442 = f;
    var G__6443 = g;
    var G__6444 = h;
    var G__6445 = i;
    var G__6446 = j;
    var G__6447 = k;
    var G__6448 = l;
    var G__6449 = m;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__6437, G__6438, G__6439, G__6440, G__6441, G__6442, G__6443, G__6444, G__6445, G__6446, G__6447, G__6448, G__6449) : self__.afn.call(null, G__6437, G__6438, G__6439, G__6440, G__6441, G__6442, G__6443, G__6444, G__6445, G__6446, G__6447, G__6448, G__6449);
  };
  var G__6823__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6450 = a;
    var G__6451 = b;
    var G__6452 = c;
    var G__6453 = d;
    var G__6454 = e;
    var G__6455 = f;
    var G__6456 = g;
    var G__6457 = h;
    var G__6458 = i;
    var G__6459 = j;
    var G__6460 = k;
    var G__6461 = l;
    var G__6462 = m;
    var G__6463 = n;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__6450, G__6451, G__6452, G__6453, G__6454, G__6455, G__6456, G__6457, G__6458, G__6459, G__6460, G__6461, G__6462, G__6463) : self__.afn.call(null, G__6450, G__6451, G__6452, G__6453, G__6454, G__6455, G__6456, G__6457, G__6458, G__6459, G__6460, G__6461, G__6462, G__6463);
  };
  var G__6823__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6464 = a;
    var G__6465 = b;
    var G__6466 = c;
    var G__6467 = d;
    var G__6468 = e;
    var G__6469 = f;
    var G__6470 = g;
    var G__6471 = h;
    var G__6472 = i;
    var G__6473 = j;
    var G__6474 = k;
    var G__6475 = l;
    var G__6476 = m;
    var G__6477 = n;
    var G__6478 = o;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__6464, G__6465, G__6466, G__6467, G__6468, G__6469, G__6470, G__6471, G__6472, G__6473, G__6474, G__6475, G__6476, G__6477, G__6478) : self__.afn.call(null, G__6464, G__6465, G__6466, G__6467, G__6468, G__6469, G__6470, G__6471, G__6472, G__6473, G__6474, G__6475, G__6476, G__6477, G__6478);
  };
  var G__6823__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6479 = a;
    var G__6480 = b;
    var G__6481 = c;
    var G__6482 = d;
    var G__6483 = e;
    var G__6484 = f;
    var G__6485 = g;
    var G__6486 = h;
    var G__6487 = i;
    var G__6488 = j;
    var G__6489 = k;
    var G__6490 = l;
    var G__6491 = m;
    var G__6492 = n;
    var G__6493 = o;
    var G__6494 = p;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__6479, G__6480, G__6481, G__6482, G__6483, G__6484, G__6485, G__6486, G__6487, G__6488, G__6489, G__6490, G__6491, G__6492, G__6493, G__6494) : self__.afn.call(null, G__6479, G__6480, G__6481, G__6482, G__6483, G__6484, G__6485, G__6486, G__6487, G__6488, G__6489, G__6490, G__6491, G__6492, G__6493, G__6494);
  };
  var G__6823__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6495 = a;
    var G__6496 = b;
    var G__6497 = c;
    var G__6498 = d;
    var G__6499 = e;
    var G__6500 = f;
    var G__6501 = g;
    var G__6502 = h;
    var G__6503 = i;
    var G__6504 = j;
    var G__6505 = k;
    var G__6506 = l;
    var G__6507 = m;
    var G__6508 = n;
    var G__6509 = o;
    var G__6510 = p;
    var G__6511 = q;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__6495, G__6496, G__6497, G__6498, G__6499, G__6500, G__6501, G__6502, G__6503, G__6504, G__6505, G__6506, G__6507, G__6508, G__6509, G__6510, G__6511) : self__.afn.call(null, G__6495, G__6496, G__6497, G__6498, G__6499, G__6500, G__6501, G__6502, G__6503, G__6504, G__6505, G__6506, G__6507, G__6508, G__6509, G__6510, G__6511);
  };
  var G__6823__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6512 = a;
    var G__6513 = b;
    var G__6514 = c;
    var G__6515 = d;
    var G__6516 = e;
    var G__6517 = f;
    var G__6518 = g;
    var G__6519 = h;
    var G__6520 = i;
    var G__6521 = j;
    var G__6522 = k;
    var G__6523 = l;
    var G__6524 = m;
    var G__6525 = n;
    var G__6526 = o;
    var G__6527 = p;
    var G__6528 = q;
    var G__6529 = r;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__6512, G__6513, G__6514, G__6515, G__6516, G__6517, G__6518, G__6519, G__6520, G__6521, G__6522, G__6523, G__6524, G__6525, G__6526, G__6527, G__6528, G__6529) : self__.afn.call(null, G__6512, G__6513, G__6514, G__6515, G__6516, G__6517, G__6518, G__6519, G__6520, G__6521, G__6522, G__6523, G__6524, G__6525, G__6526, G__6527, G__6528, G__6529);
  };
  var G__6823__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6530 = a;
    var G__6531 = b;
    var G__6532 = c;
    var G__6533 = d;
    var G__6534 = e;
    var G__6535 = f;
    var G__6536 = g;
    var G__6537 = h;
    var G__6538 = i;
    var G__6539 = j;
    var G__6540 = k;
    var G__6541 = l;
    var G__6542 = m;
    var G__6543 = n;
    var G__6544 = o;
    var G__6545 = p;
    var G__6546 = q;
    var G__6547 = r;
    var G__6548 = s;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__6530, G__6531, G__6532, G__6533, G__6534, G__6535, G__6536, G__6537, G__6538, G__6539, G__6540, G__6541, G__6542, G__6543, G__6544, G__6545, G__6546, G__6547, G__6548) : self__.afn.call(null, G__6530, G__6531, G__6532, G__6533, G__6534, G__6535, G__6536, G__6537, G__6538, G__6539, G__6540, G__6541, G__6542, G__6543, G__6544, G__6545, G__6546, G__6547, G__6548);
  };
  var G__6823__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6549 = a;
    var G__6550 = b;
    var G__6551 = c;
    var G__6552 = d;
    var G__6553 = e;
    var G__6554 = f;
    var G__6555 = g;
    var G__6556 = h;
    var G__6557 = i;
    var G__6558 = j;
    var G__6559 = k;
    var G__6560 = l;
    var G__6561 = m;
    var G__6562 = n;
    var G__6563 = o;
    var G__6564 = p;
    var G__6565 = q;
    var G__6566 = r;
    var G__6567 = s;
    var G__6568 = t;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__6549, G__6550, G__6551, G__6552, G__6553, G__6554, G__6555, G__6556, G__6557, G__6558, G__6559, G__6560, G__6561, G__6562, G__6563, G__6564, G__6565, G__6566, G__6567, G__6568) : self__.afn.call(null, G__6549, G__6550, G__6551, G__6552, G__6553, G__6554, G__6555, G__6556, G__6557, G__6558, G__6559, G__6560, G__6561, G__6562, G__6563, G__6564, G__6565, G__6566, G__6567, G__6568);
  };
  var G__6823__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6569 = self__.afn;
    var G__6570 = a;
    var G__6571 = b;
    var G__6572 = c;
    var G__6573 = d;
    var G__6574 = e;
    var G__6575 = f;
    var G__6576 = g;
    var G__6577 = h;
    var G__6578 = i;
    var G__6579 = j;
    var G__6580 = k;
    var G__6581 = l;
    var G__6582 = m;
    var G__6583 = n;
    var G__6584 = o;
    var G__6585 = p;
    var G__6586 = q;
    var G__6587 = r;
    var G__6588 = s;
    var G__6589 = t;
    var G__6590 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__6569, G__6570, G__6571, G__6572, G__6573, G__6574, G__6575, G__6576, G__6577, G__6578, G__6579, G__6580, G__6581, G__6582, G__6583, G__6584, G__6585, G__6586, G__6587, G__6588, G__6589, G__6590) : cljs.core.apply.call(null, G__6569, G__6570, G__6571, G__6572, G__6573, G__6574, G__6575, G__6576, G__6577, G__6578, G__6579, G__6580, G__6581, G__6582, G__6583, G__6584, G__6585, G__6586, G__6587, 
    G__6588, G__6589, G__6590);
  };
  G__6823 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__6823__1.call(this, self__);
      case 2:
        return G__6823__2.call(this, self__, a);
      case 3:
        return G__6823__3.call(this, self__, a, b);
      case 4:
        return G__6823__4.call(this, self__, a, b, c);
      case 5:
        return G__6823__5.call(this, self__, a, b, c, d);
      case 6:
        return G__6823__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__6823__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__6823__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__6823__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__6823__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__6823__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__6823__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__6823__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__6823__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__6823__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__6823__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__6823__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__6823__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__6823__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__6823__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__6823__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__6823__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6823.cljs$core$IFn$_invoke$arity$1 = G__6823__1;
  G__6823.cljs$core$IFn$_invoke$arity$2 = G__6823__2;
  G__6823.cljs$core$IFn$_invoke$arity$3 = G__6823__3;
  G__6823.cljs$core$IFn$_invoke$arity$4 = G__6823__4;
  G__6823.cljs$core$IFn$_invoke$arity$5 = G__6823__5;
  G__6823.cljs$core$IFn$_invoke$arity$6 = G__6823__6;
  G__6823.cljs$core$IFn$_invoke$arity$7 = G__6823__7;
  G__6823.cljs$core$IFn$_invoke$arity$8 = G__6823__8;
  G__6823.cljs$core$IFn$_invoke$arity$9 = G__6823__9;
  G__6823.cljs$core$IFn$_invoke$arity$10 = G__6823__10;
  G__6823.cljs$core$IFn$_invoke$arity$11 = G__6823__11;
  G__6823.cljs$core$IFn$_invoke$arity$12 = G__6823__12;
  G__6823.cljs$core$IFn$_invoke$arity$13 = G__6823__13;
  G__6823.cljs$core$IFn$_invoke$arity$14 = G__6823__14;
  G__6823.cljs$core$IFn$_invoke$arity$15 = G__6823__15;
  G__6823.cljs$core$IFn$_invoke$arity$16 = G__6823__16;
  G__6823.cljs$core$IFn$_invoke$arity$17 = G__6823__17;
  G__6823.cljs$core$IFn$_invoke$arity$18 = G__6823__18;
  G__6823.cljs$core$IFn$_invoke$arity$19 = G__6823__19;
  G__6823.cljs$core$IFn$_invoke$arity$20 = G__6823__20;
  G__6823.cljs$core$IFn$_invoke$arity$21 = G__6823__21;
  G__6823.cljs$core$IFn$_invoke$arity$22 = G__6823__22;
  return G__6823;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args6358) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args6358)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  var G__6591 = a;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__6591) : self__.afn.call(null, G__6591);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  var G__6592 = a;
  var G__6593 = b;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__6592, G__6593) : self__.afn.call(null, G__6592, G__6593);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  var G__6594 = a;
  var G__6595 = b;
  var G__6596 = c;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__6594, G__6595, G__6596) : self__.afn.call(null, G__6594, G__6595, G__6596);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  var G__6597 = a;
  var G__6598 = b;
  var G__6599 = c;
  var G__6600 = d;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__6597, G__6598, G__6599, G__6600) : self__.afn.call(null, G__6597, G__6598, G__6599, G__6600);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  var G__6601 = a;
  var G__6602 = b;
  var G__6603 = c;
  var G__6604 = d;
  var G__6605 = e;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__6601, G__6602, G__6603, G__6604, G__6605) : self__.afn.call(null, G__6601, G__6602, G__6603, G__6604, G__6605);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  var G__6606 = a;
  var G__6607 = b;
  var G__6608 = c;
  var G__6609 = d;
  var G__6610 = e;
  var G__6611 = f;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__6606, G__6607, G__6608, G__6609, G__6610, G__6611) : self__.afn.call(null, G__6606, G__6607, G__6608, G__6609, G__6610, G__6611);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  var G__6612 = a;
  var G__6613 = b;
  var G__6614 = c;
  var G__6615 = d;
  var G__6616 = e;
  var G__6617 = f;
  var G__6618 = g;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__6612, G__6613, G__6614, G__6615, G__6616, G__6617, G__6618) : self__.afn.call(null, G__6612, G__6613, G__6614, G__6615, G__6616, G__6617, G__6618);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  var G__6619 = a;
  var G__6620 = b;
  var G__6621 = c;
  var G__6622 = d;
  var G__6623 = e;
  var G__6624 = f;
  var G__6625 = g;
  var G__6626 = h;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__6619, G__6620, G__6621, G__6622, G__6623, G__6624, G__6625, G__6626) : self__.afn.call(null, G__6619, G__6620, G__6621, G__6622, G__6623, G__6624, G__6625, G__6626);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  var G__6627 = a;
  var G__6628 = b;
  var G__6629 = c;
  var G__6630 = d;
  var G__6631 = e;
  var G__6632 = f;
  var G__6633 = g;
  var G__6634 = h;
  var G__6635 = i;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__6627, G__6628, G__6629, G__6630, G__6631, G__6632, G__6633, G__6634, G__6635) : self__.afn.call(null, G__6627, G__6628, G__6629, G__6630, G__6631, G__6632, G__6633, G__6634, G__6635);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  var G__6636 = a;
  var G__6637 = b;
  var G__6638 = c;
  var G__6639 = d;
  var G__6640 = e;
  var G__6641 = f;
  var G__6642 = g;
  var G__6643 = h;
  var G__6644 = i;
  var G__6645 = j;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__6636, G__6637, G__6638, G__6639, G__6640, G__6641, G__6642, G__6643, G__6644, G__6645) : self__.afn.call(null, G__6636, G__6637, G__6638, G__6639, G__6640, G__6641, G__6642, G__6643, G__6644, G__6645);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  var G__6646 = a;
  var G__6647 = b;
  var G__6648 = c;
  var G__6649 = d;
  var G__6650 = e;
  var G__6651 = f;
  var G__6652 = g;
  var G__6653 = h;
  var G__6654 = i;
  var G__6655 = j;
  var G__6656 = k;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__6646, G__6647, G__6648, G__6649, G__6650, G__6651, G__6652, G__6653, G__6654, G__6655, G__6656) : self__.afn.call(null, G__6646, G__6647, G__6648, G__6649, G__6650, G__6651, G__6652, G__6653, G__6654, G__6655, G__6656);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  var G__6657 = a;
  var G__6658 = b;
  var G__6659 = c;
  var G__6660 = d;
  var G__6661 = e;
  var G__6662 = f;
  var G__6663 = g;
  var G__6664 = h;
  var G__6665 = i;
  var G__6666 = j;
  var G__6667 = k;
  var G__6668 = l;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__6657, G__6658, G__6659, G__6660, G__6661, G__6662, G__6663, G__6664, G__6665, G__6666, G__6667, G__6668) : self__.afn.call(null, G__6657, G__6658, G__6659, G__6660, G__6661, G__6662, G__6663, G__6664, G__6665, G__6666, G__6667, G__6668);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  var G__6669 = a;
  var G__6670 = b;
  var G__6671 = c;
  var G__6672 = d;
  var G__6673 = e;
  var G__6674 = f;
  var G__6675 = g;
  var G__6676 = h;
  var G__6677 = i;
  var G__6678 = j;
  var G__6679 = k;
  var G__6680 = l;
  var G__6681 = m;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__6669, G__6670, G__6671, G__6672, G__6673, G__6674, G__6675, G__6676, G__6677, G__6678, G__6679, G__6680, G__6681) : self__.afn.call(null, G__6669, G__6670, G__6671, G__6672, G__6673, G__6674, G__6675, G__6676, G__6677, G__6678, G__6679, G__6680, G__6681);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  var G__6682 = a;
  var G__6683 = b;
  var G__6684 = c;
  var G__6685 = d;
  var G__6686 = e;
  var G__6687 = f;
  var G__6688 = g;
  var G__6689 = h;
  var G__6690 = i;
  var G__6691 = j;
  var G__6692 = k;
  var G__6693 = l;
  var G__6694 = m;
  var G__6695 = n;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__6682, G__6683, G__6684, G__6685, G__6686, G__6687, G__6688, G__6689, G__6690, G__6691, G__6692, G__6693, G__6694, G__6695) : self__.afn.call(null, G__6682, G__6683, G__6684, G__6685, G__6686, G__6687, G__6688, G__6689, G__6690, G__6691, G__6692, G__6693, G__6694, G__6695);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  var G__6696 = a;
  var G__6697 = b;
  var G__6698 = c;
  var G__6699 = d;
  var G__6700 = e;
  var G__6701 = f;
  var G__6702 = g;
  var G__6703 = h;
  var G__6704 = i;
  var G__6705 = j;
  var G__6706 = k;
  var G__6707 = l;
  var G__6708 = m;
  var G__6709 = n;
  var G__6710 = o;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__6696, G__6697, G__6698, G__6699, G__6700, G__6701, G__6702, G__6703, G__6704, G__6705, G__6706, G__6707, G__6708, G__6709, G__6710) : self__.afn.call(null, G__6696, G__6697, G__6698, G__6699, G__6700, G__6701, G__6702, G__6703, G__6704, G__6705, G__6706, G__6707, G__6708, G__6709, G__6710);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  var G__6711 = a;
  var G__6712 = b;
  var G__6713 = c;
  var G__6714 = d;
  var G__6715 = e;
  var G__6716 = f;
  var G__6717 = g;
  var G__6718 = h;
  var G__6719 = i;
  var G__6720 = j;
  var G__6721 = k;
  var G__6722 = l;
  var G__6723 = m;
  var G__6724 = n;
  var G__6725 = o;
  var G__6726 = p;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__6711, G__6712, G__6713, G__6714, G__6715, G__6716, G__6717, G__6718, G__6719, G__6720, G__6721, G__6722, G__6723, G__6724, G__6725, G__6726) : self__.afn.call(null, G__6711, G__6712, G__6713, G__6714, G__6715, G__6716, G__6717, G__6718, G__6719, G__6720, G__6721, G__6722, G__6723, G__6724, G__6725, G__6726);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  var G__6727 = a;
  var G__6728 = b;
  var G__6729 = c;
  var G__6730 = d;
  var G__6731 = e;
  var G__6732 = f;
  var G__6733 = g;
  var G__6734 = h;
  var G__6735 = i;
  var G__6736 = j;
  var G__6737 = k;
  var G__6738 = l;
  var G__6739 = m;
  var G__6740 = n;
  var G__6741 = o;
  var G__6742 = p;
  var G__6743 = q;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__6727, G__6728, G__6729, G__6730, G__6731, G__6732, G__6733, G__6734, G__6735, G__6736, G__6737, G__6738, G__6739, G__6740, G__6741, G__6742, G__6743) : self__.afn.call(null, G__6727, G__6728, G__6729, G__6730, G__6731, G__6732, G__6733, G__6734, G__6735, G__6736, G__6737, G__6738, G__6739, G__6740, G__6741, G__6742, G__6743);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  var G__6744 = a;
  var G__6745 = b;
  var G__6746 = c;
  var G__6747 = d;
  var G__6748 = e;
  var G__6749 = f;
  var G__6750 = g;
  var G__6751 = h;
  var G__6752 = i;
  var G__6753 = j;
  var G__6754 = k;
  var G__6755 = l;
  var G__6756 = m;
  var G__6757 = n;
  var G__6758 = o;
  var G__6759 = p;
  var G__6760 = q;
  var G__6761 = r;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__6744, G__6745, G__6746, G__6747, G__6748, G__6749, G__6750, G__6751, G__6752, G__6753, G__6754, G__6755, G__6756, G__6757, G__6758, G__6759, G__6760, G__6761) : self__.afn.call(null, G__6744, G__6745, G__6746, G__6747, G__6748, G__6749, G__6750, G__6751, G__6752, G__6753, G__6754, G__6755, G__6756, G__6757, G__6758, G__6759, G__6760, G__6761);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  var G__6762 = a;
  var G__6763 = b;
  var G__6764 = c;
  var G__6765 = d;
  var G__6766 = e;
  var G__6767 = f;
  var G__6768 = g;
  var G__6769 = h;
  var G__6770 = i;
  var G__6771 = j;
  var G__6772 = k;
  var G__6773 = l;
  var G__6774 = m;
  var G__6775 = n;
  var G__6776 = o;
  var G__6777 = p;
  var G__6778 = q;
  var G__6779 = r;
  var G__6780 = s;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__6762, G__6763, G__6764, G__6765, G__6766, G__6767, G__6768, G__6769, G__6770, G__6771, G__6772, G__6773, G__6774, G__6775, G__6776, G__6777, G__6778, G__6779, G__6780) : self__.afn.call(null, G__6762, G__6763, G__6764, G__6765, G__6766, G__6767, G__6768, G__6769, G__6770, G__6771, G__6772, G__6773, G__6774, G__6775, G__6776, G__6777, G__6778, G__6779, G__6780);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  var G__6781 = a;
  var G__6782 = b;
  var G__6783 = c;
  var G__6784 = d;
  var G__6785 = e;
  var G__6786 = f;
  var G__6787 = g;
  var G__6788 = h;
  var G__6789 = i;
  var G__6790 = j;
  var G__6791 = k;
  var G__6792 = l;
  var G__6793 = m;
  var G__6794 = n;
  var G__6795 = o;
  var G__6796 = p;
  var G__6797 = q;
  var G__6798 = r;
  var G__6799 = s;
  var G__6800 = t;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__6781, G__6782, G__6783, G__6784, G__6785, G__6786, G__6787, G__6788, G__6789, G__6790, G__6791, G__6792, G__6793, G__6794, G__6795, G__6796, G__6797, G__6798, G__6799, G__6800) : self__.afn.call(null, G__6781, G__6782, G__6783, G__6784, G__6785, G__6786, G__6787, G__6788, G__6789, G__6790, G__6791, G__6792, G__6793, G__6794, G__6795, G__6796, G__6797, G__6798, G__6799, G__6800);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__6801 = self__.afn;
  var G__6802 = a;
  var G__6803 = b;
  var G__6804 = c;
  var G__6805 = d;
  var G__6806 = e;
  var G__6807 = f;
  var G__6808 = g;
  var G__6809 = h;
  var G__6810 = i;
  var G__6811 = j;
  var G__6812 = k;
  var G__6813 = l;
  var G__6814 = m;
  var G__6815 = n;
  var G__6816 = o;
  var G__6817 = p;
  var G__6818 = q;
  var G__6819 = r;
  var G__6820 = s;
  var G__6821 = t;
  var G__6822 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__6801, G__6802, G__6803, G__6804, G__6805, G__6806, G__6807, G__6808, G__6809, G__6810, G__6811, G__6812, G__6813, G__6814, G__6815, G__6816, G__6817, G__6818, G__6819, G__6820, G__6821, G__6822) : cljs.core.apply.call(null, G__6801, G__6802, G__6803, G__6804, G__6805, G__6806, G__6807, G__6808, G__6809, G__6810, G__6811, G__6812, G__6813, G__6814, G__6815, G__6816, G__6817, G__6818, G__6819, 
  G__6820, G__6821, G__6822);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function cljs$core$__GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function cljs$core$with_meta(o, meta) {
  if (cljs.core.fn_QMARK_(o) && !function() {
    var G__6827 = o;
    if (G__6827) {
      var bit__4796__auto__ = G__6827.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4796__auto__ || G__6827.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__6827.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__6827);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__6827);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function cljs$core$meta(o) {
  if (function() {
    var and__4110__auto__ = !(o == null);
    if (and__4110__auto__) {
      var G__6831 = o;
      if (G__6831) {
        var bit__4796__auto__ = G__6831.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4796__auto__ || G__6831.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__6831.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__6831);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__6831);
      }
    } else {
      return and__4110__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function cljs$core$peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function cljs$core$pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function() {
  var cljs$core$disj = null;
  var cljs$core$disj__1 = function(coll) {
    return coll;
  };
  var cljs$core$disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin(coll, k);
    }
  };
  var cljs$core$disj__3 = function() {
    var G__6834__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = cljs$core$disj.cljs$core$IFn$_invoke$arity$2(coll, k);
          if (cljs.core.truth_(ks)) {
            var G__6835 = ret;
            var G__6836 = cljs.core.first(ks);
            var G__6837 = cljs.core.next(ks);
            coll = G__6835;
            k = G__6836;
            ks = G__6837;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__6834 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__6838__i = 0, G__6838__a = new Array(arguments.length - 2);
        while (G__6838__i < G__6838__a.length) {
          G__6838__a[G__6838__i] = arguments[G__6838__i + 2];
          ++G__6838__i;
        }
        ks = new cljs.core.IndexedSeq(G__6838__a, 0);
      }
      return G__6834__delegate.call(this, coll, k, ks);
    };
    G__6834.cljs$lang$maxFixedArity = 2;
    G__6834.cljs$lang$applyTo = function(arglist__6839) {
      var coll = cljs.core.first(arglist__6839);
      arglist__6839 = cljs.core.next(arglist__6839);
      var k = cljs.core.first(arglist__6839);
      var ks = cljs.core.rest(arglist__6839);
      return G__6834__delegate(coll, k, ks);
    };
    G__6834.cljs$core$IFn$_invoke$arity$variadic = G__6834__delegate;
    return G__6834;
  }();
  cljs$core$disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$disj__1.call(this, coll);
      case 2:
        return cljs$core$disj__2.call(this, coll, k);
      default:
        var G__6840 = null;
        if (arguments.length > 2) {
          var G__6841__i = 0, G__6841__a = new Array(arguments.length - 2);
          while (G__6841__i < G__6841__a.length) {
            G__6841__a[G__6841__i] = arguments[G__6841__i + 2];
            ++G__6841__i;
          }
          G__6840 = new cljs.core.IndexedSeq(G__6841__a, 0);
        }
        return cljs$core$disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, G__6840);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$disj.cljs$lang$maxFixedArity = 2;
  cljs$core$disj.cljs$lang$applyTo = cljs$core$disj__3.cljs$lang$applyTo;
  cljs$core$disj.cljs$core$IFn$_invoke$arity$1 = cljs$core$disj__1;
  cljs$core$disj.cljs$core$IFn$_invoke$arity$2 = cljs$core$disj__2;
  cljs$core$disj.cljs$core$IFn$_invoke$arity$variadic = cljs$core$disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$disj;
}();
cljs.core.empty_QMARK_ = function cljs$core$empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function cljs$core$coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__6843 = x;
    if (G__6843) {
      var bit__4796__auto__ = G__6843.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4796__auto__ || G__6843.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__6843.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__6843);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__6843);
    }
  }
};
cljs.core.set_QMARK_ = function cljs$core$set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__6845 = x;
    if (G__6845) {
      var bit__4796__auto__ = G__6845.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4796__auto__ || G__6845.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__6845.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__6845);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__6845);
    }
  }
};
cljs.core.associative_QMARK_ = function cljs$core$associative_QMARK_(x) {
  var G__6847 = x;
  if (G__6847) {
    var bit__4796__auto__ = G__6847.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4796__auto__ || G__6847.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__6847.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__6847);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__6847);
  }
};
cljs.core.sequential_QMARK_ = function cljs$core$sequential_QMARK_(x) {
  var G__6849 = x;
  if (G__6849) {
    var bit__4796__auto__ = G__6849.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4796__auto__ || G__6849.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__6849.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__6849);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__6849);
  }
};
cljs.core.sorted_QMARK_ = function cljs$core$sorted_QMARK_(x) {
  var G__6851 = x;
  if (G__6851) {
    var bit__4796__auto__ = G__6851.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4796__auto__ || G__6851.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__6851.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__6851);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__6851);
  }
};
cljs.core.reduceable_QMARK_ = function cljs$core$reduceable_QMARK_(x) {
  var G__6853 = x;
  if (G__6853) {
    var bit__4796__auto__ = G__6853.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4796__auto__ || G__6853.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__6853.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__6853);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__6853);
  }
};
cljs.core.map_QMARK_ = function cljs$core$map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__6855 = x;
    if (G__6855) {
      var bit__4796__auto__ = G__6855.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4796__auto__ || G__6855.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__6855.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__6855);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__6855);
    }
  }
};
cljs.core.vector_QMARK_ = function cljs$core$vector_QMARK_(x) {
  var G__6857 = x;
  if (G__6857) {
    var bit__4796__auto__ = G__6857.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4796__auto__ || G__6857.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__6857.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__6857);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__6857);
  }
};
cljs.core.chunked_seq_QMARK_ = function cljs$core$chunked_seq_QMARK_(x) {
  var G__6859 = x;
  if (G__6859) {
    var bit__4789__auto__ = G__6859.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4789__auto__ || G__6859.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var cljs$core$js_obj = null;
  var cljs$core$js_obj__0 = function() {
    var obj6865 = {};
    return obj6865;
  };
  var cljs$core$js_obj__1 = function() {
    var G__6868__delegate = function(keyvals) {
      var G__6866 = goog.object.create;
      var G__6867 = keyvals;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(G__6866, G__6867) : cljs.core.apply.call(null, G__6866, G__6867);
    };
    var G__6868 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        var G__6869__i = 0, G__6869__a = new Array(arguments.length - 0);
        while (G__6869__i < G__6869__a.length) {
          G__6869__a[G__6869__i] = arguments[G__6869__i + 0];
          ++G__6869__i;
        }
        keyvals = new cljs.core.IndexedSeq(G__6869__a, 0);
      }
      return G__6868__delegate.call(this, keyvals);
    };
    G__6868.cljs$lang$maxFixedArity = 0;
    G__6868.cljs$lang$applyTo = function(arglist__6870) {
      var keyvals = cljs.core.seq(arglist__6870);
      return G__6868__delegate(keyvals);
    };
    G__6868.cljs$core$IFn$_invoke$arity$variadic = G__6868__delegate;
    return G__6868;
  }();
  cljs$core$js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$js_obj__0.call(this);
      default:
        var G__6871 = null;
        if (arguments.length > 0) {
          var G__6872__i = 0, G__6872__a = new Array(arguments.length - 0);
          while (G__6872__i < G__6872__a.length) {
            G__6872__a[G__6872__i] = arguments[G__6872__i + 0];
            ++G__6872__i;
          }
          G__6871 = new cljs.core.IndexedSeq(G__6872__a, 0);
        }
        return cljs$core$js_obj__1.cljs$core$IFn$_invoke$arity$variadic(G__6871);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$js_obj.cljs$lang$maxFixedArity = 0;
  cljs$core$js_obj.cljs$lang$applyTo = cljs$core$js_obj__1.cljs$lang$applyTo;
  cljs$core$js_obj.cljs$core$IFn$_invoke$arity$0 = cljs$core$js_obj__0;
  cljs$core$js_obj.cljs$core$IFn$_invoke$arity$variadic = cljs$core$js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$js_obj;
}();
cljs.core.js_keys = function cljs$core$js_keys(obj) {
  var keys = [];
  var G__6875_6877 = obj;
  var G__6876_6878 = function(G__6875_6877, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__6875_6877, keys);
  goog.object.forEach(G__6875_6877, G__6876_6878);
  return keys;
};
cljs.core.js_delete = function cljs$core$js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function cljs$core$array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__6879 = i__$1 + 1;
      var G__6880 = j__$1 + 1;
      var G__6881 = len__$1 - 1;
      i__$1 = G__6879;
      j__$1 = G__6880;
      len__$1 = G__6881;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function cljs$core$array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__6882 = i__$1 - 1;
      var G__6883 = j__$1 - 1;
      var G__6884 = len__$1 - 1;
      i__$1 = G__6882;
      j__$1 = G__6883;
      len__$1 = G__6884;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj6886 = {};
  return obj6886;
}();
cljs.core.false_QMARK_ = function cljs$core$false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function cljs$core$true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function cljs$core$undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function cljs$core$seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__6888 = s;
    if (G__6888) {
      var bit__4796__auto__ = G__6888.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4796__auto__ || G__6888.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__6888.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6888);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6888);
    }
  }
};
cljs.core.seqable_QMARK_ = function cljs$core$seqable_QMARK_(s) {
  var G__6890 = s;
  if (G__6890) {
    var bit__4796__auto__ = G__6890.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4796__auto__ || G__6890.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__6890.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__6890);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__6890);
  }
};
cljs.core.boolean$ = function cljs$core$boolean(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function cljs$core$ifn_QMARK_(f) {
  var or__4122__auto__ = cljs.core.fn_QMARK_(f);
  if (or__4122__auto__) {
    return or__4122__auto__;
  } else {
    var G__6894 = f;
    if (G__6894) {
      var bit__4796__auto__ = G__6894.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4796__auto__ || G__6894.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__6894.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__6894);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__6894);
    }
  }
};
cljs.core.integer_QMARK_ = function cljs$core$integer_QMARK_(n) {
  return typeof n === "number" && cljs.core.not(function() {
    var G__6907 = n;
    return isNaN(G__6907);
  }()) && !(n === Infinity) && function() {
    var G__6908 = n;
    return parseFloat(G__6908);
  }() === function() {
    var G__6909 = n;
    var G__6910 = 10;
    return parseInt(G__6909, G__6910);
  }();
};
cljs.core.contains_QMARK_ = function cljs$core$contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function cljs$core$find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var cljs$core$distinct_QMARK_ = null;
  var cljs$core$distinct_QMARK___1 = function(x) {
    return true;
  };
  var cljs$core$distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
  };
  var cljs$core$distinct_QMARK___3 = function() {
    var G__6911__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first(xs);
          var etc = cljs.core.next(xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_(s, x__$1)) {
              return false;
            } else {
              var G__6912 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
              var G__6913 = etc;
              s = G__6912;
              xs = G__6913;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__6911 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__6914__i = 0, G__6914__a = new Array(arguments.length - 2);
        while (G__6914__i < G__6914__a.length) {
          G__6914__a[G__6914__i] = arguments[G__6914__i + 2];
          ++G__6914__i;
        }
        more = new cljs.core.IndexedSeq(G__6914__a, 0);
      }
      return G__6911__delegate.call(this, x, y, more);
    };
    G__6911.cljs$lang$maxFixedArity = 2;
    G__6911.cljs$lang$applyTo = function(arglist__6915) {
      var x = cljs.core.first(arglist__6915);
      arglist__6915 = cljs.core.next(arglist__6915);
      var y = cljs.core.first(arglist__6915);
      var more = cljs.core.rest(arglist__6915);
      return G__6911__delegate(x, y, more);
    };
    G__6911.cljs$core$IFn$_invoke$arity$variadic = G__6911__delegate;
    return G__6911;
  }();
  cljs$core$distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$distinct_QMARK___1.call(this, x);
      case 2:
        return cljs$core$distinct_QMARK___2.call(this, x, y);
      default:
        var G__6916 = null;
        if (arguments.length > 2) {
          var G__6917__i = 0, G__6917__a = new Array(arguments.length - 2);
          while (G__6917__i < G__6917__a.length) {
            G__6917__a[G__6917__i] = arguments[G__6917__i + 2];
            ++G__6917__i;
          }
          G__6916 = new cljs.core.IndexedSeq(G__6917__a, 0);
        }
        return cljs$core$distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__6916);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  cljs$core$distinct_QMARK_.cljs$lang$applyTo = cljs$core$distinct_QMARK___3.cljs$lang$applyTo;
  cljs$core$distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = cljs$core$distinct_QMARK___1;
  cljs$core$distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = cljs$core$distinct_QMARK___2;
  cljs$core$distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$distinct_QMARK_;
}();
cljs.core.compare = function cljs$core$compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type(x) === cljs.core.type(y)) {
          if (function() {
            var G__6921 = x;
            if (G__6921) {
              var bit__4789__auto__ = G__6921.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4789__auto__ || G__6921.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return x.cljs$core$IComparable$_compare$arity$2(null, y);
          } else {
            var G__6922 = x;
            var G__6923 = y;
            return goog.array.defaultCompare(G__6922, G__6923);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var cljs$core$compare_indexed = null;
  var cljs$core$compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count(xs);
    var yl = cljs.core.count(ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        return cljs$core$compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  };
  var cljs$core$compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
      if (d === 0 && n + 1 < len) {
        var G__6928 = xs;
        var G__6929 = ys;
        var G__6930 = len;
        var G__6931 = n + 1;
        xs = G__6928;
        ys = G__6929;
        len = G__6930;
        n = G__6931;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  cljs$core$compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$compare_indexed__2.call(this, xs, ys);
      case 4:
        return cljs$core$compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$compare_indexed.cljs$core$IFn$_invoke$arity$2 = cljs$core$compare_indexed__2;
  cljs$core$compare_indexed.cljs$core$IFn$_invoke$arity$4 = cljs$core$compare_indexed__4;
  return cljs$core$compare_indexed;
}();
cljs.core.fn__GT_comparator = function cljs$core$fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = function() {
        var G__6936 = x;
        var G__6937 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6936, G__6937) : f.call(null, G__6936, G__6937);
      }();
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(function() {
            var G__6938 = y;
            var G__6939 = x;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6938, G__6939) : f.call(null, G__6938, G__6939);
          }())) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var cljs$core$sort = null;
  var cljs$core$sort__1 = function(coll) {
    return cljs$core$sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
  };
  var cljs$core$sort__2 = function(comp, coll) {
    if (cljs.core.seq(coll)) {
      var a = function() {
        var G__6945 = coll;
        return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__6945) : cljs.core.to_array.call(null, G__6945);
      }();
      var G__6946_6948 = a;
      var G__6947_6949 = cljs.core.fn__GT_comparator(comp);
      goog.array.stableSort(G__6946_6948, G__6947_6949);
      return cljs.core.seq(a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  cljs$core$sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$sort__1.call(this, comp);
      case 2:
        return cljs$core$sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$sort.cljs$core$IFn$_invoke$arity$1 = cljs$core$sort__1;
  cljs$core$sort.cljs$core$IFn$_invoke$arity$2 = cljs$core$sort__2;
  return cljs$core$sort;
}();
cljs.core.sort_by = function() {
  var cljs$core$sort_by = null;
  var cljs$core$sort_by__2 = function(keyfn, coll) {
    return cljs$core$sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
  };
  var cljs$core$sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
      return cljs.core.fn__GT_comparator(comp).call(null, function() {
        var G__6955 = x;
        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__6955) : keyfn.call(null, G__6955);
      }(), function() {
        var G__6956 = y;
        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__6956) : keyfn.call(null, G__6956);
      }());
    }, coll);
  };
  cljs$core$sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return cljs$core$sort_by__2.call(this, keyfn, comp);
      case 3:
        return cljs$core$sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$sort_by.cljs$core$IFn$_invoke$arity$2 = cljs$core$sort_by__2;
  cljs$core$sort_by.cljs$core$IFn$_invoke$arity$3 = cljs$core$sort_by__3;
  return cljs$core$sort_by;
}();
cljs.core.seq_reduce = function() {
  var cljs$core$seq_reduce = null;
  var cljs$core$seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq(coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      var G__6962 = f;
      var G__6963 = cljs.core.first(s);
      var G__6964 = cljs.core.next(s);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__6962, G__6963, G__6964) : cljs.core.reduce.call(null, G__6962, G__6963, G__6964);
    } else {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }
  };
  var cljs$core$seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq(coll);
    while (true) {
      if (coll__$1) {
        var nval = function() {
          var G__6965 = val__$1;
          var G__6966 = cljs.core.first(coll__$1);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6965, G__6966) : f.call(null, G__6965, G__6966);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__6967 = nval;
          var G__6968 = cljs.core.next(coll__$1);
          val__$1 = G__6967;
          coll__$1 = G__6968;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  cljs$core$seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return cljs$core$seq_reduce__2.call(this, f, val);
      case 3:
        return cljs$core$seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$seq_reduce.cljs$core$IFn$_invoke$arity$2 = cljs$core$seq_reduce__2;
  cljs$core$seq_reduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$seq_reduce__3;
  return cljs$core$seq_reduce;
}();
cljs.core.shuffle = function cljs$core$shuffle(coll) {
  var a = function() {
    var G__6972 = coll;
    return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__6972) : cljs.core.to_array.call(null, G__6972);
  }();
  var G__6973_6975 = a;
  goog.array.shuffle(G__6973_6975);
  var G__6974 = a;
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(G__6974) : cljs.core.vec.call(null, G__6974);
};
cljs.core.reduce = function() {
  var cljs$core$reduce = null;
  var cljs$core$reduce__2 = function(f, coll) {
    if (function() {
      var G__6978 = coll;
      if (G__6978) {
        var bit__4789__auto__ = G__6978.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4789__auto__ || G__6978.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
            return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
          }
        }
      }
    }
  };
  var cljs$core$reduce__3 = function(f, val, coll) {
    if (function() {
      var G__6979 = coll;
      if (G__6979) {
        var bit__4789__auto__ = G__6979.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4789__auto__ || G__6979.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
            return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
          }
        }
      }
    }
  };
  cljs$core$reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return cljs$core$reduce__2.call(this, f, val);
      case 3:
        return cljs$core$reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$reduce.cljs$core$IFn$_invoke$arity$2 = cljs$core$reduce__2;
  cljs$core$reduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$reduce__3;
  return cljs$core$reduce;
}();
cljs.core.reduce_kv = function cljs$core$reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function cljs$core$identity(x) {
  return x;
};
cljs.core.completing = function() {
  var cljs$core$completing = null;
  var cljs$core$completing__1 = function(f) {
    return cljs$core$completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
  };
  var cljs$core$completing__2 = function(f, cf) {
    return function() {
      var G__6988 = null;
      var G__6988__0 = function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      };
      var G__6988__1 = function(x) {
        var G__6985 = x;
        return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(G__6985) : cf.call(null, G__6985);
      };
      var G__6988__2 = function(x, y) {
        var G__6986 = x;
        var G__6987 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6986, G__6987) : f.call(null, G__6986, G__6987);
      };
      G__6988 = function(x, y) {
        switch(arguments.length) {
          case 0:
            return G__6988__0.call(this);
          case 1:
            return G__6988__1.call(this, x);
          case 2:
            return G__6988__2.call(this, x, y);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__6988.cljs$core$IFn$_invoke$arity$0 = G__6988__0;
      G__6988.cljs$core$IFn$_invoke$arity$1 = G__6988__1;
      G__6988.cljs$core$IFn$_invoke$arity$2 = G__6988__2;
      return G__6988;
    }();
  };
  cljs$core$completing = function(f, cf) {
    switch(arguments.length) {
      case 1:
        return cljs$core$completing__1.call(this, f);
      case 2:
        return cljs$core$completing__2.call(this, f, cf);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$completing.cljs$core$IFn$_invoke$arity$1 = cljs$core$completing__1;
  cljs$core$completing.cljs$core$IFn$_invoke$arity$2 = cljs$core$completing__2;
  return cljs$core$completing;
}();
cljs.core.transduce = function() {
  var cljs$core$transduce = null;
  var cljs$core$transduce__3 = function(xform, f, coll) {
    return cljs$core$transduce.cljs$core$IFn$_invoke$arity$4(xform, f, function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }(), coll);
  };
  var cljs$core$transduce__4 = function(xform, f, init, coll) {
    var f__$1 = function() {
      var G__6995 = f;
      return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__6995) : xform.call(null, G__6995);
    }();
    var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
    var G__6996 = ret;
    return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(G__6996) : f__$1.call(null, G__6996);
  };
  cljs$core$transduce = function(xform, f, init, coll) {
    switch(arguments.length) {
      case 3:
        return cljs$core$transduce__3.call(this, xform, f, init);
      case 4:
        return cljs$core$transduce__4.call(this, xform, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$transduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$transduce__3;
  cljs$core$transduce.cljs$core$IFn$_invoke$arity$4 = cljs$core$transduce__4;
  return cljs$core$transduce;
}();
cljs.core._PLUS_ = function() {
  var cljs$core$_PLUS_ = null;
  var cljs$core$_PLUS___0 = function() {
    return 0;
  };
  var cljs$core$_PLUS___1 = function(x) {
    return x;
  };
  var cljs$core$_PLUS___2 = function(x, y) {
    return x + y;
  };
  var cljs$core$_PLUS___3 = function() {
    var G__6997__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$_PLUS_, x + y, more);
    };
    var G__6997 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__6998__i = 0, G__6998__a = new Array(arguments.length - 2);
        while (G__6998__i < G__6998__a.length) {
          G__6998__a[G__6998__i] = arguments[G__6998__i + 2];
          ++G__6998__i;
        }
        more = new cljs.core.IndexedSeq(G__6998__a, 0);
      }
      return G__6997__delegate.call(this, x, y, more);
    };
    G__6997.cljs$lang$maxFixedArity = 2;
    G__6997.cljs$lang$applyTo = function(arglist__6999) {
      var x = cljs.core.first(arglist__6999);
      arglist__6999 = cljs.core.next(arglist__6999);
      var y = cljs.core.first(arglist__6999);
      var more = cljs.core.rest(arglist__6999);
      return G__6997__delegate(x, y, more);
    };
    G__6997.cljs$core$IFn$_invoke$arity$variadic = G__6997__delegate;
    return G__6997;
  }();
  cljs$core$_PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$_PLUS___0.call(this);
      case 1:
        return cljs$core$_PLUS___1.call(this, x);
      case 2:
        return cljs$core$_PLUS___2.call(this, x, y);
      default:
        var G__7000 = null;
        if (arguments.length > 2) {
          var G__7001__i = 0, G__7001__a = new Array(arguments.length - 2);
          while (G__7001__i < G__7001__a.length) {
            G__7001__a[G__7001__i] = arguments[G__7001__i + 2];
            ++G__7001__i;
          }
          G__7000 = new cljs.core.IndexedSeq(G__7001__a, 0);
        }
        return cljs$core$_PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7000);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_PLUS_.cljs$lang$maxFixedArity = 2;
  cljs$core$_PLUS_.cljs$lang$applyTo = cljs$core$_PLUS___3.cljs$lang$applyTo;
  cljs$core$_PLUS_.cljs$core$IFn$_invoke$arity$0 = cljs$core$_PLUS___0;
  cljs$core$_PLUS_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_PLUS___1;
  cljs$core$_PLUS_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_PLUS___2;
  cljs$core$_PLUS_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_PLUS_;
}();
cljs.core._ = function() {
  var cljs$core$_ = null;
  var cljs$core$___1 = function(x) {
    return-x;
  };
  var cljs$core$___2 = function(x, y) {
    return x - y;
  };
  var cljs$core$___3 = function() {
    var G__7002__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$_, x - y, more);
    };
    var G__7002 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7003__i = 0, G__7003__a = new Array(arguments.length - 2);
        while (G__7003__i < G__7003__a.length) {
          G__7003__a[G__7003__i] = arguments[G__7003__i + 2];
          ++G__7003__i;
        }
        more = new cljs.core.IndexedSeq(G__7003__a, 0);
      }
      return G__7002__delegate.call(this, x, y, more);
    };
    G__7002.cljs$lang$maxFixedArity = 2;
    G__7002.cljs$lang$applyTo = function(arglist__7004) {
      var x = cljs.core.first(arglist__7004);
      arglist__7004 = cljs.core.next(arglist__7004);
      var y = cljs.core.first(arglist__7004);
      var more = cljs.core.rest(arglist__7004);
      return G__7002__delegate(x, y, more);
    };
    G__7002.cljs$core$IFn$_invoke$arity$variadic = G__7002__delegate;
    return G__7002;
  }();
  cljs$core$_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$___1.call(this, x);
      case 2:
        return cljs$core$___2.call(this, x, y);
      default:
        var G__7005 = null;
        if (arguments.length > 2) {
          var G__7006__i = 0, G__7006__a = new Array(arguments.length - 2);
          while (G__7006__i < G__7006__a.length) {
            G__7006__a[G__7006__i] = arguments[G__7006__i + 2];
            ++G__7006__i;
          }
          G__7005 = new cljs.core.IndexedSeq(G__7006__a, 0);
        }
        return cljs$core$___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7005);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_.cljs$lang$maxFixedArity = 2;
  cljs$core$_.cljs$lang$applyTo = cljs$core$___3.cljs$lang$applyTo;
  cljs$core$_.cljs$core$IFn$_invoke$arity$1 = cljs$core$___1;
  cljs$core$_.cljs$core$IFn$_invoke$arity$2 = cljs$core$___2;
  cljs$core$_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_;
}();
cljs.core._STAR_ = function() {
  var cljs$core$_STAR_ = null;
  var cljs$core$_STAR___0 = function() {
    return 1;
  };
  var cljs$core$_STAR___1 = function(x) {
    return x;
  };
  var cljs$core$_STAR___2 = function(x, y) {
    return x * y;
  };
  var cljs$core$_STAR___3 = function() {
    var G__7007__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$_STAR_, x * y, more);
    };
    var G__7007 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7008__i = 0, G__7008__a = new Array(arguments.length - 2);
        while (G__7008__i < G__7008__a.length) {
          G__7008__a[G__7008__i] = arguments[G__7008__i + 2];
          ++G__7008__i;
        }
        more = new cljs.core.IndexedSeq(G__7008__a, 0);
      }
      return G__7007__delegate.call(this, x, y, more);
    };
    G__7007.cljs$lang$maxFixedArity = 2;
    G__7007.cljs$lang$applyTo = function(arglist__7009) {
      var x = cljs.core.first(arglist__7009);
      arglist__7009 = cljs.core.next(arglist__7009);
      var y = cljs.core.first(arglist__7009);
      var more = cljs.core.rest(arglist__7009);
      return G__7007__delegate(x, y, more);
    };
    G__7007.cljs$core$IFn$_invoke$arity$variadic = G__7007__delegate;
    return G__7007;
  }();
  cljs$core$_STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$_STAR___0.call(this);
      case 1:
        return cljs$core$_STAR___1.call(this, x);
      case 2:
        return cljs$core$_STAR___2.call(this, x, y);
      default:
        var G__7010 = null;
        if (arguments.length > 2) {
          var G__7011__i = 0, G__7011__a = new Array(arguments.length - 2);
          while (G__7011__i < G__7011__a.length) {
            G__7011__a[G__7011__i] = arguments[G__7011__i + 2];
            ++G__7011__i;
          }
          G__7010 = new cljs.core.IndexedSeq(G__7011__a, 0);
        }
        return cljs$core$_STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7010);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_STAR_.cljs$lang$maxFixedArity = 2;
  cljs$core$_STAR_.cljs$lang$applyTo = cljs$core$_STAR___3.cljs$lang$applyTo;
  cljs$core$_STAR_.cljs$core$IFn$_invoke$arity$0 = cljs$core$_STAR___0;
  cljs$core$_STAR_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_STAR___1;
  cljs$core$_STAR_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_STAR___2;
  cljs$core$_STAR_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_STAR_;
}();
cljs.core._SLASH_ = function() {
  var cljs$core$_SLASH_ = null;
  var cljs$core$_SLASH___1 = function(x) {
    return cljs$core$_SLASH_.cljs$core$IFn$_invoke$arity$2(1, x);
  };
  var cljs$core$_SLASH___2 = function(x, y) {
    return x / y;
  };
  var cljs$core$_SLASH___3 = function() {
    var G__7016__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$_SLASH_, cljs$core$_SLASH_.cljs$core$IFn$_invoke$arity$2(x, y), more);
    };
    var G__7016 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7017__i = 0, G__7017__a = new Array(arguments.length - 2);
        while (G__7017__i < G__7017__a.length) {
          G__7017__a[G__7017__i] = arguments[G__7017__i + 2];
          ++G__7017__i;
        }
        more = new cljs.core.IndexedSeq(G__7017__a, 0);
      }
      return G__7016__delegate.call(this, x, y, more);
    };
    G__7016.cljs$lang$maxFixedArity = 2;
    G__7016.cljs$lang$applyTo = function(arglist__7018) {
      var x = cljs.core.first(arglist__7018);
      arglist__7018 = cljs.core.next(arglist__7018);
      var y = cljs.core.first(arglist__7018);
      var more = cljs.core.rest(arglist__7018);
      return G__7016__delegate(x, y, more);
    };
    G__7016.cljs$core$IFn$_invoke$arity$variadic = G__7016__delegate;
    return G__7016;
  }();
  cljs$core$_SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_SLASH___1.call(this, x);
      case 2:
        return cljs$core$_SLASH___2.call(this, x, y);
      default:
        var G__7019 = null;
        if (arguments.length > 2) {
          var G__7020__i = 0, G__7020__a = new Array(arguments.length - 2);
          while (G__7020__i < G__7020__a.length) {
            G__7020__a[G__7020__i] = arguments[G__7020__i + 2];
            ++G__7020__i;
          }
          G__7019 = new cljs.core.IndexedSeq(G__7020__a, 0);
        }
        return cljs$core$_SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7019);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_SLASH_.cljs$lang$maxFixedArity = 2;
  cljs$core$_SLASH_.cljs$lang$applyTo = cljs$core$_SLASH___3.cljs$lang$applyTo;
  cljs$core$_SLASH_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_SLASH___1;
  cljs$core$_SLASH_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_SLASH___2;
  cljs$core$_SLASH_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_SLASH_;
}();
cljs.core._LT_ = function() {
  var cljs$core$_LT_ = null;
  var cljs$core$_LT___1 = function(x) {
    return true;
  };
  var cljs$core$_LT___2 = function(x, y) {
    return x < y;
  };
  var cljs$core$_LT___3 = function() {
    var G__7021__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next(more)) {
            var G__7022 = y;
            var G__7023 = cljs.core.first(more);
            var G__7024 = cljs.core.next(more);
            x = G__7022;
            y = G__7023;
            more = G__7024;
            continue;
          } else {
            return y < cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__7021 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7025__i = 0, G__7025__a = new Array(arguments.length - 2);
        while (G__7025__i < G__7025__a.length) {
          G__7025__a[G__7025__i] = arguments[G__7025__i + 2];
          ++G__7025__i;
        }
        more = new cljs.core.IndexedSeq(G__7025__a, 0);
      }
      return G__7021__delegate.call(this, x, y, more);
    };
    G__7021.cljs$lang$maxFixedArity = 2;
    G__7021.cljs$lang$applyTo = function(arglist__7026) {
      var x = cljs.core.first(arglist__7026);
      arglist__7026 = cljs.core.next(arglist__7026);
      var y = cljs.core.first(arglist__7026);
      var more = cljs.core.rest(arglist__7026);
      return G__7021__delegate(x, y, more);
    };
    G__7021.cljs$core$IFn$_invoke$arity$variadic = G__7021__delegate;
    return G__7021;
  }();
  cljs$core$_LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_LT___1.call(this, x);
      case 2:
        return cljs$core$_LT___2.call(this, x, y);
      default:
        var G__7027 = null;
        if (arguments.length > 2) {
          var G__7028__i = 0, G__7028__a = new Array(arguments.length - 2);
          while (G__7028__i < G__7028__a.length) {
            G__7028__a[G__7028__i] = arguments[G__7028__i + 2];
            ++G__7028__i;
          }
          G__7027 = new cljs.core.IndexedSeq(G__7028__a, 0);
        }
        return cljs$core$_LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7027);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_LT_.cljs$lang$maxFixedArity = 2;
  cljs$core$_LT_.cljs$lang$applyTo = cljs$core$_LT___3.cljs$lang$applyTo;
  cljs$core$_LT_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_LT___1;
  cljs$core$_LT_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_LT___2;
  cljs$core$_LT_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_LT_;
}();
cljs.core._LT__EQ_ = function() {
  var cljs$core$_LT__EQ_ = null;
  var cljs$core$_LT__EQ___1 = function(x) {
    return true;
  };
  var cljs$core$_LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var cljs$core$_LT__EQ___3 = function() {
    var G__7029__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next(more)) {
            var G__7030 = y;
            var G__7031 = cljs.core.first(more);
            var G__7032 = cljs.core.next(more);
            x = G__7030;
            y = G__7031;
            more = G__7032;
            continue;
          } else {
            return y <= cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__7029 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7033__i = 0, G__7033__a = new Array(arguments.length - 2);
        while (G__7033__i < G__7033__a.length) {
          G__7033__a[G__7033__i] = arguments[G__7033__i + 2];
          ++G__7033__i;
        }
        more = new cljs.core.IndexedSeq(G__7033__a, 0);
      }
      return G__7029__delegate.call(this, x, y, more);
    };
    G__7029.cljs$lang$maxFixedArity = 2;
    G__7029.cljs$lang$applyTo = function(arglist__7034) {
      var x = cljs.core.first(arglist__7034);
      arglist__7034 = cljs.core.next(arglist__7034);
      var y = cljs.core.first(arglist__7034);
      var more = cljs.core.rest(arglist__7034);
      return G__7029__delegate(x, y, more);
    };
    G__7029.cljs$core$IFn$_invoke$arity$variadic = G__7029__delegate;
    return G__7029;
  }();
  cljs$core$_LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_LT__EQ___1.call(this, x);
      case 2:
        return cljs$core$_LT__EQ___2.call(this, x, y);
      default:
        var G__7035 = null;
        if (arguments.length > 2) {
          var G__7036__i = 0, G__7036__a = new Array(arguments.length - 2);
          while (G__7036__i < G__7036__a.length) {
            G__7036__a[G__7036__i] = arguments[G__7036__i + 2];
            ++G__7036__i;
          }
          G__7035 = new cljs.core.IndexedSeq(G__7036__a, 0);
        }
        return cljs$core$_LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7035);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_LT__EQ_.cljs$lang$maxFixedArity = 2;
  cljs$core$_LT__EQ_.cljs$lang$applyTo = cljs$core$_LT__EQ___3.cljs$lang$applyTo;
  cljs$core$_LT__EQ_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_LT__EQ___1;
  cljs$core$_LT__EQ_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_LT__EQ___2;
  cljs$core$_LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_LT__EQ_;
}();
cljs.core._GT_ = function() {
  var cljs$core$_GT_ = null;
  var cljs$core$_GT___1 = function(x) {
    return true;
  };
  var cljs$core$_GT___2 = function(x, y) {
    return x > y;
  };
  var cljs$core$_GT___3 = function() {
    var G__7037__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next(more)) {
            var G__7038 = y;
            var G__7039 = cljs.core.first(more);
            var G__7040 = cljs.core.next(more);
            x = G__7038;
            y = G__7039;
            more = G__7040;
            continue;
          } else {
            return y > cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__7037 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7041__i = 0, G__7041__a = new Array(arguments.length - 2);
        while (G__7041__i < G__7041__a.length) {
          G__7041__a[G__7041__i] = arguments[G__7041__i + 2];
          ++G__7041__i;
        }
        more = new cljs.core.IndexedSeq(G__7041__a, 0);
      }
      return G__7037__delegate.call(this, x, y, more);
    };
    G__7037.cljs$lang$maxFixedArity = 2;
    G__7037.cljs$lang$applyTo = function(arglist__7042) {
      var x = cljs.core.first(arglist__7042);
      arglist__7042 = cljs.core.next(arglist__7042);
      var y = cljs.core.first(arglist__7042);
      var more = cljs.core.rest(arglist__7042);
      return G__7037__delegate(x, y, more);
    };
    G__7037.cljs$core$IFn$_invoke$arity$variadic = G__7037__delegate;
    return G__7037;
  }();
  cljs$core$_GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_GT___1.call(this, x);
      case 2:
        return cljs$core$_GT___2.call(this, x, y);
      default:
        var G__7043 = null;
        if (arguments.length > 2) {
          var G__7044__i = 0, G__7044__a = new Array(arguments.length - 2);
          while (G__7044__i < G__7044__a.length) {
            G__7044__a[G__7044__i] = arguments[G__7044__i + 2];
            ++G__7044__i;
          }
          G__7043 = new cljs.core.IndexedSeq(G__7044__a, 0);
        }
        return cljs$core$_GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7043);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_GT_.cljs$lang$maxFixedArity = 2;
  cljs$core$_GT_.cljs$lang$applyTo = cljs$core$_GT___3.cljs$lang$applyTo;
  cljs$core$_GT_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_GT___1;
  cljs$core$_GT_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_GT___2;
  cljs$core$_GT_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_GT_;
}();
cljs.core._GT__EQ_ = function() {
  var cljs$core$_GT__EQ_ = null;
  var cljs$core$_GT__EQ___1 = function(x) {
    return true;
  };
  var cljs$core$_GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var cljs$core$_GT__EQ___3 = function() {
    var G__7045__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next(more)) {
            var G__7046 = y;
            var G__7047 = cljs.core.first(more);
            var G__7048 = cljs.core.next(more);
            x = G__7046;
            y = G__7047;
            more = G__7048;
            continue;
          } else {
            return y >= cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__7045 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7049__i = 0, G__7049__a = new Array(arguments.length - 2);
        while (G__7049__i < G__7049__a.length) {
          G__7049__a[G__7049__i] = arguments[G__7049__i + 2];
          ++G__7049__i;
        }
        more = new cljs.core.IndexedSeq(G__7049__a, 0);
      }
      return G__7045__delegate.call(this, x, y, more);
    };
    G__7045.cljs$lang$maxFixedArity = 2;
    G__7045.cljs$lang$applyTo = function(arglist__7050) {
      var x = cljs.core.first(arglist__7050);
      arglist__7050 = cljs.core.next(arglist__7050);
      var y = cljs.core.first(arglist__7050);
      var more = cljs.core.rest(arglist__7050);
      return G__7045__delegate(x, y, more);
    };
    G__7045.cljs$core$IFn$_invoke$arity$variadic = G__7045__delegate;
    return G__7045;
  }();
  cljs$core$_GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_GT__EQ___1.call(this, x);
      case 2:
        return cljs$core$_GT__EQ___2.call(this, x, y);
      default:
        var G__7051 = null;
        if (arguments.length > 2) {
          var G__7052__i = 0, G__7052__a = new Array(arguments.length - 2);
          while (G__7052__i < G__7052__a.length) {
            G__7052__a[G__7052__i] = arguments[G__7052__i + 2];
            ++G__7052__i;
          }
          G__7051 = new cljs.core.IndexedSeq(G__7052__a, 0);
        }
        return cljs$core$_GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7051);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_GT__EQ_.cljs$lang$maxFixedArity = 2;
  cljs$core$_GT__EQ_.cljs$lang$applyTo = cljs$core$_GT__EQ___3.cljs$lang$applyTo;
  cljs$core$_GT__EQ_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_GT__EQ___1;
  cljs$core$_GT__EQ_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_GT__EQ___2;
  cljs$core$_GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_GT__EQ_;
}();
cljs.core.dec = function cljs$core$dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var cljs$core$max = null;
  var cljs$core$max__1 = function(x) {
    return x;
  };
  var cljs$core$max__2 = function(x, y) {
    var x__4434__auto__ = x;
    var y__4435__auto__ = y;
    return x__4434__auto__ > y__4435__auto__ ? x__4434__auto__ : y__4435__auto__;
  };
  var cljs$core$max__3 = function() {
    var G__7053__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$max, function() {
        var x__4434__auto__ = x;
        var y__4435__auto__ = y;
        return x__4434__auto__ > y__4435__auto__ ? x__4434__auto__ : y__4435__auto__;
      }(), more);
    };
    var G__7053 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7054__i = 0, G__7054__a = new Array(arguments.length - 2);
        while (G__7054__i < G__7054__a.length) {
          G__7054__a[G__7054__i] = arguments[G__7054__i + 2];
          ++G__7054__i;
        }
        more = new cljs.core.IndexedSeq(G__7054__a, 0);
      }
      return G__7053__delegate.call(this, x, y, more);
    };
    G__7053.cljs$lang$maxFixedArity = 2;
    G__7053.cljs$lang$applyTo = function(arglist__7055) {
      var x = cljs.core.first(arglist__7055);
      arglist__7055 = cljs.core.next(arglist__7055);
      var y = cljs.core.first(arglist__7055);
      var more = cljs.core.rest(arglist__7055);
      return G__7053__delegate(x, y, more);
    };
    G__7053.cljs$core$IFn$_invoke$arity$variadic = G__7053__delegate;
    return G__7053;
  }();
  cljs$core$max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$max__1.call(this, x);
      case 2:
        return cljs$core$max__2.call(this, x, y);
      default:
        var G__7056 = null;
        if (arguments.length > 2) {
          var G__7057__i = 0, G__7057__a = new Array(arguments.length - 2);
          while (G__7057__i < G__7057__a.length) {
            G__7057__a[G__7057__i] = arguments[G__7057__i + 2];
            ++G__7057__i;
          }
          G__7056 = new cljs.core.IndexedSeq(G__7057__a, 0);
        }
        return cljs$core$max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7056);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$max.cljs$lang$maxFixedArity = 2;
  cljs$core$max.cljs$lang$applyTo = cljs$core$max__3.cljs$lang$applyTo;
  cljs$core$max.cljs$core$IFn$_invoke$arity$1 = cljs$core$max__1;
  cljs$core$max.cljs$core$IFn$_invoke$arity$2 = cljs$core$max__2;
  cljs$core$max.cljs$core$IFn$_invoke$arity$variadic = cljs$core$max__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$max;
}();
cljs.core.min = function() {
  var cljs$core$min = null;
  var cljs$core$min__1 = function(x) {
    return x;
  };
  var cljs$core$min__2 = function(x, y) {
    var x__4441__auto__ = x;
    var y__4442__auto__ = y;
    return x__4441__auto__ < y__4442__auto__ ? x__4441__auto__ : y__4442__auto__;
  };
  var cljs$core$min__3 = function() {
    var G__7058__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$min, function() {
        var x__4441__auto__ = x;
        var y__4442__auto__ = y;
        return x__4441__auto__ < y__4442__auto__ ? x__4441__auto__ : y__4442__auto__;
      }(), more);
    };
    var G__7058 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7059__i = 0, G__7059__a = new Array(arguments.length - 2);
        while (G__7059__i < G__7059__a.length) {
          G__7059__a[G__7059__i] = arguments[G__7059__i + 2];
          ++G__7059__i;
        }
        more = new cljs.core.IndexedSeq(G__7059__a, 0);
      }
      return G__7058__delegate.call(this, x, y, more);
    };
    G__7058.cljs$lang$maxFixedArity = 2;
    G__7058.cljs$lang$applyTo = function(arglist__7060) {
      var x = cljs.core.first(arglist__7060);
      arglist__7060 = cljs.core.next(arglist__7060);
      var y = cljs.core.first(arglist__7060);
      var more = cljs.core.rest(arglist__7060);
      return G__7058__delegate(x, y, more);
    };
    G__7058.cljs$core$IFn$_invoke$arity$variadic = G__7058__delegate;
    return G__7058;
  }();
  cljs$core$min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$min__1.call(this, x);
      case 2:
        return cljs$core$min__2.call(this, x, y);
      default:
        var G__7061 = null;
        if (arguments.length > 2) {
          var G__7062__i = 0, G__7062__a = new Array(arguments.length - 2);
          while (G__7062__i < G__7062__a.length) {
            G__7062__a[G__7062__i] = arguments[G__7062__i + 2];
            ++G__7062__i;
          }
          G__7061 = new cljs.core.IndexedSeq(G__7062__a, 0);
        }
        return cljs$core$min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7061);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$min.cljs$lang$maxFixedArity = 2;
  cljs$core$min.cljs$lang$applyTo = cljs$core$min__3.cljs$lang$applyTo;
  cljs$core$min.cljs$core$IFn$_invoke$arity$1 = cljs$core$min__1;
  cljs$core$min.cljs$core$IFn$_invoke$arity$2 = cljs$core$min__2;
  cljs$core$min.cljs$core$IFn$_invoke$arity$variadic = cljs$core$min__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$min;
}();
cljs.core.byte$ = function cljs$core$byte(x) {
  return x;
};
cljs.core.char$ = function cljs$core$char(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function cljs$core$short(x) {
  return x;
};
cljs.core.float$ = function cljs$core$float(x) {
  return x;
};
cljs.core.double$ = function cljs$core$double(x) {
  return x;
};
cljs.core.unchecked_byte = function cljs$core$unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function cljs$core$unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function cljs$core$unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function cljs$core$unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function cljs$core$unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var cljs$core$unchecked_add = null;
  var cljs$core$unchecked_add__0 = function() {
    return 0;
  };
  var cljs$core$unchecked_add__1 = function(x) {
    return x;
  };
  var cljs$core$unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var cljs$core$unchecked_add__3 = function() {
    var G__7063__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_add, x + y, more);
    };
    var G__7063 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7064__i = 0, G__7064__a = new Array(arguments.length - 2);
        while (G__7064__i < G__7064__a.length) {
          G__7064__a[G__7064__i] = arguments[G__7064__i + 2];
          ++G__7064__i;
        }
        more = new cljs.core.IndexedSeq(G__7064__a, 0);
      }
      return G__7063__delegate.call(this, x, y, more);
    };
    G__7063.cljs$lang$maxFixedArity = 2;
    G__7063.cljs$lang$applyTo = function(arglist__7065) {
      var x = cljs.core.first(arglist__7065);
      arglist__7065 = cljs.core.next(arglist__7065);
      var y = cljs.core.first(arglist__7065);
      var more = cljs.core.rest(arglist__7065);
      return G__7063__delegate(x, y, more);
    };
    G__7063.cljs$core$IFn$_invoke$arity$variadic = G__7063__delegate;
    return G__7063;
  }();
  cljs$core$unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$unchecked_add__0.call(this);
      case 1:
        return cljs$core$unchecked_add__1.call(this, x);
      case 2:
        return cljs$core$unchecked_add__2.call(this, x, y);
      default:
        var G__7066 = null;
        if (arguments.length > 2) {
          var G__7067__i = 0, G__7067__a = new Array(arguments.length - 2);
          while (G__7067__i < G__7067__a.length) {
            G__7067__a[G__7067__i] = arguments[G__7067__i + 2];
            ++G__7067__i;
          }
          G__7066 = new cljs.core.IndexedSeq(G__7067__a, 0);
        }
        return cljs$core$unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7066);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_add.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_add.cljs$lang$applyTo = cljs$core$unchecked_add__3.cljs$lang$applyTo;
  cljs$core$unchecked_add.cljs$core$IFn$_invoke$arity$0 = cljs$core$unchecked_add__0;
  cljs$core$unchecked_add.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_add__1;
  cljs$core$unchecked_add.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_add__2;
  cljs$core$unchecked_add.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var cljs$core$unchecked_add_int = null;
  var cljs$core$unchecked_add_int__0 = function() {
    return 0;
  };
  var cljs$core$unchecked_add_int__1 = function(x) {
    return x;
  };
  var cljs$core$unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var cljs$core$unchecked_add_int__3 = function() {
    var G__7068__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_add_int, x + y, more);
    };
    var G__7068 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7069__i = 0, G__7069__a = new Array(arguments.length - 2);
        while (G__7069__i < G__7069__a.length) {
          G__7069__a[G__7069__i] = arguments[G__7069__i + 2];
          ++G__7069__i;
        }
        more = new cljs.core.IndexedSeq(G__7069__a, 0);
      }
      return G__7068__delegate.call(this, x, y, more);
    };
    G__7068.cljs$lang$maxFixedArity = 2;
    G__7068.cljs$lang$applyTo = function(arglist__7070) {
      var x = cljs.core.first(arglist__7070);
      arglist__7070 = cljs.core.next(arglist__7070);
      var y = cljs.core.first(arglist__7070);
      var more = cljs.core.rest(arglist__7070);
      return G__7068__delegate(x, y, more);
    };
    G__7068.cljs$core$IFn$_invoke$arity$variadic = G__7068__delegate;
    return G__7068;
  }();
  cljs$core$unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$unchecked_add_int__0.call(this);
      case 1:
        return cljs$core$unchecked_add_int__1.call(this, x);
      case 2:
        return cljs$core$unchecked_add_int__2.call(this, x, y);
      default:
        var G__7071 = null;
        if (arguments.length > 2) {
          var G__7072__i = 0, G__7072__a = new Array(arguments.length - 2);
          while (G__7072__i < G__7072__a.length) {
            G__7072__a[G__7072__i] = arguments[G__7072__i + 2];
            ++G__7072__i;
          }
          G__7071 = new cljs.core.IndexedSeq(G__7072__a, 0);
        }
        return cljs$core$unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7071);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_add_int.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_add_int.cljs$lang$applyTo = cljs$core$unchecked_add_int__3.cljs$lang$applyTo;
  cljs$core$unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = cljs$core$unchecked_add_int__0;
  cljs$core$unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_add_int__1;
  cljs$core$unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_add_int__2;
  cljs$core$unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_add_int;
}();
cljs.core.unchecked_dec = function cljs$core$unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function cljs$core$unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var cljs$core$unchecked_divide_int = null;
  var cljs$core$unchecked_divide_int__1 = function(x) {
    return cljs$core$unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(1, x);
  };
  var cljs$core$unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var cljs$core$unchecked_divide_int__3 = function() {
    var G__7077__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_divide_int, cljs$core$unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(x, y), more);
    };
    var G__7077 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7078__i = 0, G__7078__a = new Array(arguments.length - 2);
        while (G__7078__i < G__7078__a.length) {
          G__7078__a[G__7078__i] = arguments[G__7078__i + 2];
          ++G__7078__i;
        }
        more = new cljs.core.IndexedSeq(G__7078__a, 0);
      }
      return G__7077__delegate.call(this, x, y, more);
    };
    G__7077.cljs$lang$maxFixedArity = 2;
    G__7077.cljs$lang$applyTo = function(arglist__7079) {
      var x = cljs.core.first(arglist__7079);
      arglist__7079 = cljs.core.next(arglist__7079);
      var y = cljs.core.first(arglist__7079);
      var more = cljs.core.rest(arglist__7079);
      return G__7077__delegate(x, y, more);
    };
    G__7077.cljs$core$IFn$_invoke$arity$variadic = G__7077__delegate;
    return G__7077;
  }();
  cljs$core$unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$unchecked_divide_int__1.call(this, x);
      case 2:
        return cljs$core$unchecked_divide_int__2.call(this, x, y);
      default:
        var G__7080 = null;
        if (arguments.length > 2) {
          var G__7081__i = 0, G__7081__a = new Array(arguments.length - 2);
          while (G__7081__i < G__7081__a.length) {
            G__7081__a[G__7081__i] = arguments[G__7081__i + 2];
            ++G__7081__i;
          }
          G__7080 = new cljs.core.IndexedSeq(G__7081__a, 0);
        }
        return cljs$core$unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7080);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_divide_int.cljs$lang$applyTo = cljs$core$unchecked_divide_int__3.cljs$lang$applyTo;
  cljs$core$unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_divide_int__1;
  cljs$core$unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_divide_int__2;
  cljs$core$unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_divide_int;
}();
cljs.core.unchecked_inc = function cljs$core$unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function cljs$core$unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var cljs$core$unchecked_multiply = null;
  var cljs$core$unchecked_multiply__0 = function() {
    return 1;
  };
  var cljs$core$unchecked_multiply__1 = function(x) {
    return x;
  };
  var cljs$core$unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var cljs$core$unchecked_multiply__3 = function() {
    var G__7082__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_multiply, x * y, more);
    };
    var G__7082 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7083__i = 0, G__7083__a = new Array(arguments.length - 2);
        while (G__7083__i < G__7083__a.length) {
          G__7083__a[G__7083__i] = arguments[G__7083__i + 2];
          ++G__7083__i;
        }
        more = new cljs.core.IndexedSeq(G__7083__a, 0);
      }
      return G__7082__delegate.call(this, x, y, more);
    };
    G__7082.cljs$lang$maxFixedArity = 2;
    G__7082.cljs$lang$applyTo = function(arglist__7084) {
      var x = cljs.core.first(arglist__7084);
      arglist__7084 = cljs.core.next(arglist__7084);
      var y = cljs.core.first(arglist__7084);
      var more = cljs.core.rest(arglist__7084);
      return G__7082__delegate(x, y, more);
    };
    G__7082.cljs$core$IFn$_invoke$arity$variadic = G__7082__delegate;
    return G__7082;
  }();
  cljs$core$unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$unchecked_multiply__0.call(this);
      case 1:
        return cljs$core$unchecked_multiply__1.call(this, x);
      case 2:
        return cljs$core$unchecked_multiply__2.call(this, x, y);
      default:
        var G__7085 = null;
        if (arguments.length > 2) {
          var G__7086__i = 0, G__7086__a = new Array(arguments.length - 2);
          while (G__7086__i < G__7086__a.length) {
            G__7086__a[G__7086__i] = arguments[G__7086__i + 2];
            ++G__7086__i;
          }
          G__7085 = new cljs.core.IndexedSeq(G__7086__a, 0);
        }
        return cljs$core$unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7085);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_multiply.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_multiply.cljs$lang$applyTo = cljs$core$unchecked_multiply__3.cljs$lang$applyTo;
  cljs$core$unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = cljs$core$unchecked_multiply__0;
  cljs$core$unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_multiply__1;
  cljs$core$unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_multiply__2;
  cljs$core$unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var cljs$core$unchecked_multiply_int = null;
  var cljs$core$unchecked_multiply_int__0 = function() {
    return 1;
  };
  var cljs$core$unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var cljs$core$unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var cljs$core$unchecked_multiply_int__3 = function() {
    var G__7087__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_multiply_int, x * y, more);
    };
    var G__7087 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7088__i = 0, G__7088__a = new Array(arguments.length - 2);
        while (G__7088__i < G__7088__a.length) {
          G__7088__a[G__7088__i] = arguments[G__7088__i + 2];
          ++G__7088__i;
        }
        more = new cljs.core.IndexedSeq(G__7088__a, 0);
      }
      return G__7087__delegate.call(this, x, y, more);
    };
    G__7087.cljs$lang$maxFixedArity = 2;
    G__7087.cljs$lang$applyTo = function(arglist__7089) {
      var x = cljs.core.first(arglist__7089);
      arglist__7089 = cljs.core.next(arglist__7089);
      var y = cljs.core.first(arglist__7089);
      var more = cljs.core.rest(arglist__7089);
      return G__7087__delegate(x, y, more);
    };
    G__7087.cljs$core$IFn$_invoke$arity$variadic = G__7087__delegate;
    return G__7087;
  }();
  cljs$core$unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$unchecked_multiply_int__0.call(this);
      case 1:
        return cljs$core$unchecked_multiply_int__1.call(this, x);
      case 2:
        return cljs$core$unchecked_multiply_int__2.call(this, x, y);
      default:
        var G__7090 = null;
        if (arguments.length > 2) {
          var G__7091__i = 0, G__7091__a = new Array(arguments.length - 2);
          while (G__7091__i < G__7091__a.length) {
            G__7091__a[G__7091__i] = arguments[G__7091__i + 2];
            ++G__7091__i;
          }
          G__7090 = new cljs.core.IndexedSeq(G__7091__a, 0);
        }
        return cljs$core$unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7090);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_multiply_int.cljs$lang$applyTo = cljs$core$unchecked_multiply_int__3.cljs$lang$applyTo;
  cljs$core$unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = cljs$core$unchecked_multiply_int__0;
  cljs$core$unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_multiply_int__1;
  cljs$core$unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_multiply_int__2;
  cljs$core$unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function cljs$core$unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function cljs$core$unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function cljs$core$unchecked_remainder_int(x, n) {
  var G__7094 = x;
  var G__7095 = n;
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(G__7094, G__7095) : cljs.core.mod.call(null, G__7094, G__7095);
};
cljs.core.unchecked_subtract = function() {
  var cljs$core$unchecked_subtract = null;
  var cljs$core$unchecked_subtract__1 = function(x) {
    return-x;
  };
  var cljs$core$unchecked_subtract__2 = function(x, y) {
    return x - y;
  };
  var cljs$core$unchecked_subtract__3 = function() {
    var G__7096__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_subtract, x - y, more);
    };
    var G__7096 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7097__i = 0, G__7097__a = new Array(arguments.length - 2);
        while (G__7097__i < G__7097__a.length) {
          G__7097__a[G__7097__i] = arguments[G__7097__i + 2];
          ++G__7097__i;
        }
        more = new cljs.core.IndexedSeq(G__7097__a, 0);
      }
      return G__7096__delegate.call(this, x, y, more);
    };
    G__7096.cljs$lang$maxFixedArity = 2;
    G__7096.cljs$lang$applyTo = function(arglist__7098) {
      var x = cljs.core.first(arglist__7098);
      arglist__7098 = cljs.core.next(arglist__7098);
      var y = cljs.core.first(arglist__7098);
      var more = cljs.core.rest(arglist__7098);
      return G__7096__delegate(x, y, more);
    };
    G__7096.cljs$core$IFn$_invoke$arity$variadic = G__7096__delegate;
    return G__7096;
  }();
  cljs$core$unchecked_subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$unchecked_subtract__1.call(this, x);
      case 2:
        return cljs$core$unchecked_subtract__2.call(this, x, y);
      default:
        var G__7099 = null;
        if (arguments.length > 2) {
          var G__7100__i = 0, G__7100__a = new Array(arguments.length - 2);
          while (G__7100__i < G__7100__a.length) {
            G__7100__a[G__7100__i] = arguments[G__7100__i + 2];
            ++G__7100__i;
          }
          G__7099 = new cljs.core.IndexedSeq(G__7100__a, 0);
        }
        return cljs$core$unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7099);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_subtract.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_subtract.cljs$lang$applyTo = cljs$core$unchecked_subtract__3.cljs$lang$applyTo;
  cljs$core$unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_subtract__1;
  cljs$core$unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_subtract__2;
  cljs$core$unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_subtract;
}();
cljs.core.unchecked_subtract_int = function() {
  var cljs$core$unchecked_subtract_int = null;
  var cljs$core$unchecked_subtract_int__1 = function(x) {
    return-x;
  };
  var cljs$core$unchecked_subtract_int__2 = function(x, y) {
    return x - y;
  };
  var cljs$core$unchecked_subtract_int__3 = function() {
    var G__7101__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_subtract_int, x - y, more);
    };
    var G__7101 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7102__i = 0, G__7102__a = new Array(arguments.length - 2);
        while (G__7102__i < G__7102__a.length) {
          G__7102__a[G__7102__i] = arguments[G__7102__i + 2];
          ++G__7102__i;
        }
        more = new cljs.core.IndexedSeq(G__7102__a, 0);
      }
      return G__7101__delegate.call(this, x, y, more);
    };
    G__7101.cljs$lang$maxFixedArity = 2;
    G__7101.cljs$lang$applyTo = function(arglist__7103) {
      var x = cljs.core.first(arglist__7103);
      arglist__7103 = cljs.core.next(arglist__7103);
      var y = cljs.core.first(arglist__7103);
      var more = cljs.core.rest(arglist__7103);
      return G__7101__delegate(x, y, more);
    };
    G__7101.cljs$core$IFn$_invoke$arity$variadic = G__7101__delegate;
    return G__7101;
  }();
  cljs$core$unchecked_subtract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$unchecked_subtract_int__1.call(this, x);
      case 2:
        return cljs$core$unchecked_subtract_int__2.call(this, x, y);
      default:
        var G__7104 = null;
        if (arguments.length > 2) {
          var G__7105__i = 0, G__7105__a = new Array(arguments.length - 2);
          while (G__7105__i < G__7105__a.length) {
            G__7105__a[G__7105__i] = arguments[G__7105__i + 2];
            ++G__7105__i;
          }
          G__7104 = new cljs.core.IndexedSeq(G__7105__a, 0);
        }
        return cljs$core$unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7104);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_subtract_int.cljs$lang$applyTo = cljs$core$unchecked_subtract_int__3.cljs$lang$applyTo;
  cljs$core$unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_subtract_int__1;
  cljs$core$unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_subtract_int__2;
  cljs$core$unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_subtract_int;
}();
cljs.core.fix = function cljs$core$fix(q) {
  if (q >= 0) {
    var G__7108 = q;
    return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__7108) : Math.floor.call(null, G__7108);
  } else {
    var G__7109 = q;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__7109) : Math.ceil.call(null, G__7109);
  }
};
cljs.core.int$ = function cljs$core$int(x) {
  return x | 0;
};
cljs.core.unchecked_int = function cljs$core$unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function cljs$core$long(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function cljs$core$unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function cljs$core$booleans(x) {
  return x;
};
cljs.core.bytes = function cljs$core$bytes(x) {
  return x;
};
cljs.core.chars = function cljs$core$chars(x) {
  return x;
};
cljs.core.shorts = function cljs$core$shorts(x) {
  return x;
};
cljs.core.ints = function cljs$core$ints(x) {
  return x;
};
cljs.core.floats = function cljs$core$floats(x) {
  return x;
};
cljs.core.doubles = function cljs$core$doubles(x) {
  return x;
};
cljs.core.longs = function cljs$core$longs(x) {
  return x;
};
cljs.core.js_mod = function cljs$core$js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function cljs$core$mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function cljs$core$quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function cljs$core$rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function() {
  var cljs$core$bit_xor = null;
  var cljs$core$bit_xor__2 = function(x, y) {
    return x ^ y;
  };
  var cljs$core$bit_xor__3 = function() {
    var G__7110__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$bit_xor, x ^ y, more);
    };
    var G__7110 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7111__i = 0, G__7111__a = new Array(arguments.length - 2);
        while (G__7111__i < G__7111__a.length) {
          G__7111__a[G__7111__i] = arguments[G__7111__i + 2];
          ++G__7111__i;
        }
        more = new cljs.core.IndexedSeq(G__7111__a, 0);
      }
      return G__7110__delegate.call(this, x, y, more);
    };
    G__7110.cljs$lang$maxFixedArity = 2;
    G__7110.cljs$lang$applyTo = function(arglist__7112) {
      var x = cljs.core.first(arglist__7112);
      arglist__7112 = cljs.core.next(arglist__7112);
      var y = cljs.core.first(arglist__7112);
      var more = cljs.core.rest(arglist__7112);
      return G__7110__delegate(x, y, more);
    };
    G__7110.cljs$core$IFn$_invoke$arity$variadic = G__7110__delegate;
    return G__7110;
  }();
  cljs$core$bit_xor = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$bit_xor__2.call(this, x, y);
      default:
        var G__7113 = null;
        if (arguments.length > 2) {
          var G__7114__i = 0, G__7114__a = new Array(arguments.length - 2);
          while (G__7114__i < G__7114__a.length) {
            G__7114__a[G__7114__i] = arguments[G__7114__i + 2];
            ++G__7114__i;
          }
          G__7113 = new cljs.core.IndexedSeq(G__7114__a, 0);
        }
        return cljs$core$bit_xor__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7113);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$bit_xor.cljs$lang$maxFixedArity = 2;
  cljs$core$bit_xor.cljs$lang$applyTo = cljs$core$bit_xor__3.cljs$lang$applyTo;
  cljs$core$bit_xor.cljs$core$IFn$_invoke$arity$2 = cljs$core$bit_xor__2;
  cljs$core$bit_xor.cljs$core$IFn$_invoke$arity$variadic = cljs$core$bit_xor__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$bit_xor;
}();
cljs.core.bit_and = function() {
  var cljs$core$bit_and = null;
  var cljs$core$bit_and__2 = function(x, y) {
    return x & y;
  };
  var cljs$core$bit_and__3 = function() {
    var G__7115__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$bit_and, x & y, more);
    };
    var G__7115 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7116__i = 0, G__7116__a = new Array(arguments.length - 2);
        while (G__7116__i < G__7116__a.length) {
          G__7116__a[G__7116__i] = arguments[G__7116__i + 2];
          ++G__7116__i;
        }
        more = new cljs.core.IndexedSeq(G__7116__a, 0);
      }
      return G__7115__delegate.call(this, x, y, more);
    };
    G__7115.cljs$lang$maxFixedArity = 2;
    G__7115.cljs$lang$applyTo = function(arglist__7117) {
      var x = cljs.core.first(arglist__7117);
      arglist__7117 = cljs.core.next(arglist__7117);
      var y = cljs.core.first(arglist__7117);
      var more = cljs.core.rest(arglist__7117);
      return G__7115__delegate(x, y, more);
    };
    G__7115.cljs$core$IFn$_invoke$arity$variadic = G__7115__delegate;
    return G__7115;
  }();
  cljs$core$bit_and = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$bit_and__2.call(this, x, y);
      default:
        var G__7118 = null;
        if (arguments.length > 2) {
          var G__7119__i = 0, G__7119__a = new Array(arguments.length - 2);
          while (G__7119__i < G__7119__a.length) {
            G__7119__a[G__7119__i] = arguments[G__7119__i + 2];
            ++G__7119__i;
          }
          G__7118 = new cljs.core.IndexedSeq(G__7119__a, 0);
        }
        return cljs$core$bit_and__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7118);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$bit_and.cljs$lang$maxFixedArity = 2;
  cljs$core$bit_and.cljs$lang$applyTo = cljs$core$bit_and__3.cljs$lang$applyTo;
  cljs$core$bit_and.cljs$core$IFn$_invoke$arity$2 = cljs$core$bit_and__2;
  cljs$core$bit_and.cljs$core$IFn$_invoke$arity$variadic = cljs$core$bit_and__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$bit_and;
}();
cljs.core.bit_or = function() {
  var cljs$core$bit_or = null;
  var cljs$core$bit_or__2 = function(x, y) {
    return x | y;
  };
  var cljs$core$bit_or__3 = function() {
    var G__7120__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$bit_or, x | y, more);
    };
    var G__7120 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7121__i = 0, G__7121__a = new Array(arguments.length - 2);
        while (G__7121__i < G__7121__a.length) {
          G__7121__a[G__7121__i] = arguments[G__7121__i + 2];
          ++G__7121__i;
        }
        more = new cljs.core.IndexedSeq(G__7121__a, 0);
      }
      return G__7120__delegate.call(this, x, y, more);
    };
    G__7120.cljs$lang$maxFixedArity = 2;
    G__7120.cljs$lang$applyTo = function(arglist__7122) {
      var x = cljs.core.first(arglist__7122);
      arglist__7122 = cljs.core.next(arglist__7122);
      var y = cljs.core.first(arglist__7122);
      var more = cljs.core.rest(arglist__7122);
      return G__7120__delegate(x, y, more);
    };
    G__7120.cljs$core$IFn$_invoke$arity$variadic = G__7120__delegate;
    return G__7120;
  }();
  cljs$core$bit_or = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$bit_or__2.call(this, x, y);
      default:
        var G__7123 = null;
        if (arguments.length > 2) {
          var G__7124__i = 0, G__7124__a = new Array(arguments.length - 2);
          while (G__7124__i < G__7124__a.length) {
            G__7124__a[G__7124__i] = arguments[G__7124__i + 2];
            ++G__7124__i;
          }
          G__7123 = new cljs.core.IndexedSeq(G__7124__a, 0);
        }
        return cljs$core$bit_or__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7123);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$bit_or.cljs$lang$maxFixedArity = 2;
  cljs$core$bit_or.cljs$lang$applyTo = cljs$core$bit_or__3.cljs$lang$applyTo;
  cljs$core$bit_or.cljs$core$IFn$_invoke$arity$2 = cljs$core$bit_or__2;
  cljs$core$bit_or.cljs$core$IFn$_invoke$arity$variadic = cljs$core$bit_or__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$bit_or;
}();
cljs.core.bit_and_not = function() {
  var cljs$core$bit_and_not = null;
  var cljs$core$bit_and_not__2 = function(x, y) {
    return x & ~y;
  };
  var cljs$core$bit_and_not__3 = function() {
    var G__7125__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$bit_and_not, x & ~y, more);
    };
    var G__7125 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7126__i = 0, G__7126__a = new Array(arguments.length - 2);
        while (G__7126__i < G__7126__a.length) {
          G__7126__a[G__7126__i] = arguments[G__7126__i + 2];
          ++G__7126__i;
        }
        more = new cljs.core.IndexedSeq(G__7126__a, 0);
      }
      return G__7125__delegate.call(this, x, y, more);
    };
    G__7125.cljs$lang$maxFixedArity = 2;
    G__7125.cljs$lang$applyTo = function(arglist__7127) {
      var x = cljs.core.first(arglist__7127);
      arglist__7127 = cljs.core.next(arglist__7127);
      var y = cljs.core.first(arglist__7127);
      var more = cljs.core.rest(arglist__7127);
      return G__7125__delegate(x, y, more);
    };
    G__7125.cljs$core$IFn$_invoke$arity$variadic = G__7125__delegate;
    return G__7125;
  }();
  cljs$core$bit_and_not = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$bit_and_not__2.call(this, x, y);
      default:
        var G__7128 = null;
        if (arguments.length > 2) {
          var G__7129__i = 0, G__7129__a = new Array(arguments.length - 2);
          while (G__7129__i < G__7129__a.length) {
            G__7129__a[G__7129__i] = arguments[G__7129__i + 2];
            ++G__7129__i;
          }
          G__7128 = new cljs.core.IndexedSeq(G__7129__a, 0);
        }
        return cljs$core$bit_and_not__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7128);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$bit_and_not.cljs$lang$maxFixedArity = 2;
  cljs$core$bit_and_not.cljs$lang$applyTo = cljs$core$bit_and_not__3.cljs$lang$applyTo;
  cljs$core$bit_and_not.cljs$core$IFn$_invoke$arity$2 = cljs$core$bit_and_not__2;
  cljs$core$bit_and_not.cljs$core$IFn$_invoke$arity$variadic = cljs$core$bit_and_not__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$bit_and_not;
}();
cljs.core.bit_clear = function cljs$core$bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function cljs$core$bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function cljs$core$bit_not(x) {
  return~x;
};
cljs.core.bit_set = function cljs$core$bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function cljs$core$bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function cljs$core$bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function cljs$core$bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function cljs$core$bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function cljs$core$unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function cljs$core$bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var cljs$core$_EQ__EQ_ = null;
  var cljs$core$_EQ__EQ___1 = function(x) {
    return true;
  };
  var cljs$core$_EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv(x, y);
  };
  var cljs$core$_EQ__EQ___3 = function() {
    var G__7134__delegate = function(x, y, more) {
      while (true) {
        if (cljs$core$_EQ__EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
          if (cljs.core.next(more)) {
            var G__7135 = y;
            var G__7136 = cljs.core.first(more);
            var G__7137 = cljs.core.next(more);
            x = G__7135;
            y = G__7136;
            more = G__7137;
            continue;
          } else {
            return cljs$core$_EQ__EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__7134 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7138__i = 0, G__7138__a = new Array(arguments.length - 2);
        while (G__7138__i < G__7138__a.length) {
          G__7138__a[G__7138__i] = arguments[G__7138__i + 2];
          ++G__7138__i;
        }
        more = new cljs.core.IndexedSeq(G__7138__a, 0);
      }
      return G__7134__delegate.call(this, x, y, more);
    };
    G__7134.cljs$lang$maxFixedArity = 2;
    G__7134.cljs$lang$applyTo = function(arglist__7139) {
      var x = cljs.core.first(arglist__7139);
      arglist__7139 = cljs.core.next(arglist__7139);
      var y = cljs.core.first(arglist__7139);
      var more = cljs.core.rest(arglist__7139);
      return G__7134__delegate(x, y, more);
    };
    G__7134.cljs$core$IFn$_invoke$arity$variadic = G__7134__delegate;
    return G__7134;
  }();
  cljs$core$_EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_EQ__EQ___1.call(this, x);
      case 2:
        return cljs$core$_EQ__EQ___2.call(this, x, y);
      default:
        var G__7140 = null;
        if (arguments.length > 2) {
          var G__7141__i = 0, G__7141__a = new Array(arguments.length - 2);
          while (G__7141__i < G__7141__a.length) {
            G__7141__a[G__7141__i] = arguments[G__7141__i + 2];
            ++G__7141__i;
          }
          G__7140 = new cljs.core.IndexedSeq(G__7141__a, 0);
        }
        return cljs$core$_EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7140);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_EQ__EQ_.cljs$lang$maxFixedArity = 2;
  cljs$core$_EQ__EQ_.cljs$lang$applyTo = cljs$core$_EQ__EQ___3.cljs$lang$applyTo;
  cljs$core$_EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_EQ__EQ___1;
  cljs$core$_EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_EQ__EQ___2;
  cljs$core$_EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function cljs$core$pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function cljs$core$zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function cljs$core$neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function cljs$core$nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__7142 = n__$1 - 1;
      var G__7143 = cljs.core.next(xs);
      n__$1 = G__7142;
      xs = G__7143;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var cljs$core$str = null;
  var cljs$core$str__0 = function() {
    return "";
  };
  var cljs$core$str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      var G__7147 = x;
      return goog.string.buildString(G__7147);
    }
  };
  var cljs$core$str__2 = function() {
    var G__7148__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(cljs$core$str.cljs$core$IFn$_invoke$arity$1(x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__7149 = sb.append(cljs$core$str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(more)));
          var G__7150 = cljs.core.next(more);
          sb = G__7149;
          more = G__7150;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__7148 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        var G__7151__i = 0, G__7151__a = new Array(arguments.length - 1);
        while (G__7151__i < G__7151__a.length) {
          G__7151__a[G__7151__i] = arguments[G__7151__i + 1];
          ++G__7151__i;
        }
        ys = new cljs.core.IndexedSeq(G__7151__a, 0);
      }
      return G__7148__delegate.call(this, x, ys);
    };
    G__7148.cljs$lang$maxFixedArity = 1;
    G__7148.cljs$lang$applyTo = function(arglist__7152) {
      var x = cljs.core.first(arglist__7152);
      var ys = cljs.core.rest(arglist__7152);
      return G__7148__delegate(x, ys);
    };
    G__7148.cljs$core$IFn$_invoke$arity$variadic = G__7148__delegate;
    return G__7148;
  }();
  cljs$core$str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$str__0.call(this);
      case 1:
        return cljs$core$str__1.call(this, x);
      default:
        var G__7153 = null;
        if (arguments.length > 1) {
          var G__7154__i = 0, G__7154__a = new Array(arguments.length - 1);
          while (G__7154__i < G__7154__a.length) {
            G__7154__a[G__7154__i] = arguments[G__7154__i + 1];
            ++G__7154__i;
          }
          G__7153 = new cljs.core.IndexedSeq(G__7154__a, 0);
        }
        return cljs$core$str__2.cljs$core$IFn$_invoke$arity$variadic(x, G__7153);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$str.cljs$lang$maxFixedArity = 1;
  cljs$core$str.cljs$lang$applyTo = cljs$core$str__2.cljs$lang$applyTo;
  cljs$core$str.cljs$core$IFn$_invoke$arity$0 = cljs$core$str__0;
  cljs$core$str.cljs$core$IFn$_invoke$arity$1 = cljs$core$str__1;
  cljs$core$str.cljs$core$IFn$_invoke$arity$variadic = cljs$core$str__2.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$str;
}();
cljs.core.subs = function() {
  var cljs$core$subs = null;
  var cljs$core$subs__2 = function(s, start) {
    return s.substring(start);
  };
  var cljs$core$subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  cljs$core$subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return cljs$core$subs__2.call(this, s, start);
      case 3:
        return cljs$core$subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$subs.cljs$core$IFn$_invoke$arity$2 = cljs$core$subs__2;
  cljs$core$subs.cljs$core$IFn$_invoke$arity$3 = cljs$core$subs__3;
  return cljs$core$subs;
}();
cljs.core.equiv_sequential = function cljs$core$equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__7155 = cljs.core.next(xs);
            var G__7156 = cljs.core.next(ys);
            xs = G__7155;
            ys = G__7156;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function cljs$core$hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__7157 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__7158 = cljs.core.next(s);
        res = G__7157;
        s = G__7158;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function cljs$core$hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__7163 = (h + (cljs.core.hash(function() {
        var G__7161 = e;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__7161) : cljs.core.key.call(null, G__7161);
      }()) ^ cljs.core.hash(function() {
        var G__7162 = e;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__7162) : cljs.core.val.call(null, G__7162);
      }()))) % 4503599627370496;
      var G__7164 = cljs.core.next(s);
      h = G__7163;
      s = G__7164;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function cljs$core$hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__7165 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__7166 = cljs.core.next(s__$1);
      h = G__7165;
      s__$1 = G__7166;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function cljs$core$extend_object_BANG_(obj, fn_map) {
  var seq__7177_7187 = cljs.core.seq(fn_map);
  var chunk__7178_7188 = null;
  var count__7179_7189 = 0;
  var i__7180_7190 = 0;
  while (true) {
    if (i__7180_7190 < count__7179_7189) {
      var vec__7181_7191 = chunk__7178_7188.cljs$core$IIndexed$_nth$arity$2(null, i__7180_7190);
      var key_name_7192 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7181_7191, 0, null);
      var f_7193 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7181_7191, 1, null);
      var str_name_7194 = function() {
        var G__7182 = key_name_7192;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__7182) : cljs.core.name.call(null, G__7182);
      }();
      obj[str_name_7194] = f_7193;
      var G__7195 = seq__7177_7187;
      var G__7196 = chunk__7178_7188;
      var G__7197 = count__7179_7189;
      var G__7198 = i__7180_7190 + 1;
      seq__7177_7187 = G__7195;
      chunk__7178_7188 = G__7196;
      count__7179_7189 = G__7197;
      i__7180_7190 = G__7198;
      continue;
    } else {
      var temp__4126__auto___7199 = cljs.core.seq(seq__7177_7187);
      if (temp__4126__auto___7199) {
        var seq__7177_7200__$1 = temp__4126__auto___7199;
        if (cljs.core.chunked_seq_QMARK_(seq__7177_7200__$1)) {
          var c__4907__auto___7201 = function() {
            var G__7183 = seq__7177_7200__$1;
            return cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(G__7183) : cljs.core.chunk_first.call(null, G__7183);
          }();
          var G__7202 = function() {
            var G__7184 = seq__7177_7200__$1;
            return cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(G__7184) : cljs.core.chunk_rest.call(null, G__7184);
          }();
          var G__7203 = c__4907__auto___7201;
          var G__7204 = cljs.core.count(c__4907__auto___7201);
          var G__7205 = 0;
          seq__7177_7187 = G__7202;
          chunk__7178_7188 = G__7203;
          count__7179_7189 = G__7204;
          i__7180_7190 = G__7205;
          continue;
        } else {
          var vec__7185_7206 = cljs.core.first(seq__7177_7200__$1);
          var key_name_7207 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7185_7206, 0, null);
          var f_7208 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7185_7206, 1, null);
          var str_name_7209 = function() {
            var G__7186 = key_name_7207;
            return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__7186) : cljs.core.name.call(null, G__7186);
          }();
          obj[str_name_7209] = f_7208;
          var G__7210 = cljs.core.next(seq__7177_7200__$1);
          var G__7211 = null;
          var G__7212 = 0;
          var G__7213 = 0;
          seq__7177_7187 = G__7210;
          chunk__7178_7188 = G__7211;
          count__7179_7189 = G__7212;
          i__7180_7190 = G__7213;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function cljs$core$__GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function cljs$core$__GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.reversible_QMARK_ = function cljs$core$reversible_QMARK_(coll) {
  var G__7215 = coll;
  if (G__7215) {
    var bit__4796__auto__ = G__7215.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4796__auto__ || G__7215.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__7215.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__7215);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__7215);
  }
};
cljs.core.rseq = function cljs$core$rseq(coll) {
  return cljs.core._rseq(coll);
};
cljs.core.reverse = function cljs$core$reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var cljs$core$list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
          var G__7216 = xs__$1.cljs$core$INext$_next$arity$1(null);
          xs__$1 = G__7216;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__7217 = i - 1;
        var G__7218 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
        i = G__7217;
        r = G__7218;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var cljs$core$list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      var G__7219__i = 0, G__7219__a = new Array(arguments.length - 0);
      while (G__7219__i < G__7219__a.length) {
        G__7219__a[G__7219__i] = arguments[G__7219__i + 0];
        ++G__7219__i;
      }
      xs = new cljs.core.IndexedSeq(G__7219__a, 0);
    }
    return cljs$core$list__delegate.call(this, xs);
  };
  cljs$core$list.cljs$lang$maxFixedArity = 0;
  cljs$core$list.cljs$lang$applyTo = function(arglist__7220) {
    var xs = cljs.core.seq(arglist__7220);
    return cljs$core$list__delegate(xs);
  };
  cljs$core$list.cljs$core$IFn$_invoke$arity$variadic = cljs$core$list__delegate;
  return cljs$core$list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function cljs$core$__GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.cons = function cljs$core$cons(x, coll) {
  if (function() {
    var or__4122__auto__ = coll == null;
    if (or__4122__auto__) {
      return or__4122__auto__;
    } else {
      var G__7224 = coll;
      if (G__7224) {
        var bit__4789__auto__ = G__7224.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4789__auto__ || G__7224.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.list_QMARK_ = function cljs$core$list_QMARK_(x) {
  var G__7226 = x;
  if (G__7226) {
    var bit__4796__auto__ = G__7226.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4796__auto__ || G__7226.cljs$core$IList$) {
      return true;
    } else {
      if (!G__7226.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__7226);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__7226);
  }
};
cljs.core.hash_keyword = function cljs$core$hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function cljs$core$compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4110__auto__ = cljs.core.not(a.ns);
      if (and__4110__auto__) {
        return b.ns;
      } else {
        return and__4110__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__7233 = a.ns;
            var G__7234 = b.ns;
            return goog.array.defaultCompare(G__7233, G__7234);
          }();
          if (0 === nsc) {
            var G__7235 = a.name;
            var G__7236 = b.name;
            return goog.array.defaultCompare(G__7235, G__7236);
          } else {
            return nsc;
          }
        }
      } else {
        var G__7237 = a.name;
        var G__7238 = b.name;
        return goog.array.defaultCompare(G__7237, G__7238);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4538__auto__ = self__._hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__7240 = null;
  var G__7240__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__7240__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__7240 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7240__2.call(this, self__, coll);
      case 3:
        return G__7240__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__7240.cljs$core$IFn$_invoke$arity$2 = G__7240__2;
  G__7240.cljs$core$IFn$_invoke$arity$3 = G__7240__3;
  return G__7240;
}();
cljs.core.Keyword.prototype.apply = function(self__, args7239) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args7239)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function cljs$core$__GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function cljs$core$keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function cljs$core$keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function cljs$core$namespace(x) {
  if (function() {
    var G__7242 = x;
    if (G__7242) {
      var bit__4789__auto__ = G__7242.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4789__auto__ || G__7242.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var cljs$core$keyword = null;
  var cljs$core$keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace(name), function() {
          var G__7244 = name;
          return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__7244) : cljs.core.name.call(null, G__7244);
        }(), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var cljs$core$keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  cljs$core$keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return cljs$core$keyword__1.call(this, ns);
      case 2:
        return cljs$core$keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$keyword.cljs$core$IFn$_invoke$arity$1 = cljs$core$keyword__1;
  cljs$core$keyword.cljs$core$IFn$_invoke$arity$2 = cljs$core$keyword__2;
  return cljs$core$keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = function() {
      return self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    }();
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__7245 = ls.sval();
        ls = G__7245;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function cljs$core$__GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function cljs$core$__GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function cljs$core$chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function cljs$core$__GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var cljs$core$array_chunk = null;
  var cljs$core$array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var cljs$core$array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var cljs$core$array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  cljs$core$array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return cljs$core$array_chunk__1.call(this, arr);
      case 2:
        return cljs$core$array_chunk__2.call(this, arr, off);
      case 3:
        return cljs$core$array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$array_chunk.cljs$core$IFn$_invoke$arity$1 = cljs$core$array_chunk__1;
  cljs$core$array_chunk.cljs$core$IFn$_invoke$arity$2 = cljs$core$array_chunk__2;
  cljs$core$array_chunk.cljs$core$IFn$_invoke$arity$3 = cljs$core$array_chunk__3;
  return cljs$core$array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function cljs$core$__GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.chunk_cons = function cljs$core$chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function cljs$core$chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function cljs$core$chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function cljs$core$chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function cljs$core$chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function cljs$core$chunk_next(s) {
  if (function() {
    var G__7247 = s;
    if (G__7247) {
      var bit__4789__auto__ = G__7247.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4789__auto__ || G__7247.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function cljs$core$to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__7248 = cljs.core.next(s__$1);
      s__$1 = G__7248;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function cljs$core$to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_7249 = 0;
  var xs_7250 = cljs.core.seq(coll);
  while (true) {
    if (xs_7250) {
      ret[i_7249] = cljs.core.to_array(cljs.core.first(xs_7250));
      var G__7251 = i_7249 + 1;
      var G__7252 = cljs.core.next(xs_7250);
      i_7249 = G__7251;
      xs_7250 = G__7252;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var cljs$core$int_array = null;
  var cljs$core$int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return cljs$core$int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var cljs$core$int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__7255 = i + 1;
          var G__7256 = cljs.core.next(s__$1);
          i = G__7255;
          s__$1 = G__7256;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__5007__auto___7257 = size;
      var i_7258 = 0;
      while (true) {
        if (i_7258 < n__5007__auto___7257) {
          a[i_7258] = init_val_or_seq;
          var G__7259 = i_7258 + 1;
          i_7258 = G__7259;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  cljs$core$int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return cljs$core$int_array__1.call(this, size);
      case 2:
        return cljs$core$int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$int_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$int_array__1;
  cljs$core$int_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$int_array__2;
  return cljs$core$int_array;
}();
cljs.core.long_array = function() {
  var cljs$core$long_array = null;
  var cljs$core$long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return cljs$core$long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var cljs$core$long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__7262 = i + 1;
          var G__7263 = cljs.core.next(s__$1);
          i = G__7262;
          s__$1 = G__7263;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__5007__auto___7264 = size;
      var i_7265 = 0;
      while (true) {
        if (i_7265 < n__5007__auto___7264) {
          a[i_7265] = init_val_or_seq;
          var G__7266 = i_7265 + 1;
          i_7265 = G__7266;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  cljs$core$long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return cljs$core$long_array__1.call(this, size);
      case 2:
        return cljs$core$long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$long_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$long_array__1;
  cljs$core$long_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$long_array__2;
  return cljs$core$long_array;
}();
cljs.core.double_array = function() {
  var cljs$core$double_array = null;
  var cljs$core$double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return cljs$core$double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var cljs$core$double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__7269 = i + 1;
          var G__7270 = cljs.core.next(s__$1);
          i = G__7269;
          s__$1 = G__7270;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__5007__auto___7271 = size;
      var i_7272 = 0;
      while (true) {
        if (i_7272 < n__5007__auto___7271) {
          a[i_7272] = init_val_or_seq;
          var G__7273 = i_7272 + 1;
          i_7272 = G__7273;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  cljs$core$double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return cljs$core$double_array__1.call(this, size);
      case 2:
        return cljs$core$double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$double_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$double_array__1;
  cljs$core$double_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$double_array__2;
  return cljs$core$double_array;
}();
cljs.core.object_array = function() {
  var cljs$core$object_array = null;
  var cljs$core$object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return cljs$core$object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var cljs$core$object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__7276 = i + 1;
          var G__7277 = cljs.core.next(s__$1);
          i = G__7276;
          s__$1 = G__7277;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__5007__auto___7278 = size;
      var i_7279 = 0;
      while (true) {
        if (i_7279 < n__5007__auto___7278) {
          a[i_7279] = init_val_or_seq;
          var G__7280 = i_7279 + 1;
          i_7279 = G__7280;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  cljs$core$object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return cljs$core$object_array__1.call(this, size);
      case 2:
        return cljs$core$object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$object_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$object_array__1;
  cljs$core$object_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$object_array__2;
  return cljs$core$object_array;
}();
cljs.core.bounded_count = function cljs$core$bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__7281 = cljs.core.next(s__$1);
        var G__7282 = i - 1;
        var G__7283 = sum + 1;
        s__$1 = G__7281;
        i = G__7282;
        sum = G__7283;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function cljs$core$spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), cljs$core$spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function() {
  var cljs$core$concat = null;
  var cljs$core$concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var cljs$core$concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var cljs$core$concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq(x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_(s)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs$core$concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
        } else {
          return cljs.core.cons(cljs.core.first(s), cljs$core$concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var cljs$core$concat__3 = function() {
    var G__7303__delegate = function(x, y, zs) {
      var cat = function cljs$core$concat_$_cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq(xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
              return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$concat_$_cat(cljs.core.chunk_rest(xys__$1), zs__$1));
            } else {
              return cljs.core.cons(cljs.core.first(xys__$1), cljs$core$concat_$_cat(cljs.core.rest(xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cljs$core$concat_$_cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat(cljs$core$concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
    };
    var G__7303 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        var G__7304__i = 0, G__7304__a = new Array(arguments.length - 2);
        while (G__7304__i < G__7304__a.length) {
          G__7304__a[G__7304__i] = arguments[G__7304__i + 2];
          ++G__7304__i;
        }
        zs = new cljs.core.IndexedSeq(G__7304__a, 0);
      }
      return G__7303__delegate.call(this, x, y, zs);
    };
    G__7303.cljs$lang$maxFixedArity = 2;
    G__7303.cljs$lang$applyTo = function(arglist__7305) {
      var x = cljs.core.first(arglist__7305);
      arglist__7305 = cljs.core.next(arglist__7305);
      var y = cljs.core.first(arglist__7305);
      var zs = cljs.core.rest(arglist__7305);
      return G__7303__delegate(x, y, zs);
    };
    G__7303.cljs$core$IFn$_invoke$arity$variadic = G__7303__delegate;
    return G__7303;
  }();
  cljs$core$concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$concat__0.call(this);
      case 1:
        return cljs$core$concat__1.call(this, x);
      case 2:
        return cljs$core$concat__2.call(this, x, y);
      default:
        var G__7306 = null;
        if (arguments.length > 2) {
          var G__7307__i = 0, G__7307__a = new Array(arguments.length - 2);
          while (G__7307__i < G__7307__a.length) {
            G__7307__a[G__7307__i] = arguments[G__7307__i + 2];
            ++G__7307__i;
          }
          G__7306 = new cljs.core.IndexedSeq(G__7307__a, 0);
        }
        return cljs$core$concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7306);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$concat.cljs$lang$maxFixedArity = 2;
  cljs$core$concat.cljs$lang$applyTo = cljs$core$concat__3.cljs$lang$applyTo;
  cljs$core$concat.cljs$core$IFn$_invoke$arity$0 = cljs$core$concat__0;
  cljs$core$concat.cljs$core$IFn$_invoke$arity$1 = cljs$core$concat__1;
  cljs$core$concat.cljs$core$IFn$_invoke$arity$2 = cljs$core$concat__2;
  cljs$core$concat.cljs$core$IFn$_invoke$arity$variadic = cljs$core$concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$concat;
}();
cljs.core.list_STAR_ = function() {
  var cljs$core$list_STAR_ = null;
  var cljs$core$list_STAR___1 = function(args) {
    return cljs.core.seq(args);
  };
  var cljs$core$list_STAR___2 = function(a, args) {
    return cljs.core.cons(a, args);
  };
  var cljs$core$list_STAR___3 = function(a, b, args) {
    return cljs.core.cons(a, cljs.core.cons(b, args));
  };
  var cljs$core$list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
  };
  var cljs$core$list_STAR___5 = function() {
    var G__7308__delegate = function(a, b, c, d, more) {
      return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
    };
    var G__7308 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__7309__i = 0, G__7309__a = new Array(arguments.length - 4);
        while (G__7309__i < G__7309__a.length) {
          G__7309__a[G__7309__i] = arguments[G__7309__i + 4];
          ++G__7309__i;
        }
        more = new cljs.core.IndexedSeq(G__7309__a, 0);
      }
      return G__7308__delegate.call(this, a, b, c, d, more);
    };
    G__7308.cljs$lang$maxFixedArity = 4;
    G__7308.cljs$lang$applyTo = function(arglist__7310) {
      var a = cljs.core.first(arglist__7310);
      arglist__7310 = cljs.core.next(arglist__7310);
      var b = cljs.core.first(arglist__7310);
      arglist__7310 = cljs.core.next(arglist__7310);
      var c = cljs.core.first(arglist__7310);
      arglist__7310 = cljs.core.next(arglist__7310);
      var d = cljs.core.first(arglist__7310);
      var more = cljs.core.rest(arglist__7310);
      return G__7308__delegate(a, b, c, d, more);
    };
    G__7308.cljs$core$IFn$_invoke$arity$variadic = G__7308__delegate;
    return G__7308;
  }();
  cljs$core$list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$list_STAR___1.call(this, a);
      case 2:
        return cljs$core$list_STAR___2.call(this, a, b);
      case 3:
        return cljs$core$list_STAR___3.call(this, a, b, c);
      case 4:
        return cljs$core$list_STAR___4.call(this, a, b, c, d);
      default:
        var G__7311 = null;
        if (arguments.length > 4) {
          var G__7312__i = 0, G__7312__a = new Array(arguments.length - 4);
          while (G__7312__i < G__7312__a.length) {
            G__7312__a[G__7312__i] = arguments[G__7312__i + 4];
            ++G__7312__i;
          }
          G__7311 = new cljs.core.IndexedSeq(G__7312__a, 0);
        }
        return cljs$core$list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, G__7311);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$list_STAR_.cljs$lang$maxFixedArity = 4;
  cljs$core$list_STAR_.cljs$lang$applyTo = cljs$core$list_STAR___5.cljs$lang$applyTo;
  cljs$core$list_STAR_.cljs$core$IFn$_invoke$arity$1 = cljs$core$list_STAR___1;
  cljs$core$list_STAR_.cljs$core$IFn$_invoke$arity$2 = cljs$core$list_STAR___2;
  cljs$core$list_STAR_.cljs$core$IFn$_invoke$arity$3 = cljs$core$list_STAR___3;
  cljs$core$list_STAR_.cljs$core$IFn$_invoke$arity$4 = cljs$core$list_STAR___4;
  cljs$core$list_STAR_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$list_STAR_;
}();
cljs.core.transient$ = function cljs$core$transient(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function cljs$core$persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function() {
  var cljs$core$conj_BANG_ = null;
  var cljs$core$conj_BANG___0 = function() {
    return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
  };
  var cljs$core$conj_BANG___1 = function(coll) {
    return coll;
  };
  var cljs$core$conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_(tcoll, val);
  };
  var cljs$core$conj_BANG___3 = function() {
    var G__7313__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_(tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__7314 = ntcoll;
          var G__7315 = cljs.core.first(vals);
          var G__7316 = cljs.core.next(vals);
          tcoll = G__7314;
          val = G__7315;
          vals = G__7316;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__7313 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        var G__7317__i = 0, G__7317__a = new Array(arguments.length - 2);
        while (G__7317__i < G__7317__a.length) {
          G__7317__a[G__7317__i] = arguments[G__7317__i + 2];
          ++G__7317__i;
        }
        vals = new cljs.core.IndexedSeq(G__7317__a, 0);
      }
      return G__7313__delegate.call(this, tcoll, val, vals);
    };
    G__7313.cljs$lang$maxFixedArity = 2;
    G__7313.cljs$lang$applyTo = function(arglist__7318) {
      var tcoll = cljs.core.first(arglist__7318);
      arglist__7318 = cljs.core.next(arglist__7318);
      var val = cljs.core.first(arglist__7318);
      var vals = cljs.core.rest(arglist__7318);
      return G__7313__delegate(tcoll, val, vals);
    };
    G__7313.cljs$core$IFn$_invoke$arity$variadic = G__7313__delegate;
    return G__7313;
  }();
  cljs$core$conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$conj_BANG___0.call(this);
      case 1:
        return cljs$core$conj_BANG___1.call(this, tcoll);
      case 2:
        return cljs$core$conj_BANG___2.call(this, tcoll, val);
      default:
        var G__7319 = null;
        if (arguments.length > 2) {
          var G__7320__i = 0, G__7320__a = new Array(arguments.length - 2);
          while (G__7320__i < G__7320__a.length) {
            G__7320__a[G__7320__i] = arguments[G__7320__i + 2];
            ++G__7320__i;
          }
          G__7319 = new cljs.core.IndexedSeq(G__7320__a, 0);
        }
        return cljs$core$conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, G__7319);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$conj_BANG_.cljs$lang$maxFixedArity = 2;
  cljs$core$conj_BANG_.cljs$lang$applyTo = cljs$core$conj_BANG___3.cljs$lang$applyTo;
  cljs$core$conj_BANG_.cljs$core$IFn$_invoke$arity$0 = cljs$core$conj_BANG___0;
  cljs$core$conj_BANG_.cljs$core$IFn$_invoke$arity$1 = cljs$core$conj_BANG___1;
  cljs$core$conj_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$conj_BANG___2;
  cljs$core$conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var cljs$core$assoc_BANG_ = null;
  var cljs$core$assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_(tcoll, key, val);
  };
  var cljs$core$assoc_BANG___4 = function() {
    var G__7321__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__7322 = ntcoll;
          var G__7323 = cljs.core.first(kvs);
          var G__7324 = cljs.core.second(kvs);
          var G__7325 = cljs.core.nnext(kvs);
          tcoll = G__7322;
          key = G__7323;
          val = G__7324;
          kvs = G__7325;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__7321 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        var G__7326__i = 0, G__7326__a = new Array(arguments.length - 3);
        while (G__7326__i < G__7326__a.length) {
          G__7326__a[G__7326__i] = arguments[G__7326__i + 3];
          ++G__7326__i;
        }
        kvs = new cljs.core.IndexedSeq(G__7326__a, 0);
      }
      return G__7321__delegate.call(this, tcoll, key, val, kvs);
    };
    G__7321.cljs$lang$maxFixedArity = 3;
    G__7321.cljs$lang$applyTo = function(arglist__7327) {
      var tcoll = cljs.core.first(arglist__7327);
      arglist__7327 = cljs.core.next(arglist__7327);
      var key = cljs.core.first(arglist__7327);
      arglist__7327 = cljs.core.next(arglist__7327);
      var val = cljs.core.first(arglist__7327);
      var kvs = cljs.core.rest(arglist__7327);
      return G__7321__delegate(tcoll, key, val, kvs);
    };
    G__7321.cljs$core$IFn$_invoke$arity$variadic = G__7321__delegate;
    return G__7321;
  }();
  cljs$core$assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return cljs$core$assoc_BANG___3.call(this, tcoll, key, val);
      default:
        var G__7328 = null;
        if (arguments.length > 3) {
          var G__7329__i = 0, G__7329__a = new Array(arguments.length - 3);
          while (G__7329__i < G__7329__a.length) {
            G__7329__a[G__7329__i] = arguments[G__7329__i + 3];
            ++G__7329__i;
          }
          G__7328 = new cljs.core.IndexedSeq(G__7329__a, 0);
        }
        return cljs$core$assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, G__7328);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$assoc_BANG_.cljs$lang$maxFixedArity = 3;
  cljs$core$assoc_BANG_.cljs$lang$applyTo = cljs$core$assoc_BANG___4.cljs$lang$applyTo;
  cljs$core$assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = cljs$core$assoc_BANG___3;
  cljs$core$assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var cljs$core$dissoc_BANG_ = null;
  var cljs$core$dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_(tcoll, key);
  };
  var cljs$core$dissoc_BANG___3 = function() {
    var G__7330__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__7331 = ntcoll;
          var G__7332 = cljs.core.first(ks);
          var G__7333 = cljs.core.next(ks);
          tcoll = G__7331;
          key = G__7332;
          ks = G__7333;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__7330 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__7334__i = 0, G__7334__a = new Array(arguments.length - 2);
        while (G__7334__i < G__7334__a.length) {
          G__7334__a[G__7334__i] = arguments[G__7334__i + 2];
          ++G__7334__i;
        }
        ks = new cljs.core.IndexedSeq(G__7334__a, 0);
      }
      return G__7330__delegate.call(this, tcoll, key, ks);
    };
    G__7330.cljs$lang$maxFixedArity = 2;
    G__7330.cljs$lang$applyTo = function(arglist__7335) {
      var tcoll = cljs.core.first(arglist__7335);
      arglist__7335 = cljs.core.next(arglist__7335);
      var key = cljs.core.first(arglist__7335);
      var ks = cljs.core.rest(arglist__7335);
      return G__7330__delegate(tcoll, key, ks);
    };
    G__7330.cljs$core$IFn$_invoke$arity$variadic = G__7330__delegate;
    return G__7330;
  }();
  cljs$core$dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$dissoc_BANG___2.call(this, tcoll, key);
      default:
        var G__7336 = null;
        if (arguments.length > 2) {
          var G__7337__i = 0, G__7337__a = new Array(arguments.length - 2);
          while (G__7337__i < G__7337__a.length) {
            G__7337__a[G__7337__i] = arguments[G__7337__i + 2];
            ++G__7337__i;
          }
          G__7336 = new cljs.core.IndexedSeq(G__7337__a, 0);
        }
        return cljs$core$dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, G__7336);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  cljs$core$dissoc_BANG_.cljs$lang$applyTo = cljs$core$dissoc_BANG___3.cljs$lang$applyTo;
  cljs$core$dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$dissoc_BANG___2;
  cljs$core$dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function cljs$core$pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function() {
  var cljs$core$disj_BANG_ = null;
  var cljs$core$disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_(tcoll, val);
  };
  var cljs$core$disj_BANG___3 = function() {
    var G__7338__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__7339 = ntcoll;
          var G__7340 = cljs.core.first(vals);
          var G__7341 = cljs.core.next(vals);
          tcoll = G__7339;
          val = G__7340;
          vals = G__7341;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__7338 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        var G__7342__i = 0, G__7342__a = new Array(arguments.length - 2);
        while (G__7342__i < G__7342__a.length) {
          G__7342__a[G__7342__i] = arguments[G__7342__i + 2];
          ++G__7342__i;
        }
        vals = new cljs.core.IndexedSeq(G__7342__a, 0);
      }
      return G__7338__delegate.call(this, tcoll, val, vals);
    };
    G__7338.cljs$lang$maxFixedArity = 2;
    G__7338.cljs$lang$applyTo = function(arglist__7343) {
      var tcoll = cljs.core.first(arglist__7343);
      arglist__7343 = cljs.core.next(arglist__7343);
      var val = cljs.core.first(arglist__7343);
      var vals = cljs.core.rest(arglist__7343);
      return G__7338__delegate(tcoll, val, vals);
    };
    G__7338.cljs$core$IFn$_invoke$arity$variadic = G__7338__delegate;
    return G__7338;
  }();
  cljs$core$disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$disj_BANG___2.call(this, tcoll, val);
      default:
        var G__7344 = null;
        if (arguments.length > 2) {
          var G__7345__i = 0, G__7345__a = new Array(arguments.length - 2);
          while (G__7345__i < G__7345__a.length) {
            G__7345__a[G__7345__i] = arguments[G__7345__i + 2];
            ++G__7345__i;
          }
          G__7344 = new cljs.core.IndexedSeq(G__7345__a, 0);
        }
        return cljs$core$disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, G__7344);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$disj_BANG_.cljs$lang$maxFixedArity = 2;
  cljs$core$disj_BANG_.cljs$lang$applyTo = cljs$core$disj_BANG___3.cljs$lang$applyTo;
  cljs$core$disj_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$disj_BANG___2;
  cljs$core$disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$disj_BANG_;
}();
cljs.core.apply_to = function cljs$core$apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a5051 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a5051);
      } else {
        var G__7556 = a5051;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7556) : f.call(null, G__7556);
      }
    } else {
      var b5052 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a5051, b5052);
        } else {
          var G__7557 = a5051;
          var G__7558 = b5052;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7557, G__7558) : f.call(null, G__7557, G__7558);
        }
      } else {
        var c5053 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a5051, b5052, c5053);
          } else {
            var G__7559 = a5051;
            var G__7560 = b5052;
            var G__7561 = c5053;
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__7559, G__7560, G__7561) : f.call(null, G__7559, G__7560, G__7561);
          }
        } else {
          var d5054 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a5051, b5052, c5053, d5054);
            } else {
              var G__7562 = a5051;
              var G__7563 = b5052;
              var G__7564 = c5053;
              var G__7565 = d5054;
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__7562, G__7563, G__7564, G__7565) : f.call(null, G__7562, G__7563, G__7564, G__7565);
            }
          } else {
            var e5055 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a5051, b5052, c5053, d5054, e5055);
              } else {
                var G__7566 = a5051;
                var G__7567 = b5052;
                var G__7568 = c5053;
                var G__7569 = d5054;
                var G__7570 = e5055;
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__7566, G__7567, G__7568, G__7569, G__7570) : f.call(null, G__7566, G__7567, G__7568, G__7569, G__7570);
              }
            } else {
              var f5056 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a5051, b5052, c5053, d5054, e5055, f5056);
                } else {
                  var G__7571 = a5051;
                  var G__7572 = b5052;
                  var G__7573 = c5053;
                  var G__7574 = d5054;
                  var G__7575 = e5055;
                  var G__7576 = f5056;
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__7571, G__7572, G__7573, G__7574, G__7575, G__7576) : f.call(null, G__7571, G__7572, G__7573, G__7574, G__7575, G__7576);
                }
              } else {
                var g5057 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a5051, b5052, c5053, d5054, e5055, f5056, g5057);
                  } else {
                    var G__7577 = a5051;
                    var G__7578 = b5052;
                    var G__7579 = c5053;
                    var G__7580 = d5054;
                    var G__7581 = e5055;
                    var G__7582 = f5056;
                    var G__7583 = g5057;
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(G__7577, G__7578, G__7579, G__7580, G__7581, G__7582, G__7583) : f.call(null, G__7577, G__7578, G__7579, G__7580, G__7581, G__7582, G__7583);
                  }
                } else {
                  var h5058 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058);
                    } else {
                      var G__7584 = a5051;
                      var G__7585 = b5052;
                      var G__7586 = c5053;
                      var G__7587 = d5054;
                      var G__7588 = e5055;
                      var G__7589 = f5056;
                      var G__7590 = g5057;
                      var G__7591 = h5058;
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(G__7584, G__7585, G__7586, G__7587, G__7588, G__7589, G__7590, G__7591) : f.call(null, G__7584, G__7585, G__7586, G__7587, G__7588, G__7589, G__7590, G__7591);
                    }
                  } else {
                    var i5059 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059);
                      } else {
                        var G__7592 = a5051;
                        var G__7593 = b5052;
                        var G__7594 = c5053;
                        var G__7595 = d5054;
                        var G__7596 = e5055;
                        var G__7597 = f5056;
                        var G__7598 = g5057;
                        var G__7599 = h5058;
                        var G__7600 = i5059;
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(G__7592, G__7593, G__7594, G__7595, G__7596, G__7597, G__7598, G__7599, G__7600) : f.call(null, G__7592, G__7593, G__7594, G__7595, G__7596, G__7597, G__7598, G__7599, G__7600);
                      }
                    } else {
                      var j5060 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060);
                        } else {
                          var G__7601 = a5051;
                          var G__7602 = b5052;
                          var G__7603 = c5053;
                          var G__7604 = d5054;
                          var G__7605 = e5055;
                          var G__7606 = f5056;
                          var G__7607 = g5057;
                          var G__7608 = h5058;
                          var G__7609 = i5059;
                          var G__7610 = j5060;
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(G__7601, G__7602, G__7603, G__7604, G__7605, G__7606, G__7607, G__7608, G__7609, G__7610) : f.call(null, G__7601, G__7602, G__7603, G__7604, G__7605, G__7606, G__7607, G__7608, G__7609, G__7610);
                        }
                      } else {
                        var k5061 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061);
                          } else {
                            var G__7611 = a5051;
                            var G__7612 = b5052;
                            var G__7613 = c5053;
                            var G__7614 = d5054;
                            var G__7615 = e5055;
                            var G__7616 = f5056;
                            var G__7617 = g5057;
                            var G__7618 = h5058;
                            var G__7619 = i5059;
                            var G__7620 = j5060;
                            var G__7621 = k5061;
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(G__7611, G__7612, G__7613, G__7614, G__7615, G__7616, G__7617, G__7618, G__7619, G__7620, G__7621) : f.call(null, G__7611, G__7612, G__7613, G__7614, G__7615, G__7616, G__7617, G__7618, G__7619, G__7620, G__7621);
                          }
                        } else {
                          var l5062 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062);
                            } else {
                              var G__7622 = a5051;
                              var G__7623 = b5052;
                              var G__7624 = c5053;
                              var G__7625 = d5054;
                              var G__7626 = e5055;
                              var G__7627 = f5056;
                              var G__7628 = g5057;
                              var G__7629 = h5058;
                              var G__7630 = i5059;
                              var G__7631 = j5060;
                              var G__7632 = k5061;
                              var G__7633 = l5062;
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(G__7622, G__7623, G__7624, G__7625, G__7626, G__7627, G__7628, G__7629, G__7630, G__7631, G__7632, G__7633) : f.call(null, G__7622, G__7623, G__7624, G__7625, G__7626, G__7627, G__7628, G__7629, G__7630, G__7631, G__7632, G__7633);
                            }
                          } else {
                            var m5063 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063);
                              } else {
                                var G__7634 = a5051;
                                var G__7635 = b5052;
                                var G__7636 = c5053;
                                var G__7637 = d5054;
                                var G__7638 = e5055;
                                var G__7639 = f5056;
                                var G__7640 = g5057;
                                var G__7641 = h5058;
                                var G__7642 = i5059;
                                var G__7643 = j5060;
                                var G__7644 = k5061;
                                var G__7645 = l5062;
                                var G__7646 = m5063;
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(G__7634, G__7635, G__7636, G__7637, G__7638, G__7639, G__7640, G__7641, G__7642, G__7643, G__7644, G__7645, G__7646) : f.call(null, G__7634, G__7635, G__7636, G__7637, G__7638, G__7639, G__7640, G__7641, G__7642, G__7643, G__7644, G__7645, G__7646);
                              }
                            } else {
                              var n5064 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063, n5064);
                                } else {
                                  var G__7647 = a5051;
                                  var G__7648 = b5052;
                                  var G__7649 = c5053;
                                  var G__7650 = d5054;
                                  var G__7651 = e5055;
                                  var G__7652 = f5056;
                                  var G__7653 = g5057;
                                  var G__7654 = h5058;
                                  var G__7655 = i5059;
                                  var G__7656 = j5060;
                                  var G__7657 = k5061;
                                  var G__7658 = l5062;
                                  var G__7659 = m5063;
                                  var G__7660 = n5064;
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(G__7647, G__7648, G__7649, G__7650, G__7651, G__7652, G__7653, G__7654, G__7655, G__7656, G__7657, G__7658, G__7659, G__7660) : f.call(null, G__7647, G__7648, G__7649, G__7650, G__7651, G__7652, G__7653, G__7654, G__7655, G__7656, G__7657, G__7658, G__7659, G__7660);
                                }
                              } else {
                                var o5065 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063, n5064, o5065);
                                  } else {
                                    var G__7661 = a5051;
                                    var G__7662 = b5052;
                                    var G__7663 = c5053;
                                    var G__7664 = d5054;
                                    var G__7665 = e5055;
                                    var G__7666 = f5056;
                                    var G__7667 = g5057;
                                    var G__7668 = h5058;
                                    var G__7669 = i5059;
                                    var G__7670 = j5060;
                                    var G__7671 = k5061;
                                    var G__7672 = l5062;
                                    var G__7673 = m5063;
                                    var G__7674 = n5064;
                                    var G__7675 = o5065;
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(G__7661, G__7662, G__7663, G__7664, G__7665, G__7666, G__7667, G__7668, G__7669, G__7670, G__7671, G__7672, G__7673, G__7674, G__7675) : f.call(null, G__7661, G__7662, G__7663, G__7664, G__7665, G__7666, G__7667, G__7668, G__7669, G__7670, G__7671, G__7672, G__7673, G__7674, G__7675);
                                  }
                                } else {
                                  var p5066 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063, n5064, o5065, p5066);
                                    } else {
                                      var G__7676 = a5051;
                                      var G__7677 = b5052;
                                      var G__7678 = c5053;
                                      var G__7679 = d5054;
                                      var G__7680 = e5055;
                                      var G__7681 = f5056;
                                      var G__7682 = g5057;
                                      var G__7683 = h5058;
                                      var G__7684 = i5059;
                                      var G__7685 = j5060;
                                      var G__7686 = k5061;
                                      var G__7687 = l5062;
                                      var G__7688 = m5063;
                                      var G__7689 = n5064;
                                      var G__7690 = o5065;
                                      var G__7691 = p5066;
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(G__7676, G__7677, G__7678, G__7679, G__7680, G__7681, G__7682, G__7683, G__7684, G__7685, G__7686, G__7687, G__7688, G__7689, G__7690, G__7691) : f.call(null, G__7676, G__7677, G__7678, G__7679, G__7680, G__7681, G__7682, G__7683, G__7684, G__7685, G__7686, G__7687, G__7688, G__7689, G__7690, G__7691);
                                    }
                                  } else {
                                    var q5067 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063, n5064, o5065, p5066, q5067);
                                      } else {
                                        var G__7692 = a5051;
                                        var G__7693 = b5052;
                                        var G__7694 = c5053;
                                        var G__7695 = d5054;
                                        var G__7696 = e5055;
                                        var G__7697 = f5056;
                                        var G__7698 = g5057;
                                        var G__7699 = h5058;
                                        var G__7700 = i5059;
                                        var G__7701 = j5060;
                                        var G__7702 = k5061;
                                        var G__7703 = l5062;
                                        var G__7704 = m5063;
                                        var G__7705 = n5064;
                                        var G__7706 = o5065;
                                        var G__7707 = p5066;
                                        var G__7708 = q5067;
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(G__7692, G__7693, G__7694, G__7695, G__7696, G__7697, G__7698, G__7699, G__7700, G__7701, G__7702, G__7703, G__7704, G__7705, G__7706, G__7707, G__7708) : f.call(null, G__7692, G__7693, G__7694, G__7695, G__7696, G__7697, G__7698, G__7699, G__7700, G__7701, G__7702, G__7703, G__7704, G__7705, G__7706, G__7707, G__7708);
                                      }
                                    } else {
                                      var r5068 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063, n5064, o5065, p5066, q5067, r5068);
                                        } else {
                                          var G__7709 = a5051;
                                          var G__7710 = b5052;
                                          var G__7711 = c5053;
                                          var G__7712 = d5054;
                                          var G__7713 = e5055;
                                          var G__7714 = f5056;
                                          var G__7715 = g5057;
                                          var G__7716 = h5058;
                                          var G__7717 = i5059;
                                          var G__7718 = j5060;
                                          var G__7719 = k5061;
                                          var G__7720 = l5062;
                                          var G__7721 = m5063;
                                          var G__7722 = n5064;
                                          var G__7723 = o5065;
                                          var G__7724 = p5066;
                                          var G__7725 = q5067;
                                          var G__7726 = r5068;
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(G__7709, G__7710, G__7711, G__7712, G__7713, G__7714, G__7715, G__7716, G__7717, G__7718, G__7719, G__7720, G__7721, G__7722, G__7723, G__7724, G__7725, G__7726) : f.call(null, G__7709, G__7710, G__7711, G__7712, G__7713, G__7714, G__7715, G__7716, G__7717, G__7718, G__7719, G__7720, G__7721, G__7722, G__7723, G__7724, G__7725, G__7726);
                                        }
                                      } else {
                                        var s5069 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063, n5064, o5065, p5066, q5067, r5068, s5069);
                                          } else {
                                            var G__7727 = a5051;
                                            var G__7728 = b5052;
                                            var G__7729 = c5053;
                                            var G__7730 = d5054;
                                            var G__7731 = e5055;
                                            var G__7732 = f5056;
                                            var G__7733 = g5057;
                                            var G__7734 = h5058;
                                            var G__7735 = i5059;
                                            var G__7736 = j5060;
                                            var G__7737 = k5061;
                                            var G__7738 = l5062;
                                            var G__7739 = m5063;
                                            var G__7740 = n5064;
                                            var G__7741 = o5065;
                                            var G__7742 = p5066;
                                            var G__7743 = q5067;
                                            var G__7744 = r5068;
                                            var G__7745 = s5069;
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(G__7727, G__7728, G__7729, G__7730, G__7731, G__7732, G__7733, G__7734, G__7735, G__7736, G__7737, G__7738, G__7739, G__7740, G__7741, G__7742, G__7743, G__7744, G__7745) : f.call(null, G__7727, G__7728, G__7729, G__7730, G__7731, G__7732, G__7733, G__7734, G__7735, G__7736, G__7737, G__7738, G__7739, G__7740, G__7741, G__7742, G__7743, G__7744, G__7745);
                                          }
                                        } else {
                                          var t5070 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063, n5064, o5065, p5066, q5067, r5068, s5069, t5070);
                                            } else {
                                              var G__7746 = a5051;
                                              var G__7747 = b5052;
                                              var G__7748 = c5053;
                                              var G__7749 = d5054;
                                              var G__7750 = e5055;
                                              var G__7751 = f5056;
                                              var G__7752 = g5057;
                                              var G__7753 = h5058;
                                              var G__7754 = i5059;
                                              var G__7755 = j5060;
                                              var G__7756 = k5061;
                                              var G__7757 = l5062;
                                              var G__7758 = m5063;
                                              var G__7759 = n5064;
                                              var G__7760 = o5065;
                                              var G__7761 = p5066;
                                              var G__7762 = q5067;
                                              var G__7763 = r5068;
                                              var G__7764 = s5069;
                                              var G__7765 = t5070;
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(G__7746, G__7747, G__7748, G__7749, G__7750, G__7751, G__7752, G__7753, G__7754, G__7755, G__7756, G__7757, G__7758, G__7759, G__7760, G__7761, G__7762, G__7763, G__7764, G__7765) : f.call(null, G__7746, G__7747, G__7748, G__7749, G__7750, G__7751, G__7752, G__7753, G__7754, G__7755, G__7756, G__7757, G__7758, G__7759, G__7760, G__7761, G__7762, G__7763, G__7764, G__7765);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var cljs$core$apply = null;
  var cljs$core$apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array(args));
    }
  };
  var cljs$core$apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var cljs$core$apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var cljs$core$apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var cljs$core$apply__6 = function() {
    var G__7766__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to(f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array(arglist));
      }
    };
    var G__7766 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        var G__7767__i = 0, G__7767__a = new Array(arguments.length - 5);
        while (G__7767__i < G__7767__a.length) {
          G__7767__a[G__7767__i] = arguments[G__7767__i + 5];
          ++G__7767__i;
        }
        args = new cljs.core.IndexedSeq(G__7767__a, 0);
      }
      return G__7766__delegate.call(this, f, a, b, c, d, args);
    };
    G__7766.cljs$lang$maxFixedArity = 5;
    G__7766.cljs$lang$applyTo = function(arglist__7768) {
      var f = cljs.core.first(arglist__7768);
      arglist__7768 = cljs.core.next(arglist__7768);
      var a = cljs.core.first(arglist__7768);
      arglist__7768 = cljs.core.next(arglist__7768);
      var b = cljs.core.first(arglist__7768);
      arglist__7768 = cljs.core.next(arglist__7768);
      var c = cljs.core.first(arglist__7768);
      arglist__7768 = cljs.core.next(arglist__7768);
      var d = cljs.core.first(arglist__7768);
      var args = cljs.core.rest(arglist__7768);
      return G__7766__delegate(f, a, b, c, d, args);
    };
    G__7766.cljs$core$IFn$_invoke$arity$variadic = G__7766__delegate;
    return G__7766;
  }();
  cljs$core$apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$apply__2.call(this, f, a);
      case 3:
        return cljs$core$apply__3.call(this, f, a, b);
      case 4:
        return cljs$core$apply__4.call(this, f, a, b, c);
      case 5:
        return cljs$core$apply__5.call(this, f, a, b, c, d);
      default:
        var G__7769 = null;
        if (arguments.length > 5) {
          var G__7770__i = 0, G__7770__a = new Array(arguments.length - 5);
          while (G__7770__i < G__7770__a.length) {
            G__7770__a[G__7770__i] = arguments[G__7770__i + 5];
            ++G__7770__i;
          }
          G__7769 = new cljs.core.IndexedSeq(G__7770__a, 0);
        }
        return cljs$core$apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, G__7769);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$apply.cljs$lang$maxFixedArity = 5;
  cljs$core$apply.cljs$lang$applyTo = cljs$core$apply__6.cljs$lang$applyTo;
  cljs$core$apply.cljs$core$IFn$_invoke$arity$2 = cljs$core$apply__2;
  cljs$core$apply.cljs$core$IFn$_invoke$arity$3 = cljs$core$apply__3;
  cljs$core$apply.cljs$core$IFn$_invoke$arity$4 = cljs$core$apply__4;
  cljs$core$apply.cljs$core$IFn$_invoke$arity$5 = cljs$core$apply__5;
  cljs$core$apply.cljs$core$IFn$_invoke$arity$variadic = cljs$core$apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$apply;
}();
cljs.core.vary_meta = function() {
  var cljs$core$vary_meta = null;
  var cljs$core$vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta(obj, function() {
      var G__7786 = cljs.core.meta(obj);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7786) : f.call(null, G__7786);
    }());
  };
  var cljs$core$vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta(obj, function() {
      var G__7787 = cljs.core.meta(obj);
      var G__7788 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7787, G__7788) : f.call(null, G__7787, G__7788);
    }());
  };
  var cljs$core$vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta(obj, function() {
      var G__7789 = cljs.core.meta(obj);
      var G__7790 = a;
      var G__7791 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__7789, G__7790, G__7791) : f.call(null, G__7789, G__7790, G__7791);
    }());
  };
  var cljs$core$vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta(obj, function() {
      var G__7792 = cljs.core.meta(obj);
      var G__7793 = a;
      var G__7794 = b;
      var G__7795 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__7792, G__7793, G__7794, G__7795) : f.call(null, G__7792, G__7793, G__7794, G__7795);
    }());
  };
  var cljs$core$vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta(obj, function() {
      var G__7796 = cljs.core.meta(obj);
      var G__7797 = a;
      var G__7798 = b;
      var G__7799 = c;
      var G__7800 = d;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__7796, G__7797, G__7798, G__7799, G__7800) : f.call(null, G__7796, G__7797, G__7798, G__7799, G__7800);
    }());
  };
  var cljs$core$vary_meta__7 = function() {
    var G__7801__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
    };
    var G__7801 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        var G__7802__i = 0, G__7802__a = new Array(arguments.length - 6);
        while (G__7802__i < G__7802__a.length) {
          G__7802__a[G__7802__i] = arguments[G__7802__i + 6];
          ++G__7802__i;
        }
        args = new cljs.core.IndexedSeq(G__7802__a, 0);
      }
      return G__7801__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__7801.cljs$lang$maxFixedArity = 6;
    G__7801.cljs$lang$applyTo = function(arglist__7803) {
      var obj = cljs.core.first(arglist__7803);
      arglist__7803 = cljs.core.next(arglist__7803);
      var f = cljs.core.first(arglist__7803);
      arglist__7803 = cljs.core.next(arglist__7803);
      var a = cljs.core.first(arglist__7803);
      arglist__7803 = cljs.core.next(arglist__7803);
      var b = cljs.core.first(arglist__7803);
      arglist__7803 = cljs.core.next(arglist__7803);
      var c = cljs.core.first(arglist__7803);
      arglist__7803 = cljs.core.next(arglist__7803);
      var d = cljs.core.first(arglist__7803);
      var args = cljs.core.rest(arglist__7803);
      return G__7801__delegate(obj, f, a, b, c, d, args);
    };
    G__7801.cljs$core$IFn$_invoke$arity$variadic = G__7801__delegate;
    return G__7801;
  }();
  cljs$core$vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$vary_meta__2.call(this, obj, f);
      case 3:
        return cljs$core$vary_meta__3.call(this, obj, f, a);
      case 4:
        return cljs$core$vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return cljs$core$vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return cljs$core$vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        var G__7804 = null;
        if (arguments.length > 6) {
          var G__7805__i = 0, G__7805__a = new Array(arguments.length - 6);
          while (G__7805__i < G__7805__a.length) {
            G__7805__a[G__7805__i] = arguments[G__7805__i + 6];
            ++G__7805__i;
          }
          G__7804 = new cljs.core.IndexedSeq(G__7805__a, 0);
        }
        return cljs$core$vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, G__7804);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$vary_meta.cljs$lang$maxFixedArity = 6;
  cljs$core$vary_meta.cljs$lang$applyTo = cljs$core$vary_meta__7.cljs$lang$applyTo;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$2 = cljs$core$vary_meta__2;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$3 = cljs$core$vary_meta__3;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$4 = cljs$core$vary_meta__4;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$5 = cljs$core$vary_meta__5;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$6 = cljs$core$vary_meta__6;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$variadic = cljs$core$vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var cljs$core$not_EQ_ = null;
  var cljs$core$not_EQ___1 = function(x) {
    return false;
  };
  var cljs$core$not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
  };
  var cljs$core$not_EQ___3 = function() {
    var G__7806__delegate = function(x, y, more) {
      return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
    };
    var G__7806 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7807__i = 0, G__7807__a = new Array(arguments.length - 2);
        while (G__7807__i < G__7807__a.length) {
          G__7807__a[G__7807__i] = arguments[G__7807__i + 2];
          ++G__7807__i;
        }
        more = new cljs.core.IndexedSeq(G__7807__a, 0);
      }
      return G__7806__delegate.call(this, x, y, more);
    };
    G__7806.cljs$lang$maxFixedArity = 2;
    G__7806.cljs$lang$applyTo = function(arglist__7808) {
      var x = cljs.core.first(arglist__7808);
      arglist__7808 = cljs.core.next(arglist__7808);
      var y = cljs.core.first(arglist__7808);
      var more = cljs.core.rest(arglist__7808);
      return G__7806__delegate(x, y, more);
    };
    G__7806.cljs$core$IFn$_invoke$arity$variadic = G__7806__delegate;
    return G__7806;
  }();
  cljs$core$not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$not_EQ___1.call(this, x);
      case 2:
        return cljs$core$not_EQ___2.call(this, x, y);
      default:
        var G__7809 = null;
        if (arguments.length > 2) {
          var G__7810__i = 0, G__7810__a = new Array(arguments.length - 2);
          while (G__7810__i < G__7810__a.length) {
            G__7810__a[G__7810__i] = arguments[G__7810__i + 2];
            ++G__7810__i;
          }
          G__7809 = new cljs.core.IndexedSeq(G__7810__a, 0);
        }
        return cljs$core$not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7809);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$not_EQ_.cljs$lang$maxFixedArity = 2;
  cljs$core$not_EQ_.cljs$lang$applyTo = cljs$core$not_EQ___3.cljs$lang$applyTo;
  cljs$core$not_EQ_.cljs$core$IFn$_invoke$arity$1 = cljs$core$not_EQ___1;
  cljs$core$not_EQ_.cljs$core$IFn$_invoke$arity$2 = cljs$core$not_EQ___2;
  cljs$core$not_EQ_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$not_EQ_;
}();
cljs.core.not_empty = function cljs$core$not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function cljs$core$nil_iter() {
  if (typeof cljs.core.t7814 !== "undefined") {
  } else {
    cljs.core.t7814 = function(nil_iter, meta7815) {
      this.nil_iter = nil_iter;
      this.meta7815 = meta7815;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t7814.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t7814.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t7814.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t7814.prototype.cljs$core$IMeta$_meta$arity$1 = function(_7816) {
      var self__ = this;
      var _7816__$1 = this;
      return self__.meta7815;
    };
    cljs.core.t7814.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_7816, meta7815__$1) {
      var self__ = this;
      var _7816__$1 = this;
      return new cljs.core.t7814(self__.nil_iter, meta7815__$1);
    };
    cljs.core.t7814.cljs$lang$type = true;
    cljs.core.t7814.cljs$lang$ctorStr = "cljs.core/t7814";
    cljs.core.t7814.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
      return cljs.core._write(writer__4702__auto__, "cljs.core/t7814");
    };
    cljs.core.__GT_t7814 = function cljs$core$nil_iter_$___GT_t7814(nil_iter__$1, meta7815) {
      return new cljs.core.t7814(nil_iter__$1, meta7815);
    };
  }
  return new cljs.core.t7814(cljs$core$nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function cljs$core$__GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function cljs$core$string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function cljs$core$__GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function cljs$core$array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function cljs$core$__GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function cljs$core$seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function cljs$core$iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.iterable_QMARK_(coll)) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function cljs$core$lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4110__auto__ = !(lt.stepper == null);
      if (and__4110__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__4110__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__7817 = lt;
        var G__7818 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__7817, G__7818) : self__.xform.call(null, G__7817, G__7818);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__7819 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__7819) : self__.xform.call(null, G__7819);
  }
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function cljs$core$__GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function cljs$core$stepper(xform, iter) {
  var stepfn = function() {
    var cljs$core$stepper_$_stepfn = null;
    var cljs$core$stepper_$_stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var cljs$core$stepper_$_stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepper_$_stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepper_$_stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepper_$_stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepper_$_stepfn__1;
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepper_$_stepfn__2;
    return cljs$core$stepper_$_stepfn;
  }();
  return new cljs.core.Stepper(function() {
    var G__7821 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__7821) : xform.call(null, G__7821);
  }(), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__7823 = cljs.core.next(iters__$1);
        iters__$1 = G__7823;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__5007__auto___7824 = self__.iters.length;
  var i_7825 = 0;
  while (true) {
    if (i_7825 < n__5007__auto___7824) {
      self__.nexts[i_7825] = self__.iters[i_7825].next();
      var G__7826 = i_7825 + 1;
      i_7825 = G__7826;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4110__auto__ = !(lt.stepper == null);
      if (and__4110__auto__) {
        return this$.hasNext();
      } else {
        return and__4110__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__7822 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__7822) : self__.xform.call(null, G__7822);
  }
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function cljs$core$__GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function() {
  var cljs$core$multi_stepper = null;
  var cljs$core$multi_stepper__2 = function(xform, iters) {
    return cljs$core$multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
  };
  var cljs$core$multi_stepper__3 = function(xform, iters, nexts) {
    var stepfn = function() {
      var cljs$core$multi_stepper_$_stepfn = null;
      var cljs$core$multi_stepper_$_stepfn__1 = function(result) {
        var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
        lt.stepper = null;
        return lt;
      };
      var cljs$core$multi_stepper_$_stepfn__2 = function(result, input) {
        var lt = result;
        lt.first = input;
        lt.rest = cljs.core.lazy_transformer(lt.stepper);
        lt.stepper = null;
        return lt.rest;
      };
      cljs$core$multi_stepper_$_stepfn = function(result, input) {
        switch(arguments.length) {
          case 1:
            return cljs$core$multi_stepper_$_stepfn__1.call(this, result);
          case 2:
            return cljs$core$multi_stepper_$_stepfn__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$multi_stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$multi_stepper_$_stepfn__1;
      cljs$core$multi_stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$multi_stepper_$_stepfn__2;
      return cljs$core$multi_stepper_$_stepfn;
    }();
    return new cljs.core.MultiStepper(function() {
      var G__7831 = stepfn;
      return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__7831) : xform.call(null, G__7831);
    }(), iters, nexts);
  };
  cljs$core$multi_stepper = function(xform, iters, nexts) {
    switch(arguments.length) {
      case 2:
        return cljs$core$multi_stepper__2.call(this, xform, iters);
      case 3:
        return cljs$core$multi_stepper__3.call(this, xform, iters, nexts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$multi_stepper.cljs$core$IFn$_invoke$arity$2 = cljs$core$multi_stepper__2;
  cljs$core$multi_stepper.cljs$core$IFn$_invoke$arity$3 = cljs$core$multi_stepper__3;
  return cljs$core$multi_stepper;
}();
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function cljs$core$__GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__7832_7836 = cljs.core.seq(colls);
  var chunk__7833_7837 = null;
  var count__7834_7838 = 0;
  var i__7835_7839 = 0;
  while (true) {
    if (i__7835_7839 < count__7834_7838) {
      var coll_7840 = chunk__7833_7837.cljs$core$IIndexed$_nth$arity$2(null, i__7835_7839);
      iters.push(cljs.core.iter(coll_7840));
      var G__7841 = seq__7832_7836;
      var G__7842 = chunk__7833_7837;
      var G__7843 = count__7834_7838;
      var G__7844 = i__7835_7839 + 1;
      seq__7832_7836 = G__7841;
      chunk__7833_7837 = G__7842;
      count__7834_7838 = G__7843;
      i__7835_7839 = G__7844;
      continue;
    } else {
      var temp__4126__auto___7845 = cljs.core.seq(seq__7832_7836);
      if (temp__4126__auto___7845) {
        var seq__7832_7846__$1 = temp__4126__auto___7845;
        if (cljs.core.chunked_seq_QMARK_(seq__7832_7846__$1)) {
          var c__4907__auto___7847 = cljs.core.chunk_first(seq__7832_7846__$1);
          var G__7848 = cljs.core.chunk_rest(seq__7832_7846__$1);
          var G__7849 = c__4907__auto___7847;
          var G__7850 = cljs.core.count(c__4907__auto___7847);
          var G__7851 = 0;
          seq__7832_7836 = G__7848;
          chunk__7833_7837 = G__7849;
          count__7834_7838 = G__7850;
          i__7835_7839 = G__7851;
          continue;
        } else {
          var coll_7852 = cljs.core.first(seq__7832_7846__$1);
          iters.push(cljs.core.iter(coll_7852));
          var G__7853 = cljs.core.next(seq__7832_7846__$1);
          var G__7854 = null;
          var G__7855 = 0;
          var G__7856 = 0;
          seq__7832_7836 = G__7853;
          chunk__7833_7837 = G__7854;
          count__7834_7838 = G__7855;
          i__7835_7839 = G__7856;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function() {
  var cljs$core$sequence = null;
  var cljs$core$sequence__1 = function(coll) {
    if (cljs.core.seq_QMARK_(coll)) {
      return coll;
    } else {
      var or__4122__auto__ = cljs.core.seq(coll);
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  };
  var cljs$core$sequence__2 = function(xform, coll) {
    return cljs.core.LazyTransformer.create(xform, coll);
  };
  var cljs$core$sequence__3 = function() {
    var G__7857__delegate = function(xform, coll, colls) {
      return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
    };
    var G__7857 = function(xform, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        var G__7858__i = 0, G__7858__a = new Array(arguments.length - 2);
        while (G__7858__i < G__7858__a.length) {
          G__7858__a[G__7858__i] = arguments[G__7858__i + 2];
          ++G__7858__i;
        }
        colls = new cljs.core.IndexedSeq(G__7858__a, 0);
      }
      return G__7857__delegate.call(this, xform, coll, colls);
    };
    G__7857.cljs$lang$maxFixedArity = 2;
    G__7857.cljs$lang$applyTo = function(arglist__7859) {
      var xform = cljs.core.first(arglist__7859);
      arglist__7859 = cljs.core.next(arglist__7859);
      var coll = cljs.core.first(arglist__7859);
      var colls = cljs.core.rest(arglist__7859);
      return G__7857__delegate(xform, coll, colls);
    };
    G__7857.cljs$core$IFn$_invoke$arity$variadic = G__7857__delegate;
    return G__7857;
  }();
  cljs$core$sequence = function(xform, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$sequence__1.call(this, xform);
      case 2:
        return cljs$core$sequence__2.call(this, xform, coll);
      default:
        var G__7860 = null;
        if (arguments.length > 2) {
          var G__7861__i = 0, G__7861__a = new Array(arguments.length - 2);
          while (G__7861__i < G__7861__a.length) {
            G__7861__a[G__7861__i] = arguments[G__7861__i + 2];
            ++G__7861__i;
          }
          G__7860 = new cljs.core.IndexedSeq(G__7861__a, 0);
        }
        return cljs$core$sequence__3.cljs$core$IFn$_invoke$arity$variadic(xform, coll, G__7860);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$sequence.cljs$lang$maxFixedArity = 2;
  cljs$core$sequence.cljs$lang$applyTo = cljs$core$sequence__3.cljs$lang$applyTo;
  cljs$core$sequence.cljs$core$IFn$_invoke$arity$1 = cljs$core$sequence__1;
  cljs$core$sequence.cljs$core$IFn$_invoke$arity$2 = cljs$core$sequence__2;
  cljs$core$sequence.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sequence__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$sequence;
}();
cljs.core.every_QMARK_ = function cljs$core$every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__7863 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__7863) : pred.call(null, G__7863);
      }())) {
        var G__7864 = pred;
        var G__7865 = cljs.core.next(coll);
        pred = G__7864;
        coll = G__7865;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function cljs$core$not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function cljs$core$some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__4122__auto__ = function() {
        var G__7869 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__7869) : pred.call(null, G__7869);
      }();
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        var G__7870 = pred;
        var G__7871 = cljs.core.next(coll);
        pred = G__7870;
        coll = G__7871;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function cljs$core$not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function cljs$core$even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function cljs$core$odd_QMARK_(n) {
  return!cljs.core.even_QMARK_(n);
};
cljs.core.complement = function cljs$core$complement(f) {
  return function() {
    var G__7878 = null;
    var G__7878__0 = function() {
      return cljs.core.not(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    };
    var G__7878__1 = function(x) {
      return cljs.core.not(function() {
        var G__7875 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7875) : f.call(null, G__7875);
      }());
    };
    var G__7878__2 = function(x, y) {
      return cljs.core.not(function() {
        var G__7876 = x;
        var G__7877 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7876, G__7877) : f.call(null, G__7876, G__7877);
      }());
    };
    var G__7878__3 = function() {
      var G__7879__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__7879 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__7880__i = 0, G__7880__a = new Array(arguments.length - 2);
          while (G__7880__i < G__7880__a.length) {
            G__7880__a[G__7880__i] = arguments[G__7880__i + 2];
            ++G__7880__i;
          }
          zs = new cljs.core.IndexedSeq(G__7880__a, 0);
        }
        return G__7879__delegate.call(this, x, y, zs);
      };
      G__7879.cljs$lang$maxFixedArity = 2;
      G__7879.cljs$lang$applyTo = function(arglist__7881) {
        var x = cljs.core.first(arglist__7881);
        arglist__7881 = cljs.core.next(arglist__7881);
        var y = cljs.core.first(arglist__7881);
        var zs = cljs.core.rest(arglist__7881);
        return G__7879__delegate(x, y, zs);
      };
      G__7879.cljs$core$IFn$_invoke$arity$variadic = G__7879__delegate;
      return G__7879;
    }();
    G__7878 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__7878__0.call(this);
        case 1:
          return G__7878__1.call(this, x);
        case 2:
          return G__7878__2.call(this, x, y);
        default:
          var G__7882 = null;
          if (arguments.length > 2) {
            var G__7883__i = 0, G__7883__a = new Array(arguments.length - 2);
            while (G__7883__i < G__7883__a.length) {
              G__7883__a[G__7883__i] = arguments[G__7883__i + 2];
              ++G__7883__i;
            }
            G__7882 = new cljs.core.IndexedSeq(G__7883__a, 0);
          }
          return G__7878__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7882);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7878.cljs$lang$maxFixedArity = 2;
    G__7878.cljs$lang$applyTo = G__7878__3.cljs$lang$applyTo;
    G__7878.cljs$core$IFn$_invoke$arity$0 = G__7878__0;
    G__7878.cljs$core$IFn$_invoke$arity$1 = G__7878__1;
    G__7878.cljs$core$IFn$_invoke$arity$2 = G__7878__2;
    G__7878.cljs$core$IFn$_invoke$arity$variadic = G__7878__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__7878;
  }();
};
cljs.core.constantly = function cljs$core$constantly(x) {
  return function() {
    var G__7884__delegate = function(args) {
      return x;
    };
    var G__7884 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__7885__i = 0, G__7885__a = new Array(arguments.length - 0);
        while (G__7885__i < G__7885__a.length) {
          G__7885__a[G__7885__i] = arguments[G__7885__i + 0];
          ++G__7885__i;
        }
        args = new cljs.core.IndexedSeq(G__7885__a, 0);
      }
      return G__7884__delegate.call(this, args);
    };
    G__7884.cljs$lang$maxFixedArity = 0;
    G__7884.cljs$lang$applyTo = function(arglist__7886) {
      var args = cljs.core.seq(arglist__7886);
      return G__7884__delegate(args);
    };
    G__7884.cljs$core$IFn$_invoke$arity$variadic = G__7884__delegate;
    return G__7884;
  }();
};
cljs.core.comp = function() {
  var cljs$core$comp = null;
  var cljs$core$comp__0 = function() {
    return cljs.core.identity;
  };
  var cljs$core$comp__1 = function(f) {
    return f;
  };
  var cljs$core$comp__2 = function(f, g) {
    return function() {
      var G__7941 = null;
      var G__7941__0 = function() {
        var G__7914 = function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7914) : f.call(null, G__7914);
      };
      var G__7941__1 = function(x) {
        var G__7915 = function() {
          var G__7916 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7916) : g.call(null, G__7916);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7915) : f.call(null, G__7915);
      };
      var G__7941__2 = function(x, y) {
        var G__7917 = function() {
          var G__7918 = x;
          var G__7919 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__7918, G__7919) : g.call(null, G__7918, G__7919);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7917) : f.call(null, G__7917);
      };
      var G__7941__3 = function(x, y, z) {
        var G__7920 = function() {
          var G__7921 = x;
          var G__7922 = y;
          var G__7923 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__7921, G__7922, G__7923) : g.call(null, G__7921, G__7922, G__7923);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7920) : f.call(null, G__7920);
      };
      var G__7941__4 = function() {
        var G__7942__delegate = function(x, y, z, args) {
          var G__7924 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7924) : f.call(null, G__7924);
        };
        var G__7942 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__7943__i = 0, G__7943__a = new Array(arguments.length - 3);
            while (G__7943__i < G__7943__a.length) {
              G__7943__a[G__7943__i] = arguments[G__7943__i + 3];
              ++G__7943__i;
            }
            args = new cljs.core.IndexedSeq(G__7943__a, 0);
          }
          return G__7942__delegate.call(this, x, y, z, args);
        };
        G__7942.cljs$lang$maxFixedArity = 3;
        G__7942.cljs$lang$applyTo = function(arglist__7944) {
          var x = cljs.core.first(arglist__7944);
          arglist__7944 = cljs.core.next(arglist__7944);
          var y = cljs.core.first(arglist__7944);
          arglist__7944 = cljs.core.next(arglist__7944);
          var z = cljs.core.first(arglist__7944);
          var args = cljs.core.rest(arglist__7944);
          return G__7942__delegate(x, y, z, args);
        };
        G__7942.cljs$core$IFn$_invoke$arity$variadic = G__7942__delegate;
        return G__7942;
      }();
      G__7941 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7941__0.call(this);
          case 1:
            return G__7941__1.call(this, x);
          case 2:
            return G__7941__2.call(this, x, y);
          case 3:
            return G__7941__3.call(this, x, y, z);
          default:
            var G__7945 = null;
            if (arguments.length > 3) {
              var G__7946__i = 0, G__7946__a = new Array(arguments.length - 3);
              while (G__7946__i < G__7946__a.length) {
                G__7946__a[G__7946__i] = arguments[G__7946__i + 3];
                ++G__7946__i;
              }
              G__7945 = new cljs.core.IndexedSeq(G__7946__a, 0);
            }
            return G__7941__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7945);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7941.cljs$lang$maxFixedArity = 3;
      G__7941.cljs$lang$applyTo = G__7941__4.cljs$lang$applyTo;
      G__7941.cljs$core$IFn$_invoke$arity$0 = G__7941__0;
      G__7941.cljs$core$IFn$_invoke$arity$1 = G__7941__1;
      G__7941.cljs$core$IFn$_invoke$arity$2 = G__7941__2;
      G__7941.cljs$core$IFn$_invoke$arity$3 = G__7941__3;
      G__7941.cljs$core$IFn$_invoke$arity$variadic = G__7941__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__7941;
    }();
  };
  var cljs$core$comp__3 = function(f, g, h) {
    return function() {
      var G__7947 = null;
      var G__7947__0 = function() {
        var G__7925 = function() {
          var G__7926 = function() {
            return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7926) : g.call(null, G__7926);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7925) : f.call(null, G__7925);
      };
      var G__7947__1 = function(x) {
        var G__7927 = function() {
          var G__7928 = function() {
            var G__7929 = x;
            return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__7929) : h.call(null, G__7929);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7928) : g.call(null, G__7928);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7927) : f.call(null, G__7927);
      };
      var G__7947__2 = function(x, y) {
        var G__7930 = function() {
          var G__7931 = function() {
            var G__7932 = x;
            var G__7933 = y;
            return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__7932, G__7933) : h.call(null, G__7932, G__7933);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7931) : g.call(null, G__7931);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7930) : f.call(null, G__7930);
      };
      var G__7947__3 = function(x, y, z) {
        var G__7934 = function() {
          var G__7935 = function() {
            var G__7936 = x;
            var G__7937 = y;
            var G__7938 = z;
            return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__7936, G__7937, G__7938) : h.call(null, G__7936, G__7937, G__7938);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7935) : g.call(null, G__7935);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7934) : f.call(null, G__7934);
      };
      var G__7947__4 = function() {
        var G__7948__delegate = function(x, y, z, args) {
          var G__7939 = function() {
            var G__7940 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
            return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7940) : g.call(null, G__7940);
          }();
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7939) : f.call(null, G__7939);
        };
        var G__7948 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__7949__i = 0, G__7949__a = new Array(arguments.length - 3);
            while (G__7949__i < G__7949__a.length) {
              G__7949__a[G__7949__i] = arguments[G__7949__i + 3];
              ++G__7949__i;
            }
            args = new cljs.core.IndexedSeq(G__7949__a, 0);
          }
          return G__7948__delegate.call(this, x, y, z, args);
        };
        G__7948.cljs$lang$maxFixedArity = 3;
        G__7948.cljs$lang$applyTo = function(arglist__7950) {
          var x = cljs.core.first(arglist__7950);
          arglist__7950 = cljs.core.next(arglist__7950);
          var y = cljs.core.first(arglist__7950);
          arglist__7950 = cljs.core.next(arglist__7950);
          var z = cljs.core.first(arglist__7950);
          var args = cljs.core.rest(arglist__7950);
          return G__7948__delegate(x, y, z, args);
        };
        G__7948.cljs$core$IFn$_invoke$arity$variadic = G__7948__delegate;
        return G__7948;
      }();
      G__7947 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7947__0.call(this);
          case 1:
            return G__7947__1.call(this, x);
          case 2:
            return G__7947__2.call(this, x, y);
          case 3:
            return G__7947__3.call(this, x, y, z);
          default:
            var G__7951 = null;
            if (arguments.length > 3) {
              var G__7952__i = 0, G__7952__a = new Array(arguments.length - 3);
              while (G__7952__i < G__7952__a.length) {
                G__7952__a[G__7952__i] = arguments[G__7952__i + 3];
                ++G__7952__i;
              }
              G__7951 = new cljs.core.IndexedSeq(G__7952__a, 0);
            }
            return G__7947__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7951);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7947.cljs$lang$maxFixedArity = 3;
      G__7947.cljs$lang$applyTo = G__7947__4.cljs$lang$applyTo;
      G__7947.cljs$core$IFn$_invoke$arity$0 = G__7947__0;
      G__7947.cljs$core$IFn$_invoke$arity$1 = G__7947__1;
      G__7947.cljs$core$IFn$_invoke$arity$2 = G__7947__2;
      G__7947.cljs$core$IFn$_invoke$arity$3 = G__7947__3;
      G__7947.cljs$core$IFn$_invoke$arity$variadic = G__7947__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__7947;
    }();
  };
  var cljs$core$comp__4 = function() {
    var G__7953__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__7954__delegate = function(args) {
            var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
            var fs__$2 = cljs.core.next(fs__$1);
            while (true) {
              if (fs__$2) {
                var G__7955 = cljs.core.first(fs__$2).call(null, ret);
                var G__7956 = cljs.core.next(fs__$2);
                ret = G__7955;
                fs__$2 = G__7956;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__7954 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              var G__7957__i = 0, G__7957__a = new Array(arguments.length - 0);
              while (G__7957__i < G__7957__a.length) {
                G__7957__a[G__7957__i] = arguments[G__7957__i + 0];
                ++G__7957__i;
              }
              args = new cljs.core.IndexedSeq(G__7957__a, 0);
            }
            return G__7954__delegate.call(this, args);
          };
          G__7954.cljs$lang$maxFixedArity = 0;
          G__7954.cljs$lang$applyTo = function(arglist__7958) {
            var args = cljs.core.seq(arglist__7958);
            return G__7954__delegate(args);
          };
          G__7954.cljs$core$IFn$_invoke$arity$variadic = G__7954__delegate;
          return G__7954;
        }();
      }(fs__$1);
    };
    var G__7953 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        var G__7959__i = 0, G__7959__a = new Array(arguments.length - 3);
        while (G__7959__i < G__7959__a.length) {
          G__7959__a[G__7959__i] = arguments[G__7959__i + 3];
          ++G__7959__i;
        }
        fs = new cljs.core.IndexedSeq(G__7959__a, 0);
      }
      return G__7953__delegate.call(this, f1, f2, f3, fs);
    };
    G__7953.cljs$lang$maxFixedArity = 3;
    G__7953.cljs$lang$applyTo = function(arglist__7960) {
      var f1 = cljs.core.first(arglist__7960);
      arglist__7960 = cljs.core.next(arglist__7960);
      var f2 = cljs.core.first(arglist__7960);
      arglist__7960 = cljs.core.next(arglist__7960);
      var f3 = cljs.core.first(arglist__7960);
      var fs = cljs.core.rest(arglist__7960);
      return G__7953__delegate(f1, f2, f3, fs);
    };
    G__7953.cljs$core$IFn$_invoke$arity$variadic = G__7953__delegate;
    return G__7953;
  }();
  cljs$core$comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$comp__0.call(this);
      case 1:
        return cljs$core$comp__1.call(this, f1);
      case 2:
        return cljs$core$comp__2.call(this, f1, f2);
      case 3:
        return cljs$core$comp__3.call(this, f1, f2, f3);
      default:
        var G__7961 = null;
        if (arguments.length > 3) {
          var G__7962__i = 0, G__7962__a = new Array(arguments.length - 3);
          while (G__7962__i < G__7962__a.length) {
            G__7962__a[G__7962__i] = arguments[G__7962__i + 3];
            ++G__7962__i;
          }
          G__7961 = new cljs.core.IndexedSeq(G__7962__a, 0);
        }
        return cljs$core$comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, G__7961);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$comp.cljs$lang$maxFixedArity = 3;
  cljs$core$comp.cljs$lang$applyTo = cljs$core$comp__4.cljs$lang$applyTo;
  cljs$core$comp.cljs$core$IFn$_invoke$arity$0 = cljs$core$comp__0;
  cljs$core$comp.cljs$core$IFn$_invoke$arity$1 = cljs$core$comp__1;
  cljs$core$comp.cljs$core$IFn$_invoke$arity$2 = cljs$core$comp__2;
  cljs$core$comp.cljs$core$IFn$_invoke$arity$3 = cljs$core$comp__3;
  cljs$core$comp.cljs$core$IFn$_invoke$arity$variadic = cljs$core$comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$comp;
}();
cljs.core.partial = function() {
  var cljs$core$partial = null;
  var cljs$core$partial__1 = function(f) {
    return f;
  };
  var cljs$core$partial__2 = function(f, arg1) {
    return function() {
      var G__8047 = null;
      var G__8047__0 = function() {
        var G__8005 = arg1;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8005) : f.call(null, G__8005);
      };
      var G__8047__1 = function(x) {
        var G__8006 = arg1;
        var G__8007 = x;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8006, G__8007) : f.call(null, G__8006, G__8007);
      };
      var G__8047__2 = function(x, y) {
        var G__8008 = arg1;
        var G__8009 = x;
        var G__8010 = y;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8008, G__8009, G__8010) : f.call(null, G__8008, G__8009, G__8010);
      };
      var G__8047__3 = function(x, y, z) {
        var G__8011 = arg1;
        var G__8012 = x;
        var G__8013 = y;
        var G__8014 = z;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8011, G__8012, G__8013, G__8014) : f.call(null, G__8011, G__8012, G__8013, G__8014);
      };
      var G__8047__4 = function() {
        var G__8048__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
        };
        var G__8048 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__8049__i = 0, G__8049__a = new Array(arguments.length - 3);
            while (G__8049__i < G__8049__a.length) {
              G__8049__a[G__8049__i] = arguments[G__8049__i + 3];
              ++G__8049__i;
            }
            args = new cljs.core.IndexedSeq(G__8049__a, 0);
          }
          return G__8048__delegate.call(this, x, y, z, args);
        };
        G__8048.cljs$lang$maxFixedArity = 3;
        G__8048.cljs$lang$applyTo = function(arglist__8050) {
          var x = cljs.core.first(arglist__8050);
          arglist__8050 = cljs.core.next(arglist__8050);
          var y = cljs.core.first(arglist__8050);
          arglist__8050 = cljs.core.next(arglist__8050);
          var z = cljs.core.first(arglist__8050);
          var args = cljs.core.rest(arglist__8050);
          return G__8048__delegate(x, y, z, args);
        };
        G__8048.cljs$core$IFn$_invoke$arity$variadic = G__8048__delegate;
        return G__8048;
      }();
      G__8047 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__8047__0.call(this);
          case 1:
            return G__8047__1.call(this, x);
          case 2:
            return G__8047__2.call(this, x, y);
          case 3:
            return G__8047__3.call(this, x, y, z);
          default:
            var G__8051 = null;
            if (arguments.length > 3) {
              var G__8052__i = 0, G__8052__a = new Array(arguments.length - 3);
              while (G__8052__i < G__8052__a.length) {
                G__8052__a[G__8052__i] = arguments[G__8052__i + 3];
                ++G__8052__i;
              }
              G__8051 = new cljs.core.IndexedSeq(G__8052__a, 0);
            }
            return G__8047__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8051);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8047.cljs$lang$maxFixedArity = 3;
      G__8047.cljs$lang$applyTo = G__8047__4.cljs$lang$applyTo;
      G__8047.cljs$core$IFn$_invoke$arity$0 = G__8047__0;
      G__8047.cljs$core$IFn$_invoke$arity$1 = G__8047__1;
      G__8047.cljs$core$IFn$_invoke$arity$2 = G__8047__2;
      G__8047.cljs$core$IFn$_invoke$arity$3 = G__8047__3;
      G__8047.cljs$core$IFn$_invoke$arity$variadic = G__8047__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__8047;
    }();
  };
  var cljs$core$partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__8053 = null;
      var G__8053__0 = function() {
        var G__8015 = arg1;
        var G__8016 = arg2;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8015, G__8016) : f.call(null, G__8015, G__8016);
      };
      var G__8053__1 = function(x) {
        var G__8017 = arg1;
        var G__8018 = arg2;
        var G__8019 = x;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8017, G__8018, G__8019) : f.call(null, G__8017, G__8018, G__8019);
      };
      var G__8053__2 = function(x, y) {
        var G__8020 = arg1;
        var G__8021 = arg2;
        var G__8022 = x;
        var G__8023 = y;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8020, G__8021, G__8022, G__8023) : f.call(null, G__8020, G__8021, G__8022, G__8023);
      };
      var G__8053__3 = function(x, y, z) {
        var G__8024 = arg1;
        var G__8025 = arg2;
        var G__8026 = x;
        var G__8027 = y;
        var G__8028 = z;
        return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__8024, G__8025, G__8026, G__8027, G__8028) : f.call(null, G__8024, G__8025, G__8026, G__8027, G__8028);
      };
      var G__8053__4 = function() {
        var G__8054__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
        };
        var G__8054 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__8055__i = 0, G__8055__a = new Array(arguments.length - 3);
            while (G__8055__i < G__8055__a.length) {
              G__8055__a[G__8055__i] = arguments[G__8055__i + 3];
              ++G__8055__i;
            }
            args = new cljs.core.IndexedSeq(G__8055__a, 0);
          }
          return G__8054__delegate.call(this, x, y, z, args);
        };
        G__8054.cljs$lang$maxFixedArity = 3;
        G__8054.cljs$lang$applyTo = function(arglist__8056) {
          var x = cljs.core.first(arglist__8056);
          arglist__8056 = cljs.core.next(arglist__8056);
          var y = cljs.core.first(arglist__8056);
          arglist__8056 = cljs.core.next(arglist__8056);
          var z = cljs.core.first(arglist__8056);
          var args = cljs.core.rest(arglist__8056);
          return G__8054__delegate(x, y, z, args);
        };
        G__8054.cljs$core$IFn$_invoke$arity$variadic = G__8054__delegate;
        return G__8054;
      }();
      G__8053 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__8053__0.call(this);
          case 1:
            return G__8053__1.call(this, x);
          case 2:
            return G__8053__2.call(this, x, y);
          case 3:
            return G__8053__3.call(this, x, y, z);
          default:
            var G__8057 = null;
            if (arguments.length > 3) {
              var G__8058__i = 0, G__8058__a = new Array(arguments.length - 3);
              while (G__8058__i < G__8058__a.length) {
                G__8058__a[G__8058__i] = arguments[G__8058__i + 3];
                ++G__8058__i;
              }
              G__8057 = new cljs.core.IndexedSeq(G__8058__a, 0);
            }
            return G__8053__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8057);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8053.cljs$lang$maxFixedArity = 3;
      G__8053.cljs$lang$applyTo = G__8053__4.cljs$lang$applyTo;
      G__8053.cljs$core$IFn$_invoke$arity$0 = G__8053__0;
      G__8053.cljs$core$IFn$_invoke$arity$1 = G__8053__1;
      G__8053.cljs$core$IFn$_invoke$arity$2 = G__8053__2;
      G__8053.cljs$core$IFn$_invoke$arity$3 = G__8053__3;
      G__8053.cljs$core$IFn$_invoke$arity$variadic = G__8053__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__8053;
    }();
  };
  var cljs$core$partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__8059 = null;
      var G__8059__0 = function() {
        var G__8029 = arg1;
        var G__8030 = arg2;
        var G__8031 = arg3;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8029, G__8030, G__8031) : f.call(null, G__8029, G__8030, G__8031);
      };
      var G__8059__1 = function(x) {
        var G__8032 = arg1;
        var G__8033 = arg2;
        var G__8034 = arg3;
        var G__8035 = x;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8032, G__8033, G__8034, G__8035) : f.call(null, G__8032, G__8033, G__8034, G__8035);
      };
      var G__8059__2 = function(x, y) {
        var G__8036 = arg1;
        var G__8037 = arg2;
        var G__8038 = arg3;
        var G__8039 = x;
        var G__8040 = y;
        return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__8036, G__8037, G__8038, G__8039, G__8040) : f.call(null, G__8036, G__8037, G__8038, G__8039, G__8040);
      };
      var G__8059__3 = function(x, y, z) {
        var G__8041 = arg1;
        var G__8042 = arg2;
        var G__8043 = arg3;
        var G__8044 = x;
        var G__8045 = y;
        var G__8046 = z;
        return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__8041, G__8042, G__8043, G__8044, G__8045, G__8046) : f.call(null, G__8041, G__8042, G__8043, G__8044, G__8045, G__8046);
      };
      var G__8059__4 = function() {
        var G__8060__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
        };
        var G__8060 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__8061__i = 0, G__8061__a = new Array(arguments.length - 3);
            while (G__8061__i < G__8061__a.length) {
              G__8061__a[G__8061__i] = arguments[G__8061__i + 3];
              ++G__8061__i;
            }
            args = new cljs.core.IndexedSeq(G__8061__a, 0);
          }
          return G__8060__delegate.call(this, x, y, z, args);
        };
        G__8060.cljs$lang$maxFixedArity = 3;
        G__8060.cljs$lang$applyTo = function(arglist__8062) {
          var x = cljs.core.first(arglist__8062);
          arglist__8062 = cljs.core.next(arglist__8062);
          var y = cljs.core.first(arglist__8062);
          arglist__8062 = cljs.core.next(arglist__8062);
          var z = cljs.core.first(arglist__8062);
          var args = cljs.core.rest(arglist__8062);
          return G__8060__delegate(x, y, z, args);
        };
        G__8060.cljs$core$IFn$_invoke$arity$variadic = G__8060__delegate;
        return G__8060;
      }();
      G__8059 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__8059__0.call(this);
          case 1:
            return G__8059__1.call(this, x);
          case 2:
            return G__8059__2.call(this, x, y);
          case 3:
            return G__8059__3.call(this, x, y, z);
          default:
            var G__8063 = null;
            if (arguments.length > 3) {
              var G__8064__i = 0, G__8064__a = new Array(arguments.length - 3);
              while (G__8064__i < G__8064__a.length) {
                G__8064__a[G__8064__i] = arguments[G__8064__i + 3];
                ++G__8064__i;
              }
              G__8063 = new cljs.core.IndexedSeq(G__8064__a, 0);
            }
            return G__8059__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8063);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8059.cljs$lang$maxFixedArity = 3;
      G__8059.cljs$lang$applyTo = G__8059__4.cljs$lang$applyTo;
      G__8059.cljs$core$IFn$_invoke$arity$0 = G__8059__0;
      G__8059.cljs$core$IFn$_invoke$arity$1 = G__8059__1;
      G__8059.cljs$core$IFn$_invoke$arity$2 = G__8059__2;
      G__8059.cljs$core$IFn$_invoke$arity$3 = G__8059__3;
      G__8059.cljs$core$IFn$_invoke$arity$variadic = G__8059__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__8059;
    }();
  };
  var cljs$core$partial__5 = function() {
    var G__8065__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__8066__delegate = function(args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
        };
        var G__8066 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            var G__8067__i = 0, G__8067__a = new Array(arguments.length - 0);
            while (G__8067__i < G__8067__a.length) {
              G__8067__a[G__8067__i] = arguments[G__8067__i + 0];
              ++G__8067__i;
            }
            args = new cljs.core.IndexedSeq(G__8067__a, 0);
          }
          return G__8066__delegate.call(this, args);
        };
        G__8066.cljs$lang$maxFixedArity = 0;
        G__8066.cljs$lang$applyTo = function(arglist__8068) {
          var args = cljs.core.seq(arglist__8068);
          return G__8066__delegate(args);
        };
        G__8066.cljs$core$IFn$_invoke$arity$variadic = G__8066__delegate;
        return G__8066;
      }();
    };
    var G__8065 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__8069__i = 0, G__8069__a = new Array(arguments.length - 4);
        while (G__8069__i < G__8069__a.length) {
          G__8069__a[G__8069__i] = arguments[G__8069__i + 4];
          ++G__8069__i;
        }
        more = new cljs.core.IndexedSeq(G__8069__a, 0);
      }
      return G__8065__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__8065.cljs$lang$maxFixedArity = 4;
    G__8065.cljs$lang$applyTo = function(arglist__8070) {
      var f = cljs.core.first(arglist__8070);
      arglist__8070 = cljs.core.next(arglist__8070);
      var arg1 = cljs.core.first(arglist__8070);
      arglist__8070 = cljs.core.next(arglist__8070);
      var arg2 = cljs.core.first(arglist__8070);
      arglist__8070 = cljs.core.next(arglist__8070);
      var arg3 = cljs.core.first(arglist__8070);
      var more = cljs.core.rest(arglist__8070);
      return G__8065__delegate(f, arg1, arg2, arg3, more);
    };
    G__8065.cljs$core$IFn$_invoke$arity$variadic = G__8065__delegate;
    return G__8065;
  }();
  cljs$core$partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$partial__1.call(this, f);
      case 2:
        return cljs$core$partial__2.call(this, f, arg1);
      case 3:
        return cljs$core$partial__3.call(this, f, arg1, arg2);
      case 4:
        return cljs$core$partial__4.call(this, f, arg1, arg2, arg3);
      default:
        var G__8071 = null;
        if (arguments.length > 4) {
          var G__8072__i = 0, G__8072__a = new Array(arguments.length - 4);
          while (G__8072__i < G__8072__a.length) {
            G__8072__a[G__8072__i] = arguments[G__8072__i + 4];
            ++G__8072__i;
          }
          G__8071 = new cljs.core.IndexedSeq(G__8072__a, 0);
        }
        return cljs$core$partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, G__8071);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$partial.cljs$lang$maxFixedArity = 4;
  cljs$core$partial.cljs$lang$applyTo = cljs$core$partial__5.cljs$lang$applyTo;
  cljs$core$partial.cljs$core$IFn$_invoke$arity$1 = cljs$core$partial__1;
  cljs$core$partial.cljs$core$IFn$_invoke$arity$2 = cljs$core$partial__2;
  cljs$core$partial.cljs$core$IFn$_invoke$arity$3 = cljs$core$partial__3;
  cljs$core$partial.cljs$core$IFn$_invoke$arity$4 = cljs$core$partial__4;
  cljs$core$partial.cljs$core$IFn$_invoke$arity$variadic = cljs$core$partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$partial;
}();
cljs.core.fnil = function() {
  var cljs$core$fnil = null;
  var cljs$core$fnil__2 = function(f, x) {
    return function() {
      var G__8105 = null;
      var G__8105__1 = function(a) {
        var G__8089 = a == null ? x : a;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8089) : f.call(null, G__8089);
      };
      var G__8105__2 = function(a, b) {
        var G__8090 = a == null ? x : a;
        var G__8091 = b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8090, G__8091) : f.call(null, G__8090, G__8091);
      };
      var G__8105__3 = function(a, b, c) {
        var G__8092 = a == null ? x : a;
        var G__8093 = b;
        var G__8094 = c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8092, G__8093, G__8094) : f.call(null, G__8092, G__8093, G__8094);
      };
      var G__8105__4 = function() {
        var G__8106__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
        };
        var G__8106 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__8107__i = 0, G__8107__a = new Array(arguments.length - 3);
            while (G__8107__i < G__8107__a.length) {
              G__8107__a[G__8107__i] = arguments[G__8107__i + 3];
              ++G__8107__i;
            }
            ds = new cljs.core.IndexedSeq(G__8107__a, 0);
          }
          return G__8106__delegate.call(this, a, b, c, ds);
        };
        G__8106.cljs$lang$maxFixedArity = 3;
        G__8106.cljs$lang$applyTo = function(arglist__8108) {
          var a = cljs.core.first(arglist__8108);
          arglist__8108 = cljs.core.next(arglist__8108);
          var b = cljs.core.first(arglist__8108);
          arglist__8108 = cljs.core.next(arglist__8108);
          var c = cljs.core.first(arglist__8108);
          var ds = cljs.core.rest(arglist__8108);
          return G__8106__delegate(a, b, c, ds);
        };
        G__8106.cljs$core$IFn$_invoke$arity$variadic = G__8106__delegate;
        return G__8106;
      }();
      G__8105 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__8105__1.call(this, a);
          case 2:
            return G__8105__2.call(this, a, b);
          case 3:
            return G__8105__3.call(this, a, b, c);
          default:
            var G__8109 = null;
            if (arguments.length > 3) {
              var G__8110__i = 0, G__8110__a = new Array(arguments.length - 3);
              while (G__8110__i < G__8110__a.length) {
                G__8110__a[G__8110__i] = arguments[G__8110__i + 3];
                ++G__8110__i;
              }
              G__8109 = new cljs.core.IndexedSeq(G__8110__a, 0);
            }
            return G__8105__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__8109);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8105.cljs$lang$maxFixedArity = 3;
      G__8105.cljs$lang$applyTo = G__8105__4.cljs$lang$applyTo;
      G__8105.cljs$core$IFn$_invoke$arity$1 = G__8105__1;
      G__8105.cljs$core$IFn$_invoke$arity$2 = G__8105__2;
      G__8105.cljs$core$IFn$_invoke$arity$3 = G__8105__3;
      G__8105.cljs$core$IFn$_invoke$arity$variadic = G__8105__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__8105;
    }();
  };
  var cljs$core$fnil__3 = function(f, x, y) {
    return function() {
      var G__8111 = null;
      var G__8111__2 = function(a, b) {
        var G__8095 = a == null ? x : a;
        var G__8096 = b == null ? y : b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8095, G__8096) : f.call(null, G__8095, G__8096);
      };
      var G__8111__3 = function(a, b, c) {
        var G__8097 = a == null ? x : a;
        var G__8098 = b == null ? y : b;
        var G__8099 = c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8097, G__8098, G__8099) : f.call(null, G__8097, G__8098, G__8099);
      };
      var G__8111__4 = function() {
        var G__8112__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__8112 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__8113__i = 0, G__8113__a = new Array(arguments.length - 3);
            while (G__8113__i < G__8113__a.length) {
              G__8113__a[G__8113__i] = arguments[G__8113__i + 3];
              ++G__8113__i;
            }
            ds = new cljs.core.IndexedSeq(G__8113__a, 0);
          }
          return G__8112__delegate.call(this, a, b, c, ds);
        };
        G__8112.cljs$lang$maxFixedArity = 3;
        G__8112.cljs$lang$applyTo = function(arglist__8114) {
          var a = cljs.core.first(arglist__8114);
          arglist__8114 = cljs.core.next(arglist__8114);
          var b = cljs.core.first(arglist__8114);
          arglist__8114 = cljs.core.next(arglist__8114);
          var c = cljs.core.first(arglist__8114);
          var ds = cljs.core.rest(arglist__8114);
          return G__8112__delegate(a, b, c, ds);
        };
        G__8112.cljs$core$IFn$_invoke$arity$variadic = G__8112__delegate;
        return G__8112;
      }();
      G__8111 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__8111__2.call(this, a, b);
          case 3:
            return G__8111__3.call(this, a, b, c);
          default:
            var G__8115 = null;
            if (arguments.length > 3) {
              var G__8116__i = 0, G__8116__a = new Array(arguments.length - 3);
              while (G__8116__i < G__8116__a.length) {
                G__8116__a[G__8116__i] = arguments[G__8116__i + 3];
                ++G__8116__i;
              }
              G__8115 = new cljs.core.IndexedSeq(G__8116__a, 0);
            }
            return G__8111__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__8115);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8111.cljs$lang$maxFixedArity = 3;
      G__8111.cljs$lang$applyTo = G__8111__4.cljs$lang$applyTo;
      G__8111.cljs$core$IFn$_invoke$arity$2 = G__8111__2;
      G__8111.cljs$core$IFn$_invoke$arity$3 = G__8111__3;
      G__8111.cljs$core$IFn$_invoke$arity$variadic = G__8111__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__8111;
    }();
  };
  var cljs$core$fnil__4 = function(f, x, y, z) {
    return function() {
      var G__8117 = null;
      var G__8117__2 = function(a, b) {
        var G__8100 = a == null ? x : a;
        var G__8101 = b == null ? y : b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8100, G__8101) : f.call(null, G__8100, G__8101);
      };
      var G__8117__3 = function(a, b, c) {
        var G__8102 = a == null ? x : a;
        var G__8103 = b == null ? y : b;
        var G__8104 = c == null ? z : c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8102, G__8103, G__8104) : f.call(null, G__8102, G__8103, G__8104);
      };
      var G__8117__4 = function() {
        var G__8118__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__8118 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__8119__i = 0, G__8119__a = new Array(arguments.length - 3);
            while (G__8119__i < G__8119__a.length) {
              G__8119__a[G__8119__i] = arguments[G__8119__i + 3];
              ++G__8119__i;
            }
            ds = new cljs.core.IndexedSeq(G__8119__a, 0);
          }
          return G__8118__delegate.call(this, a, b, c, ds);
        };
        G__8118.cljs$lang$maxFixedArity = 3;
        G__8118.cljs$lang$applyTo = function(arglist__8120) {
          var a = cljs.core.first(arglist__8120);
          arglist__8120 = cljs.core.next(arglist__8120);
          var b = cljs.core.first(arglist__8120);
          arglist__8120 = cljs.core.next(arglist__8120);
          var c = cljs.core.first(arglist__8120);
          var ds = cljs.core.rest(arglist__8120);
          return G__8118__delegate(a, b, c, ds);
        };
        G__8118.cljs$core$IFn$_invoke$arity$variadic = G__8118__delegate;
        return G__8118;
      }();
      G__8117 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__8117__2.call(this, a, b);
          case 3:
            return G__8117__3.call(this, a, b, c);
          default:
            var G__8121 = null;
            if (arguments.length > 3) {
              var G__8122__i = 0, G__8122__a = new Array(arguments.length - 3);
              while (G__8122__i < G__8122__a.length) {
                G__8122__a[G__8122__i] = arguments[G__8122__i + 3];
                ++G__8122__i;
              }
              G__8121 = new cljs.core.IndexedSeq(G__8122__a, 0);
            }
            return G__8117__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__8121);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8117.cljs$lang$maxFixedArity = 3;
      G__8117.cljs$lang$applyTo = G__8117__4.cljs$lang$applyTo;
      G__8117.cljs$core$IFn$_invoke$arity$2 = G__8117__2;
      G__8117.cljs$core$IFn$_invoke$arity$3 = G__8117__3;
      G__8117.cljs$core$IFn$_invoke$arity$variadic = G__8117__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__8117;
    }();
  };
  cljs$core$fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return cljs$core$fnil__2.call(this, f, x);
      case 3:
        return cljs$core$fnil__3.call(this, f, x, y);
      case 4:
        return cljs$core$fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$fnil.cljs$core$IFn$_invoke$arity$2 = cljs$core$fnil__2;
  cljs$core$fnil.cljs$core$IFn$_invoke$arity$3 = cljs$core$fnil__3;
  cljs$core$fnil.cljs$core$IFn$_invoke$arity$4 = cljs$core$fnil__4;
  return cljs$core$fnil;
}();
cljs.core.map_indexed = function() {
  var cljs$core$map_indexed = null;
  var cljs$core$map_indexed__1 = function(f) {
    return function(rf) {
      var i = function() {
        var G__8153 = -1;
        return cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(G__8153) : cljs.core.volatile_BANG_.call(null, G__8153);
      }();
      return function(i) {
        return function() {
          var G__8183 = null;
          var G__8183__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__8183__1 = function(result) {
            var G__8154 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__8154) : rf.call(null, G__8154);
          };
          var G__8183__2 = function(result, input) {
            var G__8155 = result;
            var G__8156 = function() {
              var G__8157 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
              var G__8158 = input;
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8157, G__8158) : f.call(null, G__8157, G__8158);
            }();
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__8155, G__8156) : rf.call(null, G__8155, G__8156);
          };
          G__8183 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__8183__0.call(this);
              case 1:
                return G__8183__1.call(this, result);
              case 2:
                return G__8183__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__8183.cljs$core$IFn$_invoke$arity$0 = G__8183__0;
          G__8183.cljs$core$IFn$_invoke$arity$1 = G__8183__1;
          G__8183.cljs$core$IFn$_invoke$arity$2 = G__8183__2;
          return G__8183;
        }();
      }(i);
    };
  };
  var cljs$core$map_indexed__2 = function(f, coll) {
    var mapi = function cljs$core$map_indexed_$_mapi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq(coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(s)) {
            var c = cljs.core.chunk_first(s);
            var size = cljs.core.count(c);
            var b = cljs.core.chunk_buffer(size);
            var n__5007__auto___8184 = size;
            var i_8185 = 0;
            while (true) {
              if (i_8185 < n__5007__auto___8184) {
                cljs.core.chunk_append(b, function() {
                  var G__8179 = idx + i_8185;
                  var G__8180 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8185);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8179, G__8180) : f.call(null, G__8179, G__8180);
                }());
                var G__8186 = i_8185 + 1;
                i_8185 = G__8186;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$map_indexed_$_mapi(idx + size, cljs.core.chunk_rest(s)));
          } else {
            return cljs.core.cons(function() {
              var G__8181 = idx;
              var G__8182 = cljs.core.first(s);
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8181, G__8182) : f.call(null, G__8181, G__8182);
            }(), cljs$core$map_indexed_$_mapi(idx + 1, cljs.core.rest(s)));
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return mapi(0, coll);
  };
  cljs$core$map_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$map_indexed__1.call(this, f);
      case 2:
        return cljs$core$map_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$map_indexed.cljs$core$IFn$_invoke$arity$1 = cljs$core$map_indexed__1;
  cljs$core$map_indexed.cljs$core$IFn$_invoke$arity$2 = cljs$core$map_indexed__2;
  return cljs$core$map_indexed;
}();
cljs.core.keep = function() {
  var cljs$core$keep = null;
  var cljs$core$keep__1 = function(f) {
    return function(rf) {
      return function() {
        var G__8205 = null;
        var G__8205__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__8205__1 = function(result) {
          var G__8199 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__8199) : rf.call(null, G__8199);
        };
        var G__8205__2 = function(result, input) {
          var v = function() {
            var G__8200 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8200) : f.call(null, G__8200);
          }();
          if (v == null) {
            return result;
          } else {
            var G__8201 = result;
            var G__8202 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__8201, G__8202) : rf.call(null, G__8201, G__8202);
          }
        };
        G__8205 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__8205__0.call(this);
            case 1:
              return G__8205__1.call(this, result);
            case 2:
              return G__8205__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__8205.cljs$core$IFn$_invoke$arity$0 = G__8205__0;
        G__8205.cljs$core$IFn$_invoke$arity$1 = G__8205__1;
        G__8205.cljs$core$IFn$_invoke$arity$2 = G__8205__2;
        return G__8205;
      }();
    };
  };
  var cljs$core$keep__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5007__auto___8206 = size;
          var i_8207 = 0;
          while (true) {
            if (i_8207 < n__5007__auto___8206) {
              var x_8208 = function() {
                var G__8203 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8207);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8203) : f.call(null, G__8203);
              }();
              if (x_8208 == null) {
              } else {
                cljs.core.chunk_append(b, x_8208);
              }
              var G__8209 = i_8207 + 1;
              i_8207 = G__8209;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__8204 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8204) : f.call(null, G__8204);
          }();
          if (x == null) {
            return cljs$core$keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, cljs$core$keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$keep = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$keep__1.call(this, f);
      case 2:
        return cljs$core$keep__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$keep.cljs$core$IFn$_invoke$arity$1 = cljs$core$keep__1;
  cljs$core$keep.cljs$core$IFn$_invoke$arity$2 = cljs$core$keep__2;
  return cljs$core$keep;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__8210 = this$__$1;
  return goog.getUid(G__8210);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__8211 = cljs.core.seq(self__.watches);
  var chunk__8212 = null;
  var count__8213 = 0;
  var i__8214 = 0;
  while (true) {
    if (i__8214 < count__8213) {
      var vec__8215 = chunk__8212.cljs$core$IIndexed$_nth$arity$2(null, i__8214);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8215, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8215, 1, null);
      var G__8216_8225 = key;
      var G__8217_8226 = this$__$1;
      var G__8218_8227 = oldval;
      var G__8219_8228 = newval;
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8216_8225, G__8217_8226, G__8218_8227, G__8219_8228) : f.call(null, G__8216_8225, G__8217_8226, G__8218_8227, G__8219_8228);
      var G__8229 = seq__8211;
      var G__8230 = chunk__8212;
      var G__8231 = count__8213;
      var G__8232 = i__8214 + 1;
      seq__8211 = G__8229;
      chunk__8212 = G__8230;
      count__8213 = G__8231;
      i__8214 = G__8232;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__8211);
      if (temp__4126__auto__) {
        var seq__8211__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__8211__$1)) {
          var c__4907__auto__ = cljs.core.chunk_first(seq__8211__$1);
          var G__8233 = cljs.core.chunk_rest(seq__8211__$1);
          var G__8234 = c__4907__auto__;
          var G__8235 = cljs.core.count(c__4907__auto__);
          var G__8236 = 0;
          seq__8211 = G__8233;
          chunk__8212 = G__8234;
          count__8213 = G__8235;
          i__8214 = G__8236;
          continue;
        } else {
          var vec__8220 = cljs.core.first(seq__8211__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8220, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8220, 1, null);
          var G__8221_8237 = key;
          var G__8222_8238 = this$__$1;
          var G__8223_8239 = oldval;
          var G__8224_8240 = newval;
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8221_8237, G__8222_8238, G__8223_8239, G__8224_8240) : f.call(null, G__8221_8237, G__8222_8238, G__8223_8239, G__8224_8240);
          var G__8241 = cljs.core.next(seq__8211__$1);
          var G__8242 = null;
          var G__8243 = 0;
          var G__8244 = 0;
          seq__8211 = G__8241;
          chunk__8212 = G__8242;
          count__8213 = G__8243;
          i__8214 = G__8244;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function cljs$core$__GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var cljs$core$atom = null;
  var cljs$core$atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var cljs$core$atom__2 = function() {
    var G__8248__delegate = function(x, p__8245) {
      var map__8247 = p__8245;
      var map__8247__$1 = cljs.core.seq_QMARK_(map__8247) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__8247) : map__8247;
      var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8247__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8247__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__8248 = function(x, var_args) {
      var p__8245 = null;
      if (arguments.length > 1) {
        var G__8249__i = 0, G__8249__a = new Array(arguments.length - 1);
        while (G__8249__i < G__8249__a.length) {
          G__8249__a[G__8249__i] = arguments[G__8249__i + 1];
          ++G__8249__i;
        }
        p__8245 = new cljs.core.IndexedSeq(G__8249__a, 0);
      }
      return G__8248__delegate.call(this, x, p__8245);
    };
    G__8248.cljs$lang$maxFixedArity = 1;
    G__8248.cljs$lang$applyTo = function(arglist__8250) {
      var x = cljs.core.first(arglist__8250);
      var p__8245 = cljs.core.rest(arglist__8250);
      return G__8248__delegate(x, p__8245);
    };
    G__8248.cljs$core$IFn$_invoke$arity$variadic = G__8248__delegate;
    return G__8248;
  }();
  cljs$core$atom = function(x, var_args) {
    var p__8245 = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$atom__1.call(this, x);
      default:
        var G__8251 = null;
        if (arguments.length > 1) {
          var G__8252__i = 0, G__8252__a = new Array(arguments.length - 1);
          while (G__8252__i < G__8252__a.length) {
            G__8252__a[G__8252__i] = arguments[G__8252__i + 1];
            ++G__8252__i;
          }
          G__8251 = new cljs.core.IndexedSeq(G__8252__a, 0);
        }
        return cljs$core$atom__2.cljs$core$IFn$_invoke$arity$variadic(x, G__8251);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$atom.cljs$lang$maxFixedArity = 1;
  cljs$core$atom.cljs$lang$applyTo = cljs$core$atom__2.cljs$lang$applyTo;
  cljs$core$atom.cljs$core$IFn$_invoke$arity$1 = cljs$core$atom__1;
  cljs$core$atom.cljs$core$IFn$_invoke$arity$variadic = cljs$core$atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$atom;
}();
cljs.core.reset_BANG_ = function cljs$core$reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(function() {
        var G__8255 = new_value;
        return validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(G__8255) : validate.call(null, G__8255);
      }())) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__8256 = cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null));
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__8256) : cljs.core.pr_str.call(null, G__8256);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function() {
  var cljs$core$swap_BANG_ = null;
  var cljs$core$swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__8263 = a.state;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8263) : f.call(null, G__8263);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
    }
  };
  var cljs$core$swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__8264 = a.state;
        var G__8265 = x;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8264, G__8265) : f.call(null, G__8264, G__8265);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
    }
  };
  var cljs$core$swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__8266 = a.state;
        var G__8267 = x;
        var G__8268 = y;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8266, G__8267, G__8268) : f.call(null, G__8266, G__8267, G__8268);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
    }
  };
  var cljs$core$swap_BANG___5 = function() {
    var G__8269__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
      }
    };
    var G__8269 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__8270__i = 0, G__8270__a = new Array(arguments.length - 4);
        while (G__8270__i < G__8270__a.length) {
          G__8270__a[G__8270__i] = arguments[G__8270__i + 4];
          ++G__8270__i;
        }
        more = new cljs.core.IndexedSeq(G__8270__a, 0);
      }
      return G__8269__delegate.call(this, a, f, x, y, more);
    };
    G__8269.cljs$lang$maxFixedArity = 4;
    G__8269.cljs$lang$applyTo = function(arglist__8271) {
      var a = cljs.core.first(arglist__8271);
      arglist__8271 = cljs.core.next(arglist__8271);
      var f = cljs.core.first(arglist__8271);
      arglist__8271 = cljs.core.next(arglist__8271);
      var x = cljs.core.first(arglist__8271);
      arglist__8271 = cljs.core.next(arglist__8271);
      var y = cljs.core.first(arglist__8271);
      var more = cljs.core.rest(arglist__8271);
      return G__8269__delegate(a, f, x, y, more);
    };
    G__8269.cljs$core$IFn$_invoke$arity$variadic = G__8269__delegate;
    return G__8269;
  }();
  cljs$core$swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$swap_BANG___2.call(this, a, f);
      case 3:
        return cljs$core$swap_BANG___3.call(this, a, f, x);
      case 4:
        return cljs$core$swap_BANG___4.call(this, a, f, x, y);
      default:
        var G__8272 = null;
        if (arguments.length > 4) {
          var G__8273__i = 0, G__8273__a = new Array(arguments.length - 4);
          while (G__8273__i < G__8273__a.length) {
            G__8273__a[G__8273__i] = arguments[G__8273__i + 4];
            ++G__8273__i;
          }
          G__8272 = new cljs.core.IndexedSeq(G__8273__a, 0);
        }
        return cljs$core$swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, G__8272);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$swap_BANG_.cljs$lang$maxFixedArity = 4;
  cljs$core$swap_BANG_.cljs$lang$applyTo = cljs$core$swap_BANG___5.cljs$lang$applyTo;
  cljs$core$swap_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$swap_BANG___2;
  cljs$core$swap_BANG_.cljs$core$IFn$_invoke$arity$3 = cljs$core$swap_BANG___3;
  cljs$core$swap_BANG_.cljs$core$IFn$_invoke$arity$4 = cljs$core$swap_BANG___4;
  cljs$core$swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function cljs$core$compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function cljs$core$set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function cljs$core$get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function cljs$core$__GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function cljs$core$volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function cljs$core$volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function cljs$core$vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function() {
  var cljs$core$keep_indexed = null;
  var cljs$core$keep_indexed__1 = function(f) {
    return function(rf) {
      var ia = cljs.core.volatile_BANG_(-1);
      return function(ia) {
        return function() {
          var G__8340 = null;
          var G__8340__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__8340__1 = function(result) {
            var G__8307 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__8307) : rf.call(null, G__8307);
          };
          var G__8340__2 = function(result, input) {
            var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
            var v = function() {
              var G__8308 = i;
              var G__8309 = input;
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8308, G__8309) : f.call(null, G__8308, G__8309);
            }();
            if (v == null) {
              return result;
            } else {
              var G__8310 = result;
              var G__8311 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__8310, G__8311) : rf.call(null, G__8310, G__8311);
            }
          };
          G__8340 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__8340__0.call(this);
              case 1:
                return G__8340__1.call(this, result);
              case 2:
                return G__8340__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__8340.cljs$core$IFn$_invoke$arity$0 = G__8340__0;
          G__8340.cljs$core$IFn$_invoke$arity$1 = G__8340__1;
          G__8340.cljs$core$IFn$_invoke$arity$2 = G__8340__2;
          return G__8340;
        }();
      }(ia);
    };
  };
  var cljs$core$keep_indexed__2 = function(f, coll) {
    var keepi = function cljs$core$keep_indexed_$_keepi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq(coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(s)) {
            var c = cljs.core.chunk_first(s);
            var size = cljs.core.count(c);
            var b = cljs.core.chunk_buffer(size);
            var n__5007__auto___8341 = size;
            var i_8342 = 0;
            while (true) {
              if (i_8342 < n__5007__auto___8341) {
                var x_8343 = function() {
                  var G__8336 = idx + i_8342;
                  var G__8337 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8342);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8336, G__8337) : f.call(null, G__8336, G__8337);
                }();
                if (x_8343 == null) {
                } else {
                  cljs.core.chunk_append(b, x_8343);
                }
                var G__8344 = i_8342 + 1;
                i_8342 = G__8344;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keep_indexed_$_keepi(idx + size, cljs.core.chunk_rest(s)));
          } else {
            var x = function() {
              var G__8338 = idx;
              var G__8339 = cljs.core.first(s);
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8338, G__8339) : f.call(null, G__8338, G__8339);
            }();
            if (x == null) {
              return cljs$core$keep_indexed_$_keepi(idx + 1, cljs.core.rest(s));
            } else {
              return cljs.core.cons(x, cljs$core$keep_indexed_$_keepi(idx + 1, cljs.core.rest(s)));
            }
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return keepi(0, coll);
  };
  cljs$core$keep_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$keep_indexed__1.call(this, f);
      case 2:
        return cljs$core$keep_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$keep_indexed.cljs$core$IFn$_invoke$arity$1 = cljs$core$keep_indexed__1;
  cljs$core$keep_indexed.cljs$core$IFn$_invoke$arity$2 = cljs$core$keep_indexed__2;
  return cljs$core$keep_indexed;
}();
cljs.core.every_pred = function() {
  var cljs$core$every_pred = null;
  var cljs$core$every_pred__1 = function(p) {
    return function() {
      var cljs$core$every_pred_$_ep1 = null;
      var cljs$core$every_pred_$_ep1__0 = function() {
        return true;
      };
      var cljs$core$every_pred_$_ep1__1 = function(x) {
        return cljs.core.boolean$(function() {
          var G__8558 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8558) : p.call(null, G__8558);
        }());
      };
      var cljs$core$every_pred_$_ep1__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__8560 = x;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8560) : p.call(null, G__8560);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var G__8561 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8561) : p.call(null, G__8561);
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep1__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__8563 = x;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8563) : p.call(null, G__8563);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var and__4110__auto____$1 = function() {
              var G__8565 = y;
              return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8565) : p.call(null, G__8565);
            }();
            if (cljs.core.truth_(and__4110__auto____$1)) {
              var G__8566 = z;
              return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8566) : p.call(null, G__8566);
            } else {
              return and__4110__auto____$1;
            }
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep1__4 = function() {
        var G__8735__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(p, args));
        };
        var G__8735 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__8736__i = 0, G__8736__a = new Array(arguments.length - 3);
            while (G__8736__i < G__8736__a.length) {
              G__8736__a[G__8736__i] = arguments[G__8736__i + 3];
              ++G__8736__i;
            }
            args = new cljs.core.IndexedSeq(G__8736__a, 0);
          }
          return G__8735__delegate.call(this, x, y, z, args);
        };
        G__8735.cljs$lang$maxFixedArity = 3;
        G__8735.cljs$lang$applyTo = function(arglist__8737) {
          var x = cljs.core.first(arglist__8737);
          arglist__8737 = cljs.core.next(arglist__8737);
          var y = cljs.core.first(arglist__8737);
          arglist__8737 = cljs.core.next(arglist__8737);
          var z = cljs.core.first(arglist__8737);
          var args = cljs.core.rest(arglist__8737);
          return G__8735__delegate(x, y, z, args);
        };
        G__8735.cljs$core$IFn$_invoke$arity$variadic = G__8735__delegate;
        return G__8735;
      }();
      cljs$core$every_pred_$_ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$every_pred_$_ep1__0.call(this);
          case 1:
            return cljs$core$every_pred_$_ep1__1.call(this, x);
          case 2:
            return cljs$core$every_pred_$_ep1__2.call(this, x, y);
          case 3:
            return cljs$core$every_pred_$_ep1__3.call(this, x, y, z);
          default:
            var G__8738 = null;
            if (arguments.length > 3) {
              var G__8739__i = 0, G__8739__a = new Array(arguments.length - 3);
              while (G__8739__i < G__8739__a.length) {
                G__8739__a[G__8739__i] = arguments[G__8739__i + 3];
                ++G__8739__i;
              }
              G__8738 = new cljs.core.IndexedSeq(G__8739__a, 0);
            }
            return cljs$core$every_pred_$_ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8738);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$every_pred_$_ep1.cljs$lang$maxFixedArity = 3;
      cljs$core$every_pred_$_ep1.cljs$lang$applyTo = cljs$core$every_pred_$_ep1__4.cljs$lang$applyTo;
      cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$every_pred_$_ep1__0;
      cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$every_pred_$_ep1__1;
      cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$every_pred_$_ep1__2;
      cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$every_pred_$_ep1__3;
      cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$every_pred_$_ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$every_pred_$_ep1;
    }();
  };
  var cljs$core$every_pred__2 = function(p1, p2) {
    return function() {
      var cljs$core$every_pred_$_ep2 = null;
      var cljs$core$every_pred_$_ep2__0 = function() {
        return true;
      };
      var cljs$core$every_pred_$_ep2__1 = function(x) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__8598 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8598) : p1.call(null, G__8598);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var G__8599 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8599) : p2.call(null, G__8599);
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep2__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__8601 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8601) : p1.call(null, G__8601);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var and__4110__auto____$1 = function() {
              var G__8603 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8603) : p1.call(null, G__8603);
            }();
            if (cljs.core.truth_(and__4110__auto____$1)) {
              var and__4110__auto____$2 = function() {
                var G__8605 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8605) : p2.call(null, G__8605);
              }();
              if (cljs.core.truth_(and__4110__auto____$2)) {
                var G__8606 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8606) : p2.call(null, G__8606);
              } else {
                return and__4110__auto____$2;
              }
            } else {
              return and__4110__auto____$1;
            }
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep2__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__8608 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8608) : p1.call(null, G__8608);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var and__4110__auto____$1 = function() {
              var G__8610 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8610) : p1.call(null, G__8610);
            }();
            if (cljs.core.truth_(and__4110__auto____$1)) {
              var and__4110__auto____$2 = function() {
                var G__8612 = z;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8612) : p1.call(null, G__8612);
              }();
              if (cljs.core.truth_(and__4110__auto____$2)) {
                var and__4110__auto____$3 = function() {
                  var G__8614 = x;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8614) : p2.call(null, G__8614);
                }();
                if (cljs.core.truth_(and__4110__auto____$3)) {
                  var and__4110__auto____$4 = function() {
                    var G__8616 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8616) : p2.call(null, G__8616);
                  }();
                  if (cljs.core.truth_(and__4110__auto____$4)) {
                    var G__8617 = z;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8617) : p2.call(null, G__8617);
                  } else {
                    return and__4110__auto____$4;
                  }
                } else {
                  return and__4110__auto____$3;
                }
              } else {
                return and__4110__auto____$2;
              }
            } else {
              return and__4110__auto____$1;
            }
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep2__4 = function() {
        var G__8740__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(p1__8345_SHARP_) {
            var and__4110__auto__ = function() {
              var G__8622 = p1__8345_SHARP_;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8622) : p1.call(null, G__8622);
            }();
            if (cljs.core.truth_(and__4110__auto__)) {
              var G__8623 = p1__8345_SHARP_;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8623) : p2.call(null, G__8623);
            } else {
              return and__4110__auto__;
            }
          }, args));
        };
        var G__8740 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__8741__i = 0, G__8741__a = new Array(arguments.length - 3);
            while (G__8741__i < G__8741__a.length) {
              G__8741__a[G__8741__i] = arguments[G__8741__i + 3];
              ++G__8741__i;
            }
            args = new cljs.core.IndexedSeq(G__8741__a, 0);
          }
          return G__8740__delegate.call(this, x, y, z, args);
        };
        G__8740.cljs$lang$maxFixedArity = 3;
        G__8740.cljs$lang$applyTo = function(arglist__8742) {
          var x = cljs.core.first(arglist__8742);
          arglist__8742 = cljs.core.next(arglist__8742);
          var y = cljs.core.first(arglist__8742);
          arglist__8742 = cljs.core.next(arglist__8742);
          var z = cljs.core.first(arglist__8742);
          var args = cljs.core.rest(arglist__8742);
          return G__8740__delegate(x, y, z, args);
        };
        G__8740.cljs$core$IFn$_invoke$arity$variadic = G__8740__delegate;
        return G__8740;
      }();
      cljs$core$every_pred_$_ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$every_pred_$_ep2__0.call(this);
          case 1:
            return cljs$core$every_pred_$_ep2__1.call(this, x);
          case 2:
            return cljs$core$every_pred_$_ep2__2.call(this, x, y);
          case 3:
            return cljs$core$every_pred_$_ep2__3.call(this, x, y, z);
          default:
            var G__8743 = null;
            if (arguments.length > 3) {
              var G__8744__i = 0, G__8744__a = new Array(arguments.length - 3);
              while (G__8744__i < G__8744__a.length) {
                G__8744__a[G__8744__i] = arguments[G__8744__i + 3];
                ++G__8744__i;
              }
              G__8743 = new cljs.core.IndexedSeq(G__8744__a, 0);
            }
            return cljs$core$every_pred_$_ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8743);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$every_pred_$_ep2.cljs$lang$maxFixedArity = 3;
      cljs$core$every_pred_$_ep2.cljs$lang$applyTo = cljs$core$every_pred_$_ep2__4.cljs$lang$applyTo;
      cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$every_pred_$_ep2__0;
      cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$every_pred_$_ep2__1;
      cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$every_pred_$_ep2__2;
      cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$every_pred_$_ep2__3;
      cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$every_pred_$_ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$every_pred_$_ep2;
    }();
  };
  var cljs$core$every_pred__3 = function(p1, p2, p3) {
    return function() {
      var cljs$core$every_pred_$_ep3 = null;
      var cljs$core$every_pred_$_ep3__0 = function() {
        return true;
      };
      var cljs$core$every_pred_$_ep3__1 = function(x) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__8669 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8669) : p1.call(null, G__8669);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var and__4110__auto____$1 = function() {
              var G__8671 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8671) : p2.call(null, G__8671);
            }();
            if (cljs.core.truth_(and__4110__auto____$1)) {
              var G__8672 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8672) : p3.call(null, G__8672);
            } else {
              return and__4110__auto____$1;
            }
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep3__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__8674 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8674) : p1.call(null, G__8674);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var and__4110__auto____$1 = function() {
              var G__8676 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8676) : p2.call(null, G__8676);
            }();
            if (cljs.core.truth_(and__4110__auto____$1)) {
              var and__4110__auto____$2 = function() {
                var G__8678 = x;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8678) : p3.call(null, G__8678);
              }();
              if (cljs.core.truth_(and__4110__auto____$2)) {
                var and__4110__auto____$3 = function() {
                  var G__8680 = y;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8680) : p1.call(null, G__8680);
                }();
                if (cljs.core.truth_(and__4110__auto____$3)) {
                  var and__4110__auto____$4 = function() {
                    var G__8682 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8682) : p2.call(null, G__8682);
                  }();
                  if (cljs.core.truth_(and__4110__auto____$4)) {
                    var G__8683 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8683) : p3.call(null, G__8683);
                  } else {
                    return and__4110__auto____$4;
                  }
                } else {
                  return and__4110__auto____$3;
                }
              } else {
                return and__4110__auto____$2;
              }
            } else {
              return and__4110__auto____$1;
            }
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep3__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__8685 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8685) : p1.call(null, G__8685);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var and__4110__auto____$1 = function() {
              var G__8687 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8687) : p2.call(null, G__8687);
            }();
            if (cljs.core.truth_(and__4110__auto____$1)) {
              var and__4110__auto____$2 = function() {
                var G__8689 = x;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8689) : p3.call(null, G__8689);
              }();
              if (cljs.core.truth_(and__4110__auto____$2)) {
                var and__4110__auto____$3 = function() {
                  var G__8691 = y;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8691) : p1.call(null, G__8691);
                }();
                if (cljs.core.truth_(and__4110__auto____$3)) {
                  var and__4110__auto____$4 = function() {
                    var G__8693 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8693) : p2.call(null, G__8693);
                  }();
                  if (cljs.core.truth_(and__4110__auto____$4)) {
                    var and__4110__auto____$5 = function() {
                      var G__8695 = y;
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8695) : p3.call(null, G__8695);
                    }();
                    if (cljs.core.truth_(and__4110__auto____$5)) {
                      var and__4110__auto____$6 = function() {
                        var G__8697 = z;
                        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8697) : p1.call(null, G__8697);
                      }();
                      if (cljs.core.truth_(and__4110__auto____$6)) {
                        var and__4110__auto____$7 = function() {
                          var G__8699 = z;
                          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8699) : p2.call(null, G__8699);
                        }();
                        if (cljs.core.truth_(and__4110__auto____$7)) {
                          var G__8700 = z;
                          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8700) : p3.call(null, G__8700);
                        } else {
                          return and__4110__auto____$7;
                        }
                      } else {
                        return and__4110__auto____$6;
                      }
                    } else {
                      return and__4110__auto____$5;
                    }
                  } else {
                    return and__4110__auto____$4;
                  }
                } else {
                  return and__4110__auto____$3;
                }
              } else {
                return and__4110__auto____$2;
              }
            } else {
              return and__4110__auto____$1;
            }
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep3__4 = function() {
        var G__8745__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(p1__8346_SHARP_) {
            var and__4110__auto__ = function() {
              var G__8707 = p1__8346_SHARP_;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8707) : p1.call(null, G__8707);
            }();
            if (cljs.core.truth_(and__4110__auto__)) {
              var and__4110__auto____$1 = function() {
                var G__8709 = p1__8346_SHARP_;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8709) : p2.call(null, G__8709);
              }();
              if (cljs.core.truth_(and__4110__auto____$1)) {
                var G__8710 = p1__8346_SHARP_;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8710) : p3.call(null, G__8710);
              } else {
                return and__4110__auto____$1;
              }
            } else {
              return and__4110__auto__;
            }
          }, args));
        };
        var G__8745 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__8746__i = 0, G__8746__a = new Array(arguments.length - 3);
            while (G__8746__i < G__8746__a.length) {
              G__8746__a[G__8746__i] = arguments[G__8746__i + 3];
              ++G__8746__i;
            }
            args = new cljs.core.IndexedSeq(G__8746__a, 0);
          }
          return G__8745__delegate.call(this, x, y, z, args);
        };
        G__8745.cljs$lang$maxFixedArity = 3;
        G__8745.cljs$lang$applyTo = function(arglist__8747) {
          var x = cljs.core.first(arglist__8747);
          arglist__8747 = cljs.core.next(arglist__8747);
          var y = cljs.core.first(arglist__8747);
          arglist__8747 = cljs.core.next(arglist__8747);
          var z = cljs.core.first(arglist__8747);
          var args = cljs.core.rest(arglist__8747);
          return G__8745__delegate(x, y, z, args);
        };
        G__8745.cljs$core$IFn$_invoke$arity$variadic = G__8745__delegate;
        return G__8745;
      }();
      cljs$core$every_pred_$_ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$every_pred_$_ep3__0.call(this);
          case 1:
            return cljs$core$every_pred_$_ep3__1.call(this, x);
          case 2:
            return cljs$core$every_pred_$_ep3__2.call(this, x, y);
          case 3:
            return cljs$core$every_pred_$_ep3__3.call(this, x, y, z);
          default:
            var G__8748 = null;
            if (arguments.length > 3) {
              var G__8749__i = 0, G__8749__a = new Array(arguments.length - 3);
              while (G__8749__i < G__8749__a.length) {
                G__8749__a[G__8749__i] = arguments[G__8749__i + 3];
                ++G__8749__i;
              }
              G__8748 = new cljs.core.IndexedSeq(G__8749__a, 0);
            }
            return cljs$core$every_pred_$_ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8748);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$every_pred_$_ep3.cljs$lang$maxFixedArity = 3;
      cljs$core$every_pred_$_ep3.cljs$lang$applyTo = cljs$core$every_pred_$_ep3__4.cljs$lang$applyTo;
      cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$every_pred_$_ep3__0;
      cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$every_pred_$_ep3__1;
      cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$every_pred_$_ep3__2;
      cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$every_pred_$_ep3__3;
      cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$every_pred_$_ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$every_pred_$_ep3;
    }();
  };
  var cljs$core$every_pred__4 = function() {
    var G__8750__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var cljs$core$every_pred_$_epn = null;
          var cljs$core$every_pred_$_epn__0 = function() {
            return true;
          };
          var cljs$core$every_pred_$_epn__1 = function(x) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__8347_SHARP_) {
                var G__8726 = x;
                return p1__8347_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8347_SHARP_.cljs$core$IFn$_invoke$arity$1(G__8726) : p1__8347_SHARP_.call(null, G__8726);
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$every_pred_$_epn__2 = function(x, y) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__8348_SHARP_) {
                var and__4110__auto__ = function() {
                  var G__8728 = x;
                  return p1__8348_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8348_SHARP_.cljs$core$IFn$_invoke$arity$1(G__8728) : p1__8348_SHARP_.call(null, G__8728);
                }();
                if (cljs.core.truth_(and__4110__auto__)) {
                  var G__8729 = y;
                  return p1__8348_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8348_SHARP_.cljs$core$IFn$_invoke$arity$1(G__8729) : p1__8348_SHARP_.call(null, G__8729);
                } else {
                  return and__4110__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$every_pred_$_epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__8349_SHARP_) {
                var and__4110__auto__ = function() {
                  var G__8731 = x;
                  return p1__8349_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8349_SHARP_.cljs$core$IFn$_invoke$arity$1(G__8731) : p1__8349_SHARP_.call(null, G__8731);
                }();
                if (cljs.core.truth_(and__4110__auto__)) {
                  var and__4110__auto____$1 = function() {
                    var G__8733 = y;
                    return p1__8349_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8349_SHARP_.cljs$core$IFn$_invoke$arity$1(G__8733) : p1__8349_SHARP_.call(null, G__8733);
                  }();
                  if (cljs.core.truth_(and__4110__auto____$1)) {
                    var G__8734 = z;
                    return p1__8349_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8349_SHARP_.cljs$core$IFn$_invoke$arity$1(G__8734) : p1__8349_SHARP_.call(null, G__8734);
                  } else {
                    return and__4110__auto____$1;
                  }
                } else {
                  return and__4110__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$every_pred_$_epn__4 = function() {
            var G__8751__delegate = function(x, y, z, args) {
              return cljs.core.boolean$(cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(ps__$1) {
                return function(p1__8350_SHARP_) {
                  return cljs.core.every_QMARK_(p1__8350_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__8751 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__8752__i = 0, G__8752__a = new Array(arguments.length - 3);
                while (G__8752__i < G__8752__a.length) {
                  G__8752__a[G__8752__i] = arguments[G__8752__i + 3];
                  ++G__8752__i;
                }
                args = new cljs.core.IndexedSeq(G__8752__a, 0);
              }
              return G__8751__delegate.call(this, x, y, z, args);
            };
            G__8751.cljs$lang$maxFixedArity = 3;
            G__8751.cljs$lang$applyTo = function(arglist__8753) {
              var x = cljs.core.first(arglist__8753);
              arglist__8753 = cljs.core.next(arglist__8753);
              var y = cljs.core.first(arglist__8753);
              arglist__8753 = cljs.core.next(arglist__8753);
              var z = cljs.core.first(arglist__8753);
              var args = cljs.core.rest(arglist__8753);
              return G__8751__delegate(x, y, z, args);
            };
            G__8751.cljs$core$IFn$_invoke$arity$variadic = G__8751__delegate;
            return G__8751;
          }();
          cljs$core$every_pred_$_epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return cljs$core$every_pred_$_epn__0.call(this);
              case 1:
                return cljs$core$every_pred_$_epn__1.call(this, x);
              case 2:
                return cljs$core$every_pred_$_epn__2.call(this, x, y);
              case 3:
                return cljs$core$every_pred_$_epn__3.call(this, x, y, z);
              default:
                var G__8754 = null;
                if (arguments.length > 3) {
                  var G__8755__i = 0, G__8755__a = new Array(arguments.length - 3);
                  while (G__8755__i < G__8755__a.length) {
                    G__8755__a[G__8755__i] = arguments[G__8755__i + 3];
                    ++G__8755__i;
                  }
                  G__8754 = new cljs.core.IndexedSeq(G__8755__a, 0);
                }
                return cljs$core$every_pred_$_epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8754);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          cljs$core$every_pred_$_epn.cljs$lang$maxFixedArity = 3;
          cljs$core$every_pred_$_epn.cljs$lang$applyTo = cljs$core$every_pred_$_epn__4.cljs$lang$applyTo;
          cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$every_pred_$_epn__0;
          cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$every_pred_$_epn__1;
          cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$every_pred_$_epn__2;
          cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$every_pred_$_epn__3;
          cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$every_pred_$_epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return cljs$core$every_pred_$_epn;
        }();
      }(ps__$1);
    };
    var G__8750 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        var G__8756__i = 0, G__8756__a = new Array(arguments.length - 3);
        while (G__8756__i < G__8756__a.length) {
          G__8756__a[G__8756__i] = arguments[G__8756__i + 3];
          ++G__8756__i;
        }
        ps = new cljs.core.IndexedSeq(G__8756__a, 0);
      }
      return G__8750__delegate.call(this, p1, p2, p3, ps);
    };
    G__8750.cljs$lang$maxFixedArity = 3;
    G__8750.cljs$lang$applyTo = function(arglist__8757) {
      var p1 = cljs.core.first(arglist__8757);
      arglist__8757 = cljs.core.next(arglist__8757);
      var p2 = cljs.core.first(arglist__8757);
      arglist__8757 = cljs.core.next(arglist__8757);
      var p3 = cljs.core.first(arglist__8757);
      var ps = cljs.core.rest(arglist__8757);
      return G__8750__delegate(p1, p2, p3, ps);
    };
    G__8750.cljs$core$IFn$_invoke$arity$variadic = G__8750__delegate;
    return G__8750;
  }();
  cljs$core$every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$every_pred__1.call(this, p1);
      case 2:
        return cljs$core$every_pred__2.call(this, p1, p2);
      case 3:
        return cljs$core$every_pred__3.call(this, p1, p2, p3);
      default:
        var G__8758 = null;
        if (arguments.length > 3) {
          var G__8759__i = 0, G__8759__a = new Array(arguments.length - 3);
          while (G__8759__i < G__8759__a.length) {
            G__8759__a[G__8759__i] = arguments[G__8759__i + 3];
            ++G__8759__i;
          }
          G__8758 = new cljs.core.IndexedSeq(G__8759__a, 0);
        }
        return cljs$core$every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, G__8758);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$every_pred.cljs$lang$maxFixedArity = 3;
  cljs$core$every_pred.cljs$lang$applyTo = cljs$core$every_pred__4.cljs$lang$applyTo;
  cljs$core$every_pred.cljs$core$IFn$_invoke$arity$1 = cljs$core$every_pred__1;
  cljs$core$every_pred.cljs$core$IFn$_invoke$arity$2 = cljs$core$every_pred__2;
  cljs$core$every_pred.cljs$core$IFn$_invoke$arity$3 = cljs$core$every_pred__3;
  cljs$core$every_pred.cljs$core$IFn$_invoke$arity$variadic = cljs$core$every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$every_pred;
}();
cljs.core.some_fn = function() {
  var cljs$core$some_fn = null;
  var cljs$core$some_fn__1 = function(p) {
    return function() {
      var cljs$core$some_fn_$_sp1 = null;
      var cljs$core$some_fn_$_sp1__0 = function() {
        return null;
      };
      var cljs$core$some_fn_$_sp1__1 = function(x) {
        var G__8965 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8965) : p.call(null, G__8965);
      };
      var cljs$core$some_fn_$_sp1__2 = function(x, y) {
        var or__4122__auto__ = function() {
          var G__8967 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8967) : p.call(null, G__8967);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var G__8968 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8968) : p.call(null, G__8968);
        }
      };
      var cljs$core$some_fn_$_sp1__3 = function(x, y, z) {
        var or__4122__auto__ = function() {
          var G__8970 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8970) : p.call(null, G__8970);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = function() {
            var G__8972 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8972) : p.call(null, G__8972);
          }();
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            var G__8973 = z;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8973) : p.call(null, G__8973);
          }
        }
      };
      var cljs$core$some_fn_$_sp1__4 = function() {
        var G__9134__delegate = function(x, y, z, args) {
          var or__4122__auto__ = cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4122__auto__)) {
            return or__4122__auto__;
          } else {
            return cljs.core.some(p, args);
          }
        };
        var G__9134 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9135__i = 0, G__9135__a = new Array(arguments.length - 3);
            while (G__9135__i < G__9135__a.length) {
              G__9135__a[G__9135__i] = arguments[G__9135__i + 3];
              ++G__9135__i;
            }
            args = new cljs.core.IndexedSeq(G__9135__a, 0);
          }
          return G__9134__delegate.call(this, x, y, z, args);
        };
        G__9134.cljs$lang$maxFixedArity = 3;
        G__9134.cljs$lang$applyTo = function(arglist__9136) {
          var x = cljs.core.first(arglist__9136);
          arglist__9136 = cljs.core.next(arglist__9136);
          var y = cljs.core.first(arglist__9136);
          arglist__9136 = cljs.core.next(arglist__9136);
          var z = cljs.core.first(arglist__9136);
          var args = cljs.core.rest(arglist__9136);
          return G__9134__delegate(x, y, z, args);
        };
        G__9134.cljs$core$IFn$_invoke$arity$variadic = G__9134__delegate;
        return G__9134;
      }();
      cljs$core$some_fn_$_sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$some_fn_$_sp1__0.call(this);
          case 1:
            return cljs$core$some_fn_$_sp1__1.call(this, x);
          case 2:
            return cljs$core$some_fn_$_sp1__2.call(this, x, y);
          case 3:
            return cljs$core$some_fn_$_sp1__3.call(this, x, y, z);
          default:
            var G__9137 = null;
            if (arguments.length > 3) {
              var G__9138__i = 0, G__9138__a = new Array(arguments.length - 3);
              while (G__9138__i < G__9138__a.length) {
                G__9138__a[G__9138__i] = arguments[G__9138__i + 3];
                ++G__9138__i;
              }
              G__9137 = new cljs.core.IndexedSeq(G__9138__a, 0);
            }
            return cljs$core$some_fn_$_sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9137);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$some_fn_$_sp1.cljs$lang$maxFixedArity = 3;
      cljs$core$some_fn_$_sp1.cljs$lang$applyTo = cljs$core$some_fn_$_sp1__4.cljs$lang$applyTo;
      cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$some_fn_$_sp1__0;
      cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$some_fn_$_sp1__1;
      cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$some_fn_$_sp1__2;
      cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$some_fn_$_sp1__3;
      cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$some_fn_$_sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$some_fn_$_sp1;
    }();
  };
  var cljs$core$some_fn__2 = function(p1, p2) {
    return function() {
      var cljs$core$some_fn_$_sp2 = null;
      var cljs$core$some_fn_$_sp2__0 = function() {
        return null;
      };
      var cljs$core$some_fn_$_sp2__1 = function(x) {
        var or__4122__auto__ = function() {
          var G__9005 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9005) : p1.call(null, G__9005);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var G__9006 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9006) : p2.call(null, G__9006);
        }
      };
      var cljs$core$some_fn_$_sp2__2 = function(x, y) {
        var or__4122__auto__ = function() {
          var G__9008 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9008) : p1.call(null, G__9008);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = function() {
            var G__9010 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9010) : p1.call(null, G__9010);
          }();
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            var or__4122__auto____$2 = function() {
              var G__9012 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9012) : p2.call(null, G__9012);
            }();
            if (cljs.core.truth_(or__4122__auto____$2)) {
              return or__4122__auto____$2;
            } else {
              var G__9013 = y;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9013) : p2.call(null, G__9013);
            }
          }
        }
      };
      var cljs$core$some_fn_$_sp2__3 = function(x, y, z) {
        var or__4122__auto__ = function() {
          var G__9015 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9015) : p1.call(null, G__9015);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = function() {
            var G__9017 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9017) : p1.call(null, G__9017);
          }();
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            var or__4122__auto____$2 = function() {
              var G__9019 = z;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9019) : p1.call(null, G__9019);
            }();
            if (cljs.core.truth_(or__4122__auto____$2)) {
              return or__4122__auto____$2;
            } else {
              var or__4122__auto____$3 = function() {
                var G__9021 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9021) : p2.call(null, G__9021);
              }();
              if (cljs.core.truth_(or__4122__auto____$3)) {
                return or__4122__auto____$3;
              } else {
                var or__4122__auto____$4 = function() {
                  var G__9023 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9023) : p2.call(null, G__9023);
                }();
                if (cljs.core.truth_(or__4122__auto____$4)) {
                  return or__4122__auto____$4;
                } else {
                  var G__9024 = z;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9024) : p2.call(null, G__9024);
                }
              }
            }
          }
        }
      };
      var cljs$core$some_fn_$_sp2__4 = function() {
        var G__9139__delegate = function(x, y, z, args) {
          var or__4122__auto__ = cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4122__auto__)) {
            return or__4122__auto__;
          } else {
            return cljs.core.some(function(or__4122__auto__) {
              return function(p1__8760_SHARP_) {
                var or__4122__auto____$1 = function() {
                  var G__9026 = p1__8760_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9026) : p1.call(null, G__9026);
                }();
                if (cljs.core.truth_(or__4122__auto____$1)) {
                  return or__4122__auto____$1;
                } else {
                  var G__9027 = p1__8760_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9027) : p2.call(null, G__9027);
                }
              };
            }(or__4122__auto__), args);
          }
        };
        var G__9139 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9140__i = 0, G__9140__a = new Array(arguments.length - 3);
            while (G__9140__i < G__9140__a.length) {
              G__9140__a[G__9140__i] = arguments[G__9140__i + 3];
              ++G__9140__i;
            }
            args = new cljs.core.IndexedSeq(G__9140__a, 0);
          }
          return G__9139__delegate.call(this, x, y, z, args);
        };
        G__9139.cljs$lang$maxFixedArity = 3;
        G__9139.cljs$lang$applyTo = function(arglist__9141) {
          var x = cljs.core.first(arglist__9141);
          arglist__9141 = cljs.core.next(arglist__9141);
          var y = cljs.core.first(arglist__9141);
          arglist__9141 = cljs.core.next(arglist__9141);
          var z = cljs.core.first(arglist__9141);
          var args = cljs.core.rest(arglist__9141);
          return G__9139__delegate(x, y, z, args);
        };
        G__9139.cljs$core$IFn$_invoke$arity$variadic = G__9139__delegate;
        return G__9139;
      }();
      cljs$core$some_fn_$_sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$some_fn_$_sp2__0.call(this);
          case 1:
            return cljs$core$some_fn_$_sp2__1.call(this, x);
          case 2:
            return cljs$core$some_fn_$_sp2__2.call(this, x, y);
          case 3:
            return cljs$core$some_fn_$_sp2__3.call(this, x, y, z);
          default:
            var G__9142 = null;
            if (arguments.length > 3) {
              var G__9143__i = 0, G__9143__a = new Array(arguments.length - 3);
              while (G__9143__i < G__9143__a.length) {
                G__9143__a[G__9143__i] = arguments[G__9143__i + 3];
                ++G__9143__i;
              }
              G__9142 = new cljs.core.IndexedSeq(G__9143__a, 0);
            }
            return cljs$core$some_fn_$_sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9142);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$some_fn_$_sp2.cljs$lang$maxFixedArity = 3;
      cljs$core$some_fn_$_sp2.cljs$lang$applyTo = cljs$core$some_fn_$_sp2__4.cljs$lang$applyTo;
      cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$some_fn_$_sp2__0;
      cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$some_fn_$_sp2__1;
      cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$some_fn_$_sp2__2;
      cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$some_fn_$_sp2__3;
      cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$some_fn_$_sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$some_fn_$_sp2;
    }();
  };
  var cljs$core$some_fn__3 = function(p1, p2, p3) {
    return function() {
      var cljs$core$some_fn_$_sp3 = null;
      var cljs$core$some_fn_$_sp3__0 = function() {
        return null;
      };
      var cljs$core$some_fn_$_sp3__1 = function(x) {
        var or__4122__auto__ = function() {
          var G__9073 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9073) : p1.call(null, G__9073);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = function() {
            var G__9075 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9075) : p2.call(null, G__9075);
          }();
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            var G__9076 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9076) : p3.call(null, G__9076);
          }
        }
      };
      var cljs$core$some_fn_$_sp3__2 = function(x, y) {
        var or__4122__auto__ = function() {
          var G__9078 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9078) : p1.call(null, G__9078);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = function() {
            var G__9080 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9080) : p2.call(null, G__9080);
          }();
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            var or__4122__auto____$2 = function() {
              var G__9082 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9082) : p3.call(null, G__9082);
            }();
            if (cljs.core.truth_(or__4122__auto____$2)) {
              return or__4122__auto____$2;
            } else {
              var or__4122__auto____$3 = function() {
                var G__9084 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9084) : p1.call(null, G__9084);
              }();
              if (cljs.core.truth_(or__4122__auto____$3)) {
                return or__4122__auto____$3;
              } else {
                var or__4122__auto____$4 = function() {
                  var G__9086 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9086) : p2.call(null, G__9086);
                }();
                if (cljs.core.truth_(or__4122__auto____$4)) {
                  return or__4122__auto____$4;
                } else {
                  var G__9087 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9087) : p3.call(null, G__9087);
                }
              }
            }
          }
        }
      };
      var cljs$core$some_fn_$_sp3__3 = function(x, y, z) {
        var or__4122__auto__ = function() {
          var G__9089 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9089) : p1.call(null, G__9089);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = function() {
            var G__9091 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9091) : p2.call(null, G__9091);
          }();
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            var or__4122__auto____$2 = function() {
              var G__9093 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9093) : p3.call(null, G__9093);
            }();
            if (cljs.core.truth_(or__4122__auto____$2)) {
              return or__4122__auto____$2;
            } else {
              var or__4122__auto____$3 = function() {
                var G__9095 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9095) : p1.call(null, G__9095);
              }();
              if (cljs.core.truth_(or__4122__auto____$3)) {
                return or__4122__auto____$3;
              } else {
                var or__4122__auto____$4 = function() {
                  var G__9097 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9097) : p2.call(null, G__9097);
                }();
                if (cljs.core.truth_(or__4122__auto____$4)) {
                  return or__4122__auto____$4;
                } else {
                  var or__4122__auto____$5 = function() {
                    var G__9099 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9099) : p3.call(null, G__9099);
                  }();
                  if (cljs.core.truth_(or__4122__auto____$5)) {
                    return or__4122__auto____$5;
                  } else {
                    var or__4122__auto____$6 = function() {
                      var G__9101 = z;
                      return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9101) : p1.call(null, G__9101);
                    }();
                    if (cljs.core.truth_(or__4122__auto____$6)) {
                      return or__4122__auto____$6;
                    } else {
                      var or__4122__auto____$7 = function() {
                        var G__9103 = z;
                        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9103) : p2.call(null, G__9103);
                      }();
                      if (cljs.core.truth_(or__4122__auto____$7)) {
                        return or__4122__auto____$7;
                      } else {
                        var G__9104 = z;
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9104) : p3.call(null, G__9104);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var cljs$core$some_fn_$_sp3__4 = function() {
        var G__9144__delegate = function(x, y, z, args) {
          var or__4122__auto__ = cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4122__auto__)) {
            return or__4122__auto__;
          } else {
            return cljs.core.some(function(or__4122__auto__) {
              return function(p1__8761_SHARP_) {
                var or__4122__auto____$1 = function() {
                  var G__9106 = p1__8761_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9106) : p1.call(null, G__9106);
                }();
                if (cljs.core.truth_(or__4122__auto____$1)) {
                  return or__4122__auto____$1;
                } else {
                  var or__4122__auto____$2 = function() {
                    var G__9108 = p1__8761_SHARP_;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9108) : p2.call(null, G__9108);
                  }();
                  if (cljs.core.truth_(or__4122__auto____$2)) {
                    return or__4122__auto____$2;
                  } else {
                    var G__9109 = p1__8761_SHARP_;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9109) : p3.call(null, G__9109);
                  }
                }
              };
            }(or__4122__auto__), args);
          }
        };
        var G__9144 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9145__i = 0, G__9145__a = new Array(arguments.length - 3);
            while (G__9145__i < G__9145__a.length) {
              G__9145__a[G__9145__i] = arguments[G__9145__i + 3];
              ++G__9145__i;
            }
            args = new cljs.core.IndexedSeq(G__9145__a, 0);
          }
          return G__9144__delegate.call(this, x, y, z, args);
        };
        G__9144.cljs$lang$maxFixedArity = 3;
        G__9144.cljs$lang$applyTo = function(arglist__9146) {
          var x = cljs.core.first(arglist__9146);
          arglist__9146 = cljs.core.next(arglist__9146);
          var y = cljs.core.first(arglist__9146);
          arglist__9146 = cljs.core.next(arglist__9146);
          var z = cljs.core.first(arglist__9146);
          var args = cljs.core.rest(arglist__9146);
          return G__9144__delegate(x, y, z, args);
        };
        G__9144.cljs$core$IFn$_invoke$arity$variadic = G__9144__delegate;
        return G__9144;
      }();
      cljs$core$some_fn_$_sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$some_fn_$_sp3__0.call(this);
          case 1:
            return cljs$core$some_fn_$_sp3__1.call(this, x);
          case 2:
            return cljs$core$some_fn_$_sp3__2.call(this, x, y);
          case 3:
            return cljs$core$some_fn_$_sp3__3.call(this, x, y, z);
          default:
            var G__9147 = null;
            if (arguments.length > 3) {
              var G__9148__i = 0, G__9148__a = new Array(arguments.length - 3);
              while (G__9148__i < G__9148__a.length) {
                G__9148__a[G__9148__i] = arguments[G__9148__i + 3];
                ++G__9148__i;
              }
              G__9147 = new cljs.core.IndexedSeq(G__9148__a, 0);
            }
            return cljs$core$some_fn_$_sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9147);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$some_fn_$_sp3.cljs$lang$maxFixedArity = 3;
      cljs$core$some_fn_$_sp3.cljs$lang$applyTo = cljs$core$some_fn_$_sp3__4.cljs$lang$applyTo;
      cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$some_fn_$_sp3__0;
      cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$some_fn_$_sp3__1;
      cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$some_fn_$_sp3__2;
      cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$some_fn_$_sp3__3;
      cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$some_fn_$_sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$some_fn_$_sp3;
    }();
  };
  var cljs$core$some_fn__4 = function() {
    var G__9149__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var cljs$core$some_fn_$_spn = null;
          var cljs$core$some_fn_$_spn__0 = function() {
            return null;
          };
          var cljs$core$some_fn_$_spn__1 = function(x) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__8762_SHARP_) {
                var G__9125 = x;
                return p1__8762_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8762_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9125) : p1__8762_SHARP_.call(null, G__9125);
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$some_fn_$_spn__2 = function(x, y) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__8763_SHARP_) {
                var or__4122__auto__ = function() {
                  var G__9127 = x;
                  return p1__8763_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8763_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9127) : p1__8763_SHARP_.call(null, G__9127);
                }();
                if (cljs.core.truth_(or__4122__auto__)) {
                  return or__4122__auto__;
                } else {
                  var G__9128 = y;
                  return p1__8763_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8763_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9128) : p1__8763_SHARP_.call(null, G__9128);
                }
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$some_fn_$_spn__3 = function(x, y, z) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__8764_SHARP_) {
                var or__4122__auto__ = function() {
                  var G__9130 = x;
                  return p1__8764_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8764_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9130) : p1__8764_SHARP_.call(null, G__9130);
                }();
                if (cljs.core.truth_(or__4122__auto__)) {
                  return or__4122__auto__;
                } else {
                  var or__4122__auto____$1 = function() {
                    var G__9132 = y;
                    return p1__8764_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8764_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9132) : p1__8764_SHARP_.call(null, G__9132);
                  }();
                  if (cljs.core.truth_(or__4122__auto____$1)) {
                    return or__4122__auto____$1;
                  } else {
                    var G__9133 = z;
                    return p1__8764_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8764_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9133) : p1__8764_SHARP_.call(null, G__9133);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$some_fn_$_spn__4 = function() {
            var G__9150__delegate = function(x, y, z, args) {
              var or__4122__auto__ = cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
              if (cljs.core.truth_(or__4122__auto__)) {
                return or__4122__auto__;
              } else {
                return cljs.core.some(function(or__4122__auto__, ps__$1) {
                  return function(p1__8765_SHARP_) {
                    return cljs.core.some(p1__8765_SHARP_, args);
                  };
                }(or__4122__auto__, ps__$1), ps__$1);
              }
            };
            var G__9150 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__9151__i = 0, G__9151__a = new Array(arguments.length - 3);
                while (G__9151__i < G__9151__a.length) {
                  G__9151__a[G__9151__i] = arguments[G__9151__i + 3];
                  ++G__9151__i;
                }
                args = new cljs.core.IndexedSeq(G__9151__a, 0);
              }
              return G__9150__delegate.call(this, x, y, z, args);
            };
            G__9150.cljs$lang$maxFixedArity = 3;
            G__9150.cljs$lang$applyTo = function(arglist__9152) {
              var x = cljs.core.first(arglist__9152);
              arglist__9152 = cljs.core.next(arglist__9152);
              var y = cljs.core.first(arglist__9152);
              arglist__9152 = cljs.core.next(arglist__9152);
              var z = cljs.core.first(arglist__9152);
              var args = cljs.core.rest(arglist__9152);
              return G__9150__delegate(x, y, z, args);
            };
            G__9150.cljs$core$IFn$_invoke$arity$variadic = G__9150__delegate;
            return G__9150;
          }();
          cljs$core$some_fn_$_spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return cljs$core$some_fn_$_spn__0.call(this);
              case 1:
                return cljs$core$some_fn_$_spn__1.call(this, x);
              case 2:
                return cljs$core$some_fn_$_spn__2.call(this, x, y);
              case 3:
                return cljs$core$some_fn_$_spn__3.call(this, x, y, z);
              default:
                var G__9153 = null;
                if (arguments.length > 3) {
                  var G__9154__i = 0, G__9154__a = new Array(arguments.length - 3);
                  while (G__9154__i < G__9154__a.length) {
                    G__9154__a[G__9154__i] = arguments[G__9154__i + 3];
                    ++G__9154__i;
                  }
                  G__9153 = new cljs.core.IndexedSeq(G__9154__a, 0);
                }
                return cljs$core$some_fn_$_spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9153);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          cljs$core$some_fn_$_spn.cljs$lang$maxFixedArity = 3;
          cljs$core$some_fn_$_spn.cljs$lang$applyTo = cljs$core$some_fn_$_spn__4.cljs$lang$applyTo;
          cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$some_fn_$_spn__0;
          cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$some_fn_$_spn__1;
          cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$some_fn_$_spn__2;
          cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$some_fn_$_spn__3;
          cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$some_fn_$_spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return cljs$core$some_fn_$_spn;
        }();
      }(ps__$1);
    };
    var G__9149 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        var G__9155__i = 0, G__9155__a = new Array(arguments.length - 3);
        while (G__9155__i < G__9155__a.length) {
          G__9155__a[G__9155__i] = arguments[G__9155__i + 3];
          ++G__9155__i;
        }
        ps = new cljs.core.IndexedSeq(G__9155__a, 0);
      }
      return G__9149__delegate.call(this, p1, p2, p3, ps);
    };
    G__9149.cljs$lang$maxFixedArity = 3;
    G__9149.cljs$lang$applyTo = function(arglist__9156) {
      var p1 = cljs.core.first(arglist__9156);
      arglist__9156 = cljs.core.next(arglist__9156);
      var p2 = cljs.core.first(arglist__9156);
      arglist__9156 = cljs.core.next(arglist__9156);
      var p3 = cljs.core.first(arglist__9156);
      var ps = cljs.core.rest(arglist__9156);
      return G__9149__delegate(p1, p2, p3, ps);
    };
    G__9149.cljs$core$IFn$_invoke$arity$variadic = G__9149__delegate;
    return G__9149;
  }();
  cljs$core$some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$some_fn__1.call(this, p1);
      case 2:
        return cljs$core$some_fn__2.call(this, p1, p2);
      case 3:
        return cljs$core$some_fn__3.call(this, p1, p2, p3);
      default:
        var G__9157 = null;
        if (arguments.length > 3) {
          var G__9158__i = 0, G__9158__a = new Array(arguments.length - 3);
          while (G__9158__i < G__9158__a.length) {
            G__9158__a[G__9158__i] = arguments[G__9158__i + 3];
            ++G__9158__i;
          }
          G__9157 = new cljs.core.IndexedSeq(G__9158__a, 0);
        }
        return cljs$core$some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, G__9157);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$some_fn.cljs$lang$maxFixedArity = 3;
  cljs$core$some_fn.cljs$lang$applyTo = cljs$core$some_fn__4.cljs$lang$applyTo;
  cljs$core$some_fn.cljs$core$IFn$_invoke$arity$1 = cljs$core$some_fn__1;
  cljs$core$some_fn.cljs$core$IFn$_invoke$arity$2 = cljs$core$some_fn__2;
  cljs$core$some_fn.cljs$core$IFn$_invoke$arity$3 = cljs$core$some_fn__3;
  cljs$core$some_fn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$some_fn;
}();
cljs.core.map = function() {
  var cljs$core$map = null;
  var cljs$core$map__1 = function(f) {
    return function(rf) {
      return function() {
        var G__9213 = null;
        var G__9213__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9213__1 = function(result) {
          var G__9199 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9199) : rf.call(null, G__9199);
        };
        var G__9213__2 = function(result, input) {
          var G__9200 = result;
          var G__9201 = function() {
            var G__9202 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9202) : f.call(null, G__9202);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9200, G__9201) : rf.call(null, G__9200, G__9201);
        };
        var G__9213__3 = function() {
          var G__9214__delegate = function(result, input, inputs) {
            var G__9203 = result;
            var G__9204 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9203, G__9204) : rf.call(null, G__9203, G__9204);
          };
          var G__9214 = function(result, input, var_args) {
            var inputs = null;
            if (arguments.length > 2) {
              var G__9215__i = 0, G__9215__a = new Array(arguments.length - 2);
              while (G__9215__i < G__9215__a.length) {
                G__9215__a[G__9215__i] = arguments[G__9215__i + 2];
                ++G__9215__i;
              }
              inputs = new cljs.core.IndexedSeq(G__9215__a, 0);
            }
            return G__9214__delegate.call(this, result, input, inputs);
          };
          G__9214.cljs$lang$maxFixedArity = 2;
          G__9214.cljs$lang$applyTo = function(arglist__9216) {
            var result = cljs.core.first(arglist__9216);
            arglist__9216 = cljs.core.next(arglist__9216);
            var input = cljs.core.first(arglist__9216);
            var inputs = cljs.core.rest(arglist__9216);
            return G__9214__delegate(result, input, inputs);
          };
          G__9214.cljs$core$IFn$_invoke$arity$variadic = G__9214__delegate;
          return G__9214;
        }();
        G__9213 = function(result, input, var_args) {
          var inputs = var_args;
          switch(arguments.length) {
            case 0:
              return G__9213__0.call(this);
            case 1:
              return G__9213__1.call(this, result);
            case 2:
              return G__9213__2.call(this, result, input);
            default:
              var G__9217 = null;
              if (arguments.length > 2) {
                var G__9218__i = 0, G__9218__a = new Array(arguments.length - 2);
                while (G__9218__i < G__9218__a.length) {
                  G__9218__a[G__9218__i] = arguments[G__9218__i + 2];
                  ++G__9218__i;
                }
                G__9217 = new cljs.core.IndexedSeq(G__9218__a, 0);
              }
              return G__9213__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__9217);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9213.cljs$lang$maxFixedArity = 2;
        G__9213.cljs$lang$applyTo = G__9213__3.cljs$lang$applyTo;
        G__9213.cljs$core$IFn$_invoke$arity$0 = G__9213__0;
        G__9213.cljs$core$IFn$_invoke$arity$1 = G__9213__1;
        G__9213.cljs$core$IFn$_invoke$arity$2 = G__9213__2;
        G__9213.cljs$core$IFn$_invoke$arity$variadic = G__9213__3.cljs$core$IFn$_invoke$arity$variadic;
        return G__9213;
      }();
    };
  };
  var cljs$core$map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5007__auto___9219 = size;
          var i_9220 = 0;
          while (true) {
            if (i_9220 < n__5007__auto___9219) {
              cljs.core.chunk_append(b, function() {
                var G__9205 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9220);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9205) : f.call(null, G__9205);
              }());
              var G__9221 = i_9220 + 1;
              i_9220 = G__9221;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__9206 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9206) : f.call(null, G__9206);
          }(), cljs$core$map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var cljs$core$map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      if (s1 && s2) {
        return cljs.core.cons(function() {
          var G__9207 = cljs.core.first(s1);
          var G__9208 = cljs.core.first(s2);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9207, G__9208) : f.call(null, G__9207, G__9208);
        }(), cljs$core$map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var cljs$core$map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      var s3 = cljs.core.seq(c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons(function() {
          var G__9209 = cljs.core.first(s1);
          var G__9210 = cljs.core.first(s2);
          var G__9211 = cljs.core.first(s3);
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9209, G__9210, G__9211) : f.call(null, G__9209, G__9210, G__9211);
        }(), cljs$core$map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var cljs$core$map__5 = function() {
    var G__9222__delegate = function(f, c1, c2, c3, colls) {
      var step = function cljs$core$map_$_step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = cljs$core$map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
          if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
            return cljs.core.cons(cljs$core$map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$map_$_step(cljs$core$map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return cljs$core$map.cljs$core$IFn$_invoke$arity$2(function(step) {
        return function(p1__9159_SHARP_) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__9159_SHARP_);
        };
      }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
    };
    var G__9222 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        var G__9223__i = 0, G__9223__a = new Array(arguments.length - 4);
        while (G__9223__i < G__9223__a.length) {
          G__9223__a[G__9223__i] = arguments[G__9223__i + 4];
          ++G__9223__i;
        }
        colls = new cljs.core.IndexedSeq(G__9223__a, 0);
      }
      return G__9222__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__9222.cljs$lang$maxFixedArity = 4;
    G__9222.cljs$lang$applyTo = function(arglist__9224) {
      var f = cljs.core.first(arglist__9224);
      arglist__9224 = cljs.core.next(arglist__9224);
      var c1 = cljs.core.first(arglist__9224);
      arglist__9224 = cljs.core.next(arglist__9224);
      var c2 = cljs.core.first(arglist__9224);
      arglist__9224 = cljs.core.next(arglist__9224);
      var c3 = cljs.core.first(arglist__9224);
      var colls = cljs.core.rest(arglist__9224);
      return G__9222__delegate(f, c1, c2, c3, colls);
    };
    G__9222.cljs$core$IFn$_invoke$arity$variadic = G__9222__delegate;
    return G__9222;
  }();
  cljs$core$map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$map__1.call(this, f);
      case 2:
        return cljs$core$map__2.call(this, f, c1);
      case 3:
        return cljs$core$map__3.call(this, f, c1, c2);
      case 4:
        return cljs$core$map__4.call(this, f, c1, c2, c3);
      default:
        var G__9225 = null;
        if (arguments.length > 4) {
          var G__9226__i = 0, G__9226__a = new Array(arguments.length - 4);
          while (G__9226__i < G__9226__a.length) {
            G__9226__a[G__9226__i] = arguments[G__9226__i + 4];
            ++G__9226__i;
          }
          G__9225 = new cljs.core.IndexedSeq(G__9226__a, 0);
        }
        return cljs$core$map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, G__9225);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$map.cljs$lang$maxFixedArity = 4;
  cljs$core$map.cljs$lang$applyTo = cljs$core$map__5.cljs$lang$applyTo;
  cljs$core$map.cljs$core$IFn$_invoke$arity$1 = cljs$core$map__1;
  cljs$core$map.cljs$core$IFn$_invoke$arity$2 = cljs$core$map__2;
  cljs$core$map.cljs$core$IFn$_invoke$arity$3 = cljs$core$map__3;
  cljs$core$map.cljs$core$IFn$_invoke$arity$4 = cljs$core$map__4;
  cljs$core$map.cljs$core$IFn$_invoke$arity$variadic = cljs$core$map__5.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$map;
}();
cljs.core.take = function() {
  var cljs$core$take = null;
  var cljs$core$take__1 = function(n) {
    return function(rf) {
      var na = cljs.core.volatile_BANG_(n);
      return function(na) {
        return function() {
          var G__9235 = null;
          var G__9235__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__9235__1 = function(result) {
            var G__9232 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9232) : rf.call(null, G__9232);
          };
          var G__9235__2 = function(result, input) {
            var n__$1 = cljs.core.deref(na);
            var nn = na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
            var result__$1 = n__$1 > 0 ? function() {
              var G__9233 = result;
              var G__9234 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9233, G__9234) : rf.call(null, G__9233, G__9234);
            }() : result;
            if (!(nn > 0)) {
              return cljs.core.ensure_reduced(result__$1);
            } else {
              return result__$1;
            }
          };
          G__9235 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__9235__0.call(this);
              case 1:
                return G__9235__1.call(this, result);
              case 2:
                return G__9235__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__9235.cljs$core$IFn$_invoke$arity$0 = G__9235__0;
          G__9235.cljs$core$IFn$_invoke$arity$1 = G__9235__1;
          G__9235.cljs$core$IFn$_invoke$arity$2 = G__9235__2;
          return G__9235;
        }();
      }(na);
    };
  };
  var cljs$core$take__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      if (n > 0) {
        var temp__4126__auto__ = cljs.core.seq(coll);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          return cljs.core.cons(cljs.core.first(s), cljs$core$take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$take = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$take__1.call(this, n);
      case 2:
        return cljs$core$take__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$take.cljs$core$IFn$_invoke$arity$1 = cljs$core$take__1;
  cljs$core$take.cljs$core$IFn$_invoke$arity$2 = cljs$core$take__2;
  return cljs$core$take;
}();
cljs.core.drop = function() {
  var cljs$core$drop = null;
  var cljs$core$drop__1 = function(n) {
    return function(rf) {
      var na = cljs.core.volatile_BANG_(n);
      return function(na) {
        return function() {
          var G__9242 = null;
          var G__9242__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__9242__1 = function(result) {
            var G__9239 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9239) : rf.call(null, G__9239);
          };
          var G__9242__2 = function(result, input) {
            var n__$1 = cljs.core.deref(na);
            na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
            if (n__$1 > 0) {
              return result;
            } else {
              var G__9240 = result;
              var G__9241 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9240, G__9241) : rf.call(null, G__9240, G__9241);
            }
          };
          G__9242 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__9242__0.call(this);
              case 1:
                return G__9242__1.call(this, result);
              case 2:
                return G__9242__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__9242.cljs$core$IFn$_invoke$arity$0 = G__9242__0;
          G__9242.cljs$core$IFn$_invoke$arity$1 = G__9242__1;
          G__9242.cljs$core$IFn$_invoke$arity$2 = G__9242__2;
          return G__9242;
        }();
      }(na);
    };
  };
  var cljs$core$drop__2 = function(n, coll) {
    var step = function(n__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq(coll__$1);
        if (n__$1 > 0 && s) {
          var G__9243 = n__$1 - 1;
          var G__9244 = cljs.core.rest(s);
          n__$1 = G__9243;
          coll__$1 = G__9244;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step(n, coll);
      };
    }(step), null, null);
  };
  cljs$core$drop = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$drop__1.call(this, n);
      case 2:
        return cljs$core$drop__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$drop.cljs$core$IFn$_invoke$arity$1 = cljs$core$drop__1;
  cljs$core$drop.cljs$core$IFn$_invoke$arity$2 = cljs$core$drop__2;
  return cljs$core$drop;
}();
cljs.core.drop_last = function() {
  var cljs$core$drop_last = null;
  var cljs$core$drop_last__1 = function(s) {
    return cljs$core$drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
  };
  var cljs$core$drop_last__2 = function(n, s) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
      return x;
    }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
  };
  cljs$core$drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return cljs$core$drop_last__1.call(this, n);
      case 2:
        return cljs$core$drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$drop_last.cljs$core$IFn$_invoke$arity$1 = cljs$core$drop_last__1;
  cljs$core$drop_last.cljs$core$IFn$_invoke$arity$2 = cljs$core$drop_last__2;
  return cljs$core$drop_last;
}();
cljs.core.take_last = function cljs$core$take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__9247 = cljs.core.next(s);
      var G__9248 = cljs.core.next(lead);
      s = G__9247;
      lead = G__9248;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function() {
  var cljs$core$drop_while = null;
  var cljs$core$drop_while__1 = function(pred) {
    return function(rf) {
      var da = cljs.core.volatile_BANG_(true);
      return function(da) {
        return function() {
          var G__9261 = null;
          var G__9261__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__9261__1 = function(result) {
            var G__9255 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9255) : rf.call(null, G__9255);
          };
          var G__9261__2 = function(result, input) {
            var drop_QMARK_ = cljs.core.deref(da);
            if (cljs.core.truth_(function() {
              var and__4110__auto__ = drop_QMARK_;
              if (cljs.core.truth_(and__4110__auto__)) {
                var G__9256 = input;
                return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9256) : pred.call(null, G__9256);
              } else {
                return and__4110__auto__;
              }
            }())) {
              return result;
            } else {
              cljs.core.vreset_BANG_(da, null);
              var G__9257 = result;
              var G__9258 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9257, G__9258) : rf.call(null, G__9257, G__9258);
            }
          };
          G__9261 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__9261__0.call(this);
              case 1:
                return G__9261__1.call(this, result);
              case 2:
                return G__9261__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__9261.cljs$core$IFn$_invoke$arity$0 = G__9261__0;
          G__9261.cljs$core$IFn$_invoke$arity$1 = G__9261__1;
          G__9261.cljs$core$IFn$_invoke$arity$2 = G__9261__2;
          return G__9261;
        }();
      }(da);
    };
  };
  var cljs$core$drop_while__2 = function(pred, coll) {
    var step = function(pred__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq(coll__$1);
        if (cljs.core.truth_(function() {
          var and__4110__auto__ = s;
          if (and__4110__auto__) {
            var G__9260 = cljs.core.first(s);
            return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__9260) : pred__$1.call(null, G__9260);
          } else {
            return and__4110__auto__;
          }
        }())) {
          var G__9262 = pred__$1;
          var G__9263 = cljs.core.rest(s);
          pred__$1 = G__9262;
          coll__$1 = G__9263;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step(pred, coll);
      };
    }(step), null, null);
  };
  cljs$core$drop_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$drop_while__1.call(this, pred);
      case 2:
        return cljs$core$drop_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$drop_while.cljs$core$IFn$_invoke$arity$1 = cljs$core$drop_while__1;
  cljs$core$drop_while.cljs$core$IFn$_invoke$arity$2 = cljs$core$drop_while__2;
  return cljs$core$drop_while;
}();
cljs.core.cycle = function cljs$core$cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cljs$core$cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function cljs$core$split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function() {
  var cljs$core$repeat = null;
  var cljs$core$repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(x, cljs$core$repeat.cljs$core$IFn$_invoke$arity$1(x));
    }, null, null);
  };
  var cljs$core$repeat__2 = function(n, x) {
    return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs$core$repeat.cljs$core$IFn$_invoke$arity$1(x));
  };
  cljs$core$repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return cljs$core$repeat__1.call(this, n);
      case 2:
        return cljs$core$repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$repeat.cljs$core$IFn$_invoke$arity$1 = cljs$core$repeat__1;
  cljs$core$repeat.cljs$core$IFn$_invoke$arity$2 = cljs$core$repeat__2;
  return cljs$core$repeat;
}();
cljs.core.replicate = function cljs$core$replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function() {
  var cljs$core$repeatedly = null;
  var cljs$core$repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), cljs$core$repeatedly.cljs$core$IFn$_invoke$arity$1(f));
    }, null, null);
  };
  var cljs$core$repeatedly__2 = function(n, f) {
    return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs$core$repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  };
  cljs$core$repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return cljs$core$repeatedly__1.call(this, n);
      case 2:
        return cljs$core$repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$repeatedly.cljs$core$IFn$_invoke$arity$1 = cljs$core$repeatedly__1;
  cljs$core$repeatedly.cljs$core$IFn$_invoke$arity$2 = cljs$core$repeatedly__2;
  return cljs$core$repeatedly;
}();
cljs.core.iterate = function cljs$core$iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return cljs$core$iterate(f, function() {
      var G__9272 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9272) : f.call(null, G__9272);
    }());
  }, null, null));
};
cljs.core.interleave = function() {
  var cljs$core$interleave = null;
  var cljs$core$interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      if (s1 && s2) {
        return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs$core$interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var cljs$core$interleave__3 = function() {
    var G__9275__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
        if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
          return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs$core$interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__9275 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        var G__9276__i = 0, G__9276__a = new Array(arguments.length - 2);
        while (G__9276__i < G__9276__a.length) {
          G__9276__a[G__9276__i] = arguments[G__9276__i + 2];
          ++G__9276__i;
        }
        colls = new cljs.core.IndexedSeq(G__9276__a, 0);
      }
      return G__9275__delegate.call(this, c1, c2, colls);
    };
    G__9275.cljs$lang$maxFixedArity = 2;
    G__9275.cljs$lang$applyTo = function(arglist__9277) {
      var c1 = cljs.core.first(arglist__9277);
      arglist__9277 = cljs.core.next(arglist__9277);
      var c2 = cljs.core.first(arglist__9277);
      var colls = cljs.core.rest(arglist__9277);
      return G__9275__delegate(c1, c2, colls);
    };
    G__9275.cljs$core$IFn$_invoke$arity$variadic = G__9275__delegate;
    return G__9275;
  }();
  cljs$core$interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$interleave__2.call(this, c1, c2);
      default:
        var G__9278 = null;
        if (arguments.length > 2) {
          var G__9279__i = 0, G__9279__a = new Array(arguments.length - 2);
          while (G__9279__i < G__9279__a.length) {
            G__9279__a[G__9279__i] = arguments[G__9279__i + 2];
            ++G__9279__i;
          }
          G__9278 = new cljs.core.IndexedSeq(G__9279__a, 0);
        }
        return cljs$core$interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, G__9278);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$interleave.cljs$lang$maxFixedArity = 2;
  cljs$core$interleave.cljs$lang$applyTo = cljs$core$interleave__3.cljs$lang$applyTo;
  cljs$core$interleave.cljs$core$IFn$_invoke$arity$2 = cljs$core$interleave__2;
  cljs$core$interleave.cljs$core$IFn$_invoke$arity$variadic = cljs$core$interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$interleave;
}();
cljs.core.interpose = function() {
  var cljs$core$interpose = null;
  var cljs$core$interpose__1 = function(sep) {
    return function(rf) {
      var started = cljs.core.volatile_BANG_(false);
      return function(started) {
        return function() {
          var G__9294 = null;
          var G__9294__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__9294__1 = function(result) {
            var G__9287 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9287) : rf.call(null, G__9287);
          };
          var G__9294__2 = function(result, input) {
            if (cljs.core.truth_(cljs.core.deref(started))) {
              var sepr = function() {
                var G__9288 = result;
                var G__9289 = sep;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9288, G__9289) : rf.call(null, G__9288, G__9289);
              }();
              if (cljs.core.reduced_QMARK_(sepr)) {
                return sepr;
              } else {
                var G__9290 = sepr;
                var G__9291 = input;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9290, G__9291) : rf.call(null, G__9290, G__9291);
              }
            } else {
              cljs.core.vreset_BANG_(started, true);
              var G__9292 = result;
              var G__9293 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9292, G__9293) : rf.call(null, G__9292, G__9293);
            }
          };
          G__9294 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__9294__0.call(this);
              case 1:
                return G__9294__1.call(this, result);
              case 2:
                return G__9294__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__9294.cljs$core$IFn$_invoke$arity$0 = G__9294__0;
          G__9294.cljs$core$IFn$_invoke$arity$1 = G__9294__1;
          G__9294.cljs$core$IFn$_invoke$arity$2 = G__9294__2;
          return G__9294;
        }();
      }(started);
    };
  };
  var cljs$core$interpose__2 = function(sep, coll) {
    return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
  };
  cljs$core$interpose = function(sep, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$interpose__1.call(this, sep);
      case 2:
        return cljs$core$interpose__2.call(this, sep, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$interpose.cljs$core$IFn$_invoke$arity$1 = cljs$core$interpose__1;
  cljs$core$interpose.cljs$core$IFn$_invoke$arity$2 = cljs$core$interpose__2;
  return cljs$core$interpose;
}();
cljs.core.flatten1 = function cljs$core$flatten1(colls) {
  var cat = function cljs$core$flatten1_$_cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function() {
  var cljs$core$mapcat = null;
  var cljs$core$mapcat__1 = function(f) {
    return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
  };
  var cljs$core$mapcat__2 = function() {
    var G__9303__delegate = function(f, colls) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
    };
    var G__9303 = function(f, var_args) {
      var colls = null;
      if (arguments.length > 1) {
        var G__9304__i = 0, G__9304__a = new Array(arguments.length - 1);
        while (G__9304__i < G__9304__a.length) {
          G__9304__a[G__9304__i] = arguments[G__9304__i + 1];
          ++G__9304__i;
        }
        colls = new cljs.core.IndexedSeq(G__9304__a, 0);
      }
      return G__9303__delegate.call(this, f, colls);
    };
    G__9303.cljs$lang$maxFixedArity = 1;
    G__9303.cljs$lang$applyTo = function(arglist__9305) {
      var f = cljs.core.first(arglist__9305);
      var colls = cljs.core.rest(arglist__9305);
      return G__9303__delegate(f, colls);
    };
    G__9303.cljs$core$IFn$_invoke$arity$variadic = G__9303__delegate;
    return G__9303;
  }();
  cljs$core$mapcat = function(f, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$mapcat__1.call(this, f);
      default:
        var G__9306 = null;
        if (arguments.length > 1) {
          var G__9307__i = 0, G__9307__a = new Array(arguments.length - 1);
          while (G__9307__i < G__9307__a.length) {
            G__9307__a[G__9307__i] = arguments[G__9307__i + 1];
            ++G__9307__i;
          }
          G__9306 = new cljs.core.IndexedSeq(G__9307__a, 0);
        }
        return cljs$core$mapcat__2.cljs$core$IFn$_invoke$arity$variadic(f, G__9306);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$mapcat.cljs$lang$maxFixedArity = 1;
  cljs$core$mapcat.cljs$lang$applyTo = cljs$core$mapcat__2.cljs$lang$applyTo;
  cljs$core$mapcat.cljs$core$IFn$_invoke$arity$1 = cljs$core$mapcat__1;
  cljs$core$mapcat.cljs$core$IFn$_invoke$arity$variadic = cljs$core$mapcat__2.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$mapcat;
}();
cljs.core.filter = function() {
  var cljs$core$filter = null;
  var cljs$core$filter__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__9326 = null;
        var G__9326__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9326__1 = function(result) {
          var G__9320 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9320) : rf.call(null, G__9320);
        };
        var G__9326__2 = function(result, input) {
          if (cljs.core.truth_(function() {
            var G__9321 = input;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9321) : pred.call(null, G__9321);
          }())) {
            var G__9322 = result;
            var G__9323 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9322, G__9323) : rf.call(null, G__9322, G__9323);
          } else {
            return result;
          }
        };
        G__9326 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9326__0.call(this);
            case 1:
              return G__9326__1.call(this, result);
            case 2:
              return G__9326__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9326.cljs$core$IFn$_invoke$arity$0 = G__9326__0;
        G__9326.cljs$core$IFn$_invoke$arity$1 = G__9326__1;
        G__9326.cljs$core$IFn$_invoke$arity$2 = G__9326__2;
        return G__9326;
      }();
    };
  };
  var cljs$core$filter__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5007__auto___9327 = size;
          var i_9328 = 0;
          while (true) {
            if (i_9328 < n__5007__auto___9327) {
              if (cljs.core.truth_(function() {
                var G__9324 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9328);
                return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9324) : pred.call(null, G__9324);
              }())) {
                cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9328));
              } else {
              }
              var G__9329 = i_9328 + 1;
              i_9328 = G__9329;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
        } else {
          var f = cljs.core.first(s);
          var r = cljs.core.rest(s);
          if (cljs.core.truth_(function() {
            var G__9325 = f;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9325) : pred.call(null, G__9325);
          }())) {
            return cljs.core.cons(f, cljs$core$filter.cljs$core$IFn$_invoke$arity$2(pred, r));
          } else {
            return cljs$core$filter.cljs$core$IFn$_invoke$arity$2(pred, r);
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$filter = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$filter__1.call(this, pred);
      case 2:
        return cljs$core$filter__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$filter.cljs$core$IFn$_invoke$arity$1 = cljs$core$filter__1;
  cljs$core$filter.cljs$core$IFn$_invoke$arity$2 = cljs$core$filter__2;
  return cljs$core$filter;
}();
cljs.core.remove = function() {
  var cljs$core$remove = null;
  var cljs$core$remove__1 = function(pred) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
  };
  var cljs$core$remove__2 = function(pred, coll) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
  };
  cljs$core$remove = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$remove__1.call(this, pred);
      case 2:
        return cljs$core$remove__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$remove.cljs$core$IFn$_invoke$arity$1 = cljs$core$remove__1;
  cljs$core$remove.cljs$core$IFn$_invoke$arity$2 = cljs$core$remove__2;
  return cljs$core$remove;
}();
cljs.core.tree_seq = function cljs$core$tree_seq(branch_QMARK_, children, root) {
  var walk = function cljs$core$tree_seq_$_walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(function() {
        var G__9336 = node;
        return branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(G__9336) : branch_QMARK_.call(null, G__9336);
      }()) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.array_seq([function() {
        var G__9337 = node;
        return children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(G__9337) : children.call(null, G__9337);
      }()], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function cljs$core$flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__9338_SHARP_) {
    return!cljs.core.sequential_QMARK_(p1__9338_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function() {
  var cljs$core$into = null;
  var cljs$core$into__2 = function(to, from) {
    if (!(to == null)) {
      if (function() {
        var G__9341 = to;
        if (G__9341) {
          var bit__4789__auto__ = G__9341.cljs$lang$protocol_mask$partition1$ & 4;
          if (bit__4789__auto__ || G__9341.cljs$core$IEditableCollection$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
      } else {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
      }
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
    }
  };
  var cljs$core$into__3 = function(to, xform, from) {
    if (function() {
      var G__9342 = to;
      if (G__9342) {
        var bit__4789__auto__ = G__9342.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4789__auto__ || G__9342.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
    }
  };
  cljs$core$into = function(to, xform, from) {
    switch(arguments.length) {
      case 2:
        return cljs$core$into__2.call(this, to, xform);
      case 3:
        return cljs$core$into__3.call(this, to, xform, from);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$into.cljs$core$IFn$_invoke$arity$2 = cljs$core$into__2;
  cljs$core$into.cljs$core$IFn$_invoke$arity$3 = cljs$core$into__3;
  return cljs$core$into;
}();
cljs.core.mapv = function() {
  var cljs$core$mapv = null;
  var cljs$core$mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, function() {
        var G__9344 = o;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9344) : f.call(null, G__9344);
      }());
    }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
  };
  var cljs$core$mapv__3 = function(f, c1, c2) {
    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
  };
  var cljs$core$mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
  };
  var cljs$core$mapv__5 = function() {
    var G__9345__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
    };
    var G__9345 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        var G__9346__i = 0, G__9346__a = new Array(arguments.length - 4);
        while (G__9346__i < G__9346__a.length) {
          G__9346__a[G__9346__i] = arguments[G__9346__i + 4];
          ++G__9346__i;
        }
        colls = new cljs.core.IndexedSeq(G__9346__a, 0);
      }
      return G__9345__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__9345.cljs$lang$maxFixedArity = 4;
    G__9345.cljs$lang$applyTo = function(arglist__9347) {
      var f = cljs.core.first(arglist__9347);
      arglist__9347 = cljs.core.next(arglist__9347);
      var c1 = cljs.core.first(arglist__9347);
      arglist__9347 = cljs.core.next(arglist__9347);
      var c2 = cljs.core.first(arglist__9347);
      arglist__9347 = cljs.core.next(arglist__9347);
      var c3 = cljs.core.first(arglist__9347);
      var colls = cljs.core.rest(arglist__9347);
      return G__9345__delegate(f, c1, c2, c3, colls);
    };
    G__9345.cljs$core$IFn$_invoke$arity$variadic = G__9345__delegate;
    return G__9345;
  }();
  cljs$core$mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$mapv__2.call(this, f, c1);
      case 3:
        return cljs$core$mapv__3.call(this, f, c1, c2);
      case 4:
        return cljs$core$mapv__4.call(this, f, c1, c2, c3);
      default:
        var G__9348 = null;
        if (arguments.length > 4) {
          var G__9349__i = 0, G__9349__a = new Array(arguments.length - 4);
          while (G__9349__i < G__9349__a.length) {
            G__9349__a[G__9349__i] = arguments[G__9349__i + 4];
            ++G__9349__i;
          }
          G__9348 = new cljs.core.IndexedSeq(G__9349__a, 0);
        }
        return cljs$core$mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, G__9348);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$mapv.cljs$lang$maxFixedArity = 4;
  cljs$core$mapv.cljs$lang$applyTo = cljs$core$mapv__5.cljs$lang$applyTo;
  cljs$core$mapv.cljs$core$IFn$_invoke$arity$2 = cljs$core$mapv__2;
  cljs$core$mapv.cljs$core$IFn$_invoke$arity$3 = cljs$core$mapv__3;
  cljs$core$mapv.cljs$core$IFn$_invoke$arity$4 = cljs$core$mapv__4;
  cljs$core$mapv.cljs$core$IFn$_invoke$arity$variadic = cljs$core$mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$mapv;
}();
cljs.core.filterv = function cljs$core$filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(function() {
      var G__9351 = o;
      return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9351) : pred.call(null, G__9351);
    }())) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var cljs$core$partition = null;
  var cljs$core$partition__2 = function(n, coll) {
    return cljs$core$partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
  };
  var cljs$core$partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
        if (n === cljs.core.count(p)) {
          return cljs.core.cons(p, cljs$core$partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var cljs$core$partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
        if (n === cljs.core.count(p)) {
          return cljs.core.cons(p, cljs$core$partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
        } else {
          return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return cljs$core$partition__2.call(this, n, step);
      case 3:
        return cljs$core$partition__3.call(this, n, step, pad);
      case 4:
        return cljs$core$partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$partition.cljs$core$IFn$_invoke$arity$2 = cljs$core$partition__2;
  cljs$core$partition.cljs$core$IFn$_invoke$arity$3 = cljs$core$partition__3;
  cljs$core$partition.cljs$core$IFn$_invoke$arity$4 = cljs$core$partition__4;
  return cljs$core$partition;
}();
cljs.core.get_in = function() {
  var cljs$core$get_in = null;
  var cljs$core$get_in__2 = function(m, ks) {
    return cljs$core$get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
  };
  var cljs$core$get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq(ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__9366 = m__$1;
          if (G__9366) {
            var bit__4796__auto__ = G__9366.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4796__auto__ || G__9366.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__9366.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__9366);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__9366);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__9367 = sentinel;
            var G__9368 = m__$2;
            var G__9369 = cljs.core.next(ks__$1);
            sentinel = G__9367;
            m__$1 = G__9368;
            ks__$1 = G__9369;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  cljs$core$get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$get_in__2.call(this, m, ks);
      case 3:
        return cljs$core$get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$get_in.cljs$core$IFn$_invoke$arity$2 = cljs$core$get_in__2;
  cljs$core$get_in.cljs$core$IFn$_invoke$arity$3 = cljs$core$get_in__3;
  return cljs$core$get_in;
}();
cljs.core.assoc_in = function cljs$core$assoc_in(m, p__9370, v) {
  var vec__9375 = p__9370;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9375, 0, null);
  var ks = cljs.core.nthnext(vec__9375, 1);
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function() {
  var cljs$core$update_in = null;
  var cljs$core$update_in__3 = function(m, p__9376, f) {
    var vec__9414 = p__9376;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9414, 0, null);
    var ks = cljs.core.nthnext(vec__9414, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__9415 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9415) : f.call(null, G__9415);
      }());
    }
  };
  var cljs$core$update_in__4 = function(m, p__9377, f, a) {
    var vec__9416 = p__9377;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9416, 0, null);
    var ks = cljs.core.nthnext(vec__9416, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__9417 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__9418 = a;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9417, G__9418) : f.call(null, G__9417, G__9418);
      }());
    }
  };
  var cljs$core$update_in__5 = function(m, p__9378, f, a, b) {
    var vec__9419 = p__9378;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9419, 0, null);
    var ks = cljs.core.nthnext(vec__9419, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__9420 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__9421 = a;
        var G__9422 = b;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9420, G__9421, G__9422) : f.call(null, G__9420, G__9421, G__9422);
      }());
    }
  };
  var cljs$core$update_in__6 = function(m, p__9379, f, a, b, c) {
    var vec__9423 = p__9379;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9423, 0, null);
    var ks = cljs.core.nthnext(vec__9423, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__9424 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__9425 = a;
        var G__9426 = b;
        var G__9427 = c;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__9424, G__9425, G__9426, G__9427) : f.call(null, G__9424, G__9425, G__9426, G__9427);
      }());
    }
  };
  var cljs$core$update_in__7 = function() {
    var G__9429__delegate = function(m, p__9380, f, a, b, c, args) {
      var vec__9428 = p__9380;
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9428, 0, null);
      var ks = cljs.core.nthnext(vec__9428, 1);
      if (ks) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs$core$update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
      }
    };
    var G__9429 = function(m, p__9380, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        var G__9430__i = 0, G__9430__a = new Array(arguments.length - 6);
        while (G__9430__i < G__9430__a.length) {
          G__9430__a[G__9430__i] = arguments[G__9430__i + 6];
          ++G__9430__i;
        }
        args = new cljs.core.IndexedSeq(G__9430__a, 0);
      }
      return G__9429__delegate.call(this, m, p__9380, f, a, b, c, args);
    };
    G__9429.cljs$lang$maxFixedArity = 6;
    G__9429.cljs$lang$applyTo = function(arglist__9431) {
      var m = cljs.core.first(arglist__9431);
      arglist__9431 = cljs.core.next(arglist__9431);
      var p__9380 = cljs.core.first(arglist__9431);
      arglist__9431 = cljs.core.next(arglist__9431);
      var f = cljs.core.first(arglist__9431);
      arglist__9431 = cljs.core.next(arglist__9431);
      var a = cljs.core.first(arglist__9431);
      arglist__9431 = cljs.core.next(arglist__9431);
      var b = cljs.core.first(arglist__9431);
      arglist__9431 = cljs.core.next(arglist__9431);
      var c = cljs.core.first(arglist__9431);
      var args = cljs.core.rest(arglist__9431);
      return G__9429__delegate(m, p__9380, f, a, b, c, args);
    };
    G__9429.cljs$core$IFn$_invoke$arity$variadic = G__9429__delegate;
    return G__9429;
  }();
  cljs$core$update_in = function(m, p__9380, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return cljs$core$update_in__3.call(this, m, p__9380, f);
      case 4:
        return cljs$core$update_in__4.call(this, m, p__9380, f, a);
      case 5:
        return cljs$core$update_in__5.call(this, m, p__9380, f, a, b);
      case 6:
        return cljs$core$update_in__6.call(this, m, p__9380, f, a, b, c);
      default:
        var G__9432 = null;
        if (arguments.length > 6) {
          var G__9433__i = 0, G__9433__a = new Array(arguments.length - 6);
          while (G__9433__i < G__9433__a.length) {
            G__9433__a[G__9433__i] = arguments[G__9433__i + 6];
            ++G__9433__i;
          }
          G__9432 = new cljs.core.IndexedSeq(G__9433__a, 0);
        }
        return cljs$core$update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__9380, f, a, b, c, G__9432);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$update_in.cljs$lang$maxFixedArity = 6;
  cljs$core$update_in.cljs$lang$applyTo = cljs$core$update_in__7.cljs$lang$applyTo;
  cljs$core$update_in.cljs$core$IFn$_invoke$arity$3 = cljs$core$update_in__3;
  cljs$core$update_in.cljs$core$IFn$_invoke$arity$4 = cljs$core$update_in__4;
  cljs$core$update_in.cljs$core$IFn$_invoke$arity$5 = cljs$core$update_in__5;
  cljs$core$update_in.cljs$core$IFn$_invoke$arity$6 = cljs$core$update_in__6;
  cljs$core$update_in.cljs$core$IFn$_invoke$arity$variadic = cljs$core$update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$update_in;
}();
cljs.core.update = function() {
  var cljs$core$update = null;
  var cljs$core$update__3 = function(m, k, f) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9444 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9444) : f.call(null, G__9444);
    }());
  };
  var cljs$core$update__4 = function(m, k, f, x) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9445 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__9446 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9445, G__9446) : f.call(null, G__9445, G__9446);
    }());
  };
  var cljs$core$update__5 = function(m, k, f, x, y) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9447 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__9448 = x;
      var G__9449 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9447, G__9448, G__9449) : f.call(null, G__9447, G__9448, G__9449);
    }());
  };
  var cljs$core$update__6 = function(m, k, f, x, y, z) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9450 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__9451 = x;
      var G__9452 = y;
      var G__9453 = z;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__9450, G__9451, G__9452, G__9453) : f.call(null, G__9450, G__9451, G__9452, G__9453);
    }());
  };
  var cljs$core$update__7 = function() {
    var G__9454__delegate = function(m, k, f, x, y, z, more) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
    };
    var G__9454 = function(m, k, f, x, y, z, var_args) {
      var more = null;
      if (arguments.length > 6) {
        var G__9455__i = 0, G__9455__a = new Array(arguments.length - 6);
        while (G__9455__i < G__9455__a.length) {
          G__9455__a[G__9455__i] = arguments[G__9455__i + 6];
          ++G__9455__i;
        }
        more = new cljs.core.IndexedSeq(G__9455__a, 0);
      }
      return G__9454__delegate.call(this, m, k, f, x, y, z, more);
    };
    G__9454.cljs$lang$maxFixedArity = 6;
    G__9454.cljs$lang$applyTo = function(arglist__9456) {
      var m = cljs.core.first(arglist__9456);
      arglist__9456 = cljs.core.next(arglist__9456);
      var k = cljs.core.first(arglist__9456);
      arglist__9456 = cljs.core.next(arglist__9456);
      var f = cljs.core.first(arglist__9456);
      arglist__9456 = cljs.core.next(arglist__9456);
      var x = cljs.core.first(arglist__9456);
      arglist__9456 = cljs.core.next(arglist__9456);
      var y = cljs.core.first(arglist__9456);
      arglist__9456 = cljs.core.next(arglist__9456);
      var z = cljs.core.first(arglist__9456);
      var more = cljs.core.rest(arglist__9456);
      return G__9454__delegate(m, k, f, x, y, z, more);
    };
    G__9454.cljs$core$IFn$_invoke$arity$variadic = G__9454__delegate;
    return G__9454;
  }();
  cljs$core$update = function(m, k, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return cljs$core$update__3.call(this, m, k, f);
      case 4:
        return cljs$core$update__4.call(this, m, k, f, x);
      case 5:
        return cljs$core$update__5.call(this, m, k, f, x, y);
      case 6:
        return cljs$core$update__6.call(this, m, k, f, x, y, z);
      default:
        var G__9457 = null;
        if (arguments.length > 6) {
          var G__9458__i = 0, G__9458__a = new Array(arguments.length - 6);
          while (G__9458__i < G__9458__a.length) {
            G__9458__a[G__9458__i] = arguments[G__9458__i + 6];
            ++G__9458__i;
          }
          G__9457 = new cljs.core.IndexedSeq(G__9458__a, 0);
        }
        return cljs$core$update__7.cljs$core$IFn$_invoke$arity$variadic(m, k, f, x, y, z, G__9457);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$update.cljs$lang$maxFixedArity = 6;
  cljs$core$update.cljs$lang$applyTo = cljs$core$update__7.cljs$lang$applyTo;
  cljs$core$update.cljs$core$IFn$_invoke$arity$3 = cljs$core$update__3;
  cljs$core$update.cljs$core$IFn$_invoke$arity$4 = cljs$core$update__4;
  cljs$core$update.cljs$core$IFn$_invoke$arity$5 = cljs$core$update__5;
  cljs$core$update.cljs$core$IFn$_invoke$arity$6 = cljs$core$update__6;
  cljs$core$update.cljs$core$IFn$_invoke$arity$variadic = cljs$core$update__7.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$update;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function cljs$core$__GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function cljs$core$pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function cljs$core$pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function cljs$core$pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function cljs$core$pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function cljs$core$tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function cljs$core$new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__9459 = ll - 5;
      var G__9460 = r;
      ll = G__9459;
      ret = G__9460;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function cljs$core$push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = cljs$core$push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function cljs$core$vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function cljs$core$first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__9465 = cljs.core.pv_aget(node, 0);
      var G__9466 = level - 5;
      node = G__9465;
      level = G__9466;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function cljs$core$unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__9467 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__9468 = level - 5;
        node = G__9467;
        level = G__9468;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function cljs$core$array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function cljs$core$do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, cljs$core$do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function cljs$core$pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function cljs$core$__GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function cljs$core$ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__9478 = init__$2;
              var G__9479 = j + i;
              var G__9480 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9478, G__9479, G__9480) : f.call(null, G__9478, G__9479, G__9480);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__9491 = j + 1;
              var G__9492 = init__$3;
              j = G__9491;
              init__$2 = G__9492;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9481 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9481) : cljs.core.deref.call(null, G__9481);
      } else {
        var G__9493 = i + len;
        var G__9494 = init__$2;
        i = G__9493;
        init__$1 = G__9494;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, function() {
    var G__9482 = self__.root;
    return cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(G__9482) : cljs.core.tv_editable_root.call(null, G__9482);
  }(), function() {
    var G__9483 = self__.tail;
    return cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(G__9483) : cljs.core.tv_editable_tail.call(null, G__9483);
  }());
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__9484 = init__$2;
              var G__9485 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9484, G__9485) : f.call(null, G__9484, G__9485);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__9495 = j + 1;
              var G__9496 = init__$3;
              j = G__9495;
              init__$2 = G__9496;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9486 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9486) : cljs.core.deref.call(null, G__9486);
      } else {
        var G__9497 = i + len;
        var G__9498 = init__$2;
        i = G__9497;
        init__$1 = G__9498;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__9487 = coll__$1;
      var G__9488 = cljs.core.first_array_for_longvec(coll__$1);
      var G__9489 = 0;
      var G__9490 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9487, G__9488, G__9489, G__9490) : cljs.core.chunked_seq.call(null, G__9487, G__9488, G__9489, G__9490);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__5007__auto___9499 = len;
    var i_9500 = 0;
    while (true) {
      if (i_9500 < n__5007__auto___9499) {
        new_tail[i_9500] = self__.tail[i_9500];
        var G__9501 = i_9500 + 1;
        i_9500 = G__9501;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__9502 = null;
  var G__9502__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__9502__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__9502 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9502__2.call(this, self__, k);
      case 3:
        return G__9502__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9502.cljs$core$IFn$_invoke$arity$2 = G__9502__2;
  G__9502.cljs$core$IFn$_invoke$arity$3 = G__9502__3;
  return G__9502;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args9477) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9477)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function cljs$core$__GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__9503 = i + 1;
        var G__9504 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__9503;
        out = G__9504;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.vec = function cljs$core$vec(coll) {
  if (cljs.core.array_QMARK_(coll)) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function() {
  var cljs$core$vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray(args.arr, true);
    } else {
      return cljs.core.vec(args);
    }
  };
  var cljs$core$vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      var G__9505__i = 0, G__9505__a = new Array(arguments.length - 0);
      while (G__9505__i < G__9505__a.length) {
        G__9505__a[G__9505__i] = arguments[G__9505__i + 0];
        ++G__9505__i;
      }
      args = new cljs.core.IndexedSeq(G__9505__a, 0);
    }
    return cljs$core$vector__delegate.call(this, args);
  };
  cljs$core$vector.cljs$lang$maxFixedArity = 0;
  cljs$core$vector.cljs$lang$applyTo = function(arglist__9506) {
    var args = cljs.core.seq(arglist__9506);
    return cljs$core$vector__delegate(args);
  };
  cljs$core$vector.cljs$core$IFn$_invoke$arity$variadic = cljs$core$vector__delegate;
  return cljs$core$vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__9507 = self__.vec;
      var G__9508 = self__.node;
      var G__9509 = self__.i;
      var G__9510 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9507, G__9508, G__9509, G__9510) : cljs.core.chunked_seq.call(null, G__9507, G__9508, G__9509, G__9510);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__9511 = self__.vec;
    var G__9512 = self__.i + self__.off;
    var G__9513 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__9511, G__9512, G__9513) : cljs.core.subvec.call(null, G__9511, G__9512, G__9513);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__9514 = self__.vec;
    var G__9515 = self__.i + self__.off;
    var G__9516 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__9514, G__9515, G__9516) : cljs.core.subvec.call(null, G__9514, G__9515, G__9516);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__9517 = self__.vec;
      var G__9518 = self__.node;
      var G__9519 = self__.i;
      var G__9520 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9517, G__9518, G__9519, G__9520) : cljs.core.chunked_seq.call(null, G__9517, G__9518, G__9519, G__9520);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__9521 = self__.vec;
    var G__9522 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__9523 = end;
    var G__9524 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9521, G__9522, G__9523, G__9524) : cljs.core.chunked_seq.call(null, G__9521, G__9522, G__9523, G__9524);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  var G__9525 = self__.vec;
  var G__9526 = self__.node;
  var G__9527 = self__.i;
  var G__9528 = self__.off;
  var G__9529 = m;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(G__9525, G__9526, G__9527, G__9528, G__9529) : cljs.core.chunked_seq.call(null, G__9525, G__9526, G__9527, G__9528, G__9529);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__9530 = self__.vec;
    var G__9531 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__9532 = end;
    var G__9533 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9530, G__9531, G__9532, G__9533) : cljs.core.chunked_seq.call(null, G__9530, G__9531, G__9532, G__9533);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function cljs$core$__GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.chunked_seq = function() {
  var cljs$core$chunked_seq = null;
  var cljs$core$chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
  };
  var cljs$core$chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var cljs$core$chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  cljs$core$chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return cljs$core$chunked_seq__3.call(this, vec, node, i);
      case 4:
        return cljs$core$chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return cljs$core$chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$chunked_seq.cljs$core$IFn$_invoke$arity$3 = cljs$core$chunked_seq__3;
  cljs$core$chunked_seq.cljs$core$IFn$_invoke$arity$4 = cljs$core$chunked_seq__4;
  cljs$core$chunked_seq.cljs$core$IFn$_invoke$arity$5 = cljs$core$chunked_seq__5;
  return cljs$core$chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var i = self__.start;
  var j = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.end) {
      var init__$2 = function() {
        var G__9535 = init__$1;
        var G__9536 = j;
        var G__9537 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9535, G__9536, G__9537) : f.call(null, G__9535, G__9536, G__9537);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9538 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9538) : cljs.core.deref.call(null, G__9538);
      } else {
        var G__9560 = i + 1;
        var G__9561 = j + 1;
        var G__9562 = init__$2;
        i = G__9560;
        j = G__9561;
        init__$1 = G__9562;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__9539 = self__.meta;
  var G__9540 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__9541 = self__.start;
  var G__9542 = function() {
    var x__4434__auto__ = self__.end;
    var y__4435__auto__ = v_pos + 1;
    return x__4434__auto__ > y__4435__auto__ ? x__4434__auto__ : y__4435__auto__;
  }();
  var G__9543 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__9539, G__9540, G__9541, G__9542, G__9543) : cljs.core.build_subvec.call(null, G__9539, G__9540, G__9541, G__9542, G__9543);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__9544 = self__.meta;
    var G__9545 = self__.v;
    var G__9546 = self__.start;
    var G__9547 = self__.end - 1;
    var G__9548 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__9544, G__9545, G__9546, G__9547, G__9548) : cljs.core.build_subvec.call(null, G__9544, G__9545, G__9546, G__9547, G__9548);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function cljs$core$subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return cljs$core$subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  var G__9550 = meta__$1;
  var G__9551 = self__.v;
  var G__9552 = self__.start;
  var G__9553 = self__.end;
  var G__9554 = self__.__hash;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__9550, G__9551, G__9552, G__9553, G__9554) : cljs.core.build_subvec.call(null, G__9550, G__9551, G__9552, G__9553, G__9554);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__9555 = self__.meta;
  var G__9556 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__9557 = self__.start;
  var G__9558 = self__.end + 1;
  var G__9559 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__9555, G__9556, G__9557, G__9558, G__9559) : cljs.core.build_subvec.call(null, G__9555, G__9556, G__9557, G__9558, G__9559);
};
cljs.core.Subvec.prototype.call = function() {
  var G__9563 = null;
  var G__9563__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__9563__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__9563 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9563__2.call(this, self__, k);
      case 3:
        return G__9563__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9563.cljs$core$IFn$_invoke$arity$2 = G__9563__2;
  G__9563.cljs$core$IFn$_invoke$arity$3 = G__9563__3;
  return G__9563;
}();
cljs.core.Subvec.prototype.apply = function(self__, args9534) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9534)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function cljs$core$__GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.build_subvec = function cljs$core$build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__9564 = meta;
      var G__9565 = v.v;
      var G__9566 = v.start + start;
      var G__9567 = v.start + end;
      var G__9568 = __hash;
      meta = G__9564;
      v = G__9565;
      start = G__9566;
      end = G__9567;
      __hash = G__9568;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var cljs$core$subvec = null;
  var cljs$core$subvec__2 = function(v, start) {
    return cljs$core$subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
  };
  var cljs$core$subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec(null, v, start, end, null);
  };
  cljs$core$subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return cljs$core$subvec__2.call(this, v, start);
      case 3:
        return cljs$core$subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$subvec.cljs$core$IFn$_invoke$arity$2 = cljs$core$subvec__2;
  cljs$core$subvec.cljs$core$IFn$_invoke$arity$3 = cljs$core$subvec__3;
  return cljs$core$subvec;
}();
cljs.core.tv_ensure_editable = function cljs$core$tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function cljs$core$tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj9575 = {};
    return obj9575;
  }(), cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function cljs$core$tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function cljs$core$tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return cljs$core$tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function cljs$core$tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function cljs$core$unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__9583 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__9584 = level - 5;
        node = G__9583;
        level = G__9584;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.prototype.call = function() {
  var G__9588 = null;
  var G__9588__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9588__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9588 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9588__2.call(this, self__, k);
      case 3:
        return G__9588__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9588.cljs$core$IFn$_invoke$arity$2 = G__9588__2;
  G__9588.cljs$core$IFn$_invoke$arity$3 = G__9588__3;
  return G__9588;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args9585) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9585)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function cljs$core$go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function cljs$core$__GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next(self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function cljs$core$__GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next(self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__4122__auto__ = self__.front;
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__4122__auto__ = self__.rear;
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function cljs$core$__GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function cljs$core$__GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function cljs$core$equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function cljs$core$scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__9589 = i + incr;
        i = G__9589;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function cljs$core$obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function cljs$core$obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__9590 = i + 1;
      var G__9591 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__9590;
      out = G__9591;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function cljs$core$obj_clone(obj, ks) {
  var new_obj = function() {
    var obj9595 = {};
    return obj9595;
  }();
  var l = ks.length;
  var i_9596 = 0;
  while (true) {
    if (i_9596 < l) {
      var k_9597 = ks[i_9596];
      new_obj[k_9597] = obj[k_9597];
      var G__9598 = i_9596 + 1;
      i_9596 = G__9598;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4110__auto__ = function() {
      var G__9602 = k;
      return goog.isString(G__9602);
    }();
    if (cljs.core.truth_(and__4110__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4110__auto__;
    }
  }())) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__9603 = init__$1;
        var G__9604 = k;
        var G__9605 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9603, G__9604, G__9605) : f.call(null, G__9603, G__9604, G__9605);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9606 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9606) : cljs.core.deref.call(null, G__9606);
      } else {
        var G__9612 = cljs.core.rest(keys__$1);
        var G__9613 = init__$2;
        keys__$1 = G__9612;
        init__$1 = G__9613;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4110__auto__ = function() {
      var G__9608 = k;
      return goog.isString(G__9608);
    }();
    if (cljs.core.truth_(and__4110__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4110__auto__;
    }
  }())) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var G__9609 = k;
    return goog.isString(G__9609);
  }())) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4110__auto__ = function() {
      var G__9611 = k;
      return goog.isString(G__9611);
    }();
    if (cljs.core.truth_(and__4110__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4110__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__9599_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__9599_SHARP_, self__.strobj[p1__9599_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__9614 = null;
  var G__9614__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9614__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9614 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9614__2.call(this, self__, k);
      case 3:
        return G__9614__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9614.cljs$core$IFn$_invoke$arity$2 = G__9614__2;
  G__9614.cljs$core$IFn$_invoke$arity$3 = G__9614__3;
  return G__9614;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args9600) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9600)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function cljs$core$__GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj9616 = {};
  return obj9616;
}(), 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__9617 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9617, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9617, 1, null);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function cljs$core$__GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function cljs$core$es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function cljs$core$__GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function cljs$core$es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function cljs$core$array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__9618 = i + 2;
        i = G__9618;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function cljs$core$array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__9619 = i + 2;
        i = G__9619;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function cljs$core$array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__9620 = i + 2;
        i = G__9620;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function cljs$core$array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__9621 = i + 2;
        i = G__9621;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function cljs$core$array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__9622 = i + 2;
        i = G__9622;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function cljs$core$array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_(arr, m, k);
  } else {
    if (cljs.core.truth_(function() {
      var or__4122__auto__ = function() {
        var G__9626 = k;
        return goog.isString(G__9626);
      }();
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return typeof k === "number";
      }
    }())) {
      return cljs.core.array_map_index_of_identical_QMARK_(arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_(arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_(arr, m, k);
        } else {
          return cljs.core.array_map_index_of_equiv_QMARK_(arr, m, k);
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function cljs$core$array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_9627 = 0;
  while (true) {
    if (i_9627 < l) {
      narr[i_9627] = arr[i_9627];
      var G__9628 = i_9627 + 1;
      i_9627 = G__9628;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function cljs$core$__GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.persistent_array_map_seq = function cljs$core$persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function cljs$core$__GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9630 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__9630) : cljs.core.keys.call(null, G__9630);
  }());
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9631 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__9631) : cljs.core.vals.call(null, G__9631);
  }());
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9632 = cljs.core.seq(coll);
  var chunk__9633 = null;
  var count__9634 = 0;
  var i__9635 = 0;
  while (true) {
    if (i__9635 < count__9634) {
      var vec__9636 = chunk__9633.cljs$core$IIndexed$_nth$arity$2(null, i__9635);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9636, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9636, 1, null);
      var G__9637_9650 = v;
      var G__9638_9651 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9637_9650, G__9638_9651) : f.call(null, G__9637_9650, G__9638_9651);
      var G__9652 = seq__9632;
      var G__9653 = chunk__9633;
      var G__9654 = count__9634;
      var G__9655 = i__9635 + 1;
      seq__9632 = G__9652;
      chunk__9633 = G__9653;
      count__9634 = G__9654;
      i__9635 = G__9655;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__9632);
      if (temp__4126__auto__) {
        var seq__9632__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9632__$1)) {
          var c__4907__auto__ = cljs.core.chunk_first(seq__9632__$1);
          var G__9656 = cljs.core.chunk_rest(seq__9632__$1);
          var G__9657 = c__4907__auto__;
          var G__9658 = cljs.core.count(c__4907__auto__);
          var G__9659 = 0;
          seq__9632 = G__9656;
          chunk__9633 = G__9657;
          count__9634 = G__9658;
          i__9635 = G__9659;
          continue;
        } else {
          var vec__9639 = cljs.core.first(seq__9632__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9639, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9639, 1, null);
          var G__9640_9660 = v;
          var G__9641_9661 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9640_9660, G__9641_9661) : f.call(null, G__9640_9660, G__9641_9661);
          var G__9662 = cljs.core.next(seq__9632__$1);
          var G__9663 = null;
          var G__9664 = 0;
          var G__9665 = 0;
          seq__9632 = G__9662;
          chunk__9633 = G__9663;
          count__9634 = G__9664;
          i__9635 = G__9665;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__9642 = init__$1;
        var G__9643 = self__.arr[i];
        var G__9644 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9642, G__9643, G__9644) : f.call(null, G__9642, G__9643, G__9644);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9645 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9645) : cljs.core.deref.call(null, G__9645);
      } else {
        var G__9666 = i + 2;
        var G__9667 = init__$2;
        i = G__9666;
        init__$1 = G__9667;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__9646 = other;
    if (G__9646) {
      var bit__4789__auto__ = G__9646.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4789__auto__ || G__9646.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__9668 = i + 2;
              i = G__9668;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj9648 = {};
    return obj9648;
  }(), self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__9669 = s + 2;
            var G__9670 = d;
            s = G__9669;
            d = G__9670;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__9671 = s + 2;
            var G__9672 = d + 2;
            s = G__9671;
            d = G__9672;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__9649 = cljs.core.aclone(self__.arr);
        G__9649[idx + 1] = v;
        return G__9649;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__9673 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__9674 = cljs.core.next(es);
          ret = G__9673;
          es = G__9674;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__9675 = null;
  var G__9675__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9675__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9675 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9675__2.call(this, self__, k);
      case 3:
        return G__9675__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9675.cljs$core$IFn$_invoke$arity$2 = G__9675__2;
  G__9675.cljs$core$IFn$_invoke$arity$3 = G__9675__3;
  return G__9675;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args9629) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9629)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function cljs$core$__GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__9676 = i + 2;
        var G__9677 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
        i = G__9676;
        ret = G__9677;
        continue;
      } else {
        return cljs.core._persistent_BANG_(ret);
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__9678_9686 = self__.arr;
      G__9678_9686.pop();
      G__9678_9686.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(function() {
          var G__9679 = self__.len;
          var G__9680 = self__.arr;
          return cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(G__9679, G__9680) : cljs.core.array__GT_transient_hash_map.call(null, G__9679, G__9680);
        }(), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__9681 = o;
      if (G__9681) {
        var bit__4796__auto__ = G__9681.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4796__auto__ || G__9681.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__9681.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__9681);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__9681);
      }
    }()) {
      return cljs.core._assoc_BANG_(tcoll__$1, function() {
        var G__9682 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__9682) : cljs.core.key.call(null, G__9682);
      }(), function() {
        var G__9683 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__9683) : cljs.core.val.call(null, G__9683);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__9687 = cljs.core.next(es);
          var G__9688 = cljs.core._assoc_BANG_(tcoll__$2, function() {
            var G__9684 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__9684) : cljs.core.key.call(null, G__9684);
          }(), function() {
            var G__9685 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__9685) : cljs.core.val.call(null, G__9685);
          }());
          es = G__9687;
          tcoll__$2 = G__9688;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function cljs$core$__GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function cljs$core$array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__9689 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__9690 = i + 2;
      out = G__9689;
      i = G__9690;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function cljs$core$__GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function cljs$core$key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function cljs$core$mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var cljs$core$clone_and_set = null;
  var cljs$core$clone_and_set__3 = function(arr, i, a) {
    var G__9693 = cljs.core.aclone(arr);
    G__9693[i] = a;
    return G__9693;
  };
  var cljs$core$clone_and_set__5 = function(arr, i, a, j, b) {
    var G__9694 = cljs.core.aclone(arr);
    G__9694[i] = a;
    G__9694[j] = b;
    return G__9694;
  };
  cljs$core$clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return cljs$core$clone_and_set__3.call(this, arr, i, a);
      case 5:
        return cljs$core$clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$clone_and_set.cljs$core$IFn$_invoke$arity$3 = cljs$core$clone_and_set__3;
  cljs$core$clone_and_set.cljs$core$IFn$_invoke$arity$5 = cljs$core$clone_and_set__5;
  return cljs$core$clone_and_set;
}();
cljs.core.remove_pair = function cljs$core$remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function cljs$core$bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function cljs$core$bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var cljs$core$edit_and_set = null;
  var cljs$core$edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var cljs$core$edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  cljs$core$edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return cljs$core$edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return cljs$core$edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$edit_and_set.cljs$core$IFn$_invoke$arity$4 = cljs$core$edit_and_set__4;
  cljs$core$edit_and_set.cljs$core$IFn$_invoke$arity$6 = cljs$core$edit_and_set__6;
  return cljs$core$edit_and_set;
}();
cljs.core.inode_kv_reduce = function cljs$core$inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__9699 = init__$1;
          var G__9700 = k;
          var G__9701 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9699, G__9700, G__9701) : f.call(null, G__9699, G__9700, G__9701);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9702 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9702) : cljs.core.deref.call(null, G__9702);
      } else {
        var G__9703 = i + 2;
        var G__9704 = init__$2;
        i = G__9703;
        init__$1 = G__9704;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__9705 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__9705) : cljs.core.create_inode_seq.call(null, G__9705);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_9719 = 0;
        var j_9720 = 0;
        while (true) {
          if (i_9719 < 32) {
            if ((self__.bitmap >>> i_9719 & 1) === 0) {
              var G__9721 = i_9719 + 1;
              var G__9722 = j_9720;
              i_9719 = G__9721;
              j_9720 = G__9722;
              continue;
            } else {
              nodes[i_9719] = !(self__.arr[j_9720] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_9720]), self__.arr[j_9720], self__.arr[j_9720 + 1], added_leaf_QMARK_) : self__.arr[j_9720 + 1];
              var G__9723 = i_9719 + 1;
              var G__9724 = j_9720 + 2;
              i_9719 = G__9723;
              j_9720 = G__9724;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__9706 = edit__$1;
          var G__9707 = shift + 5;
          var G__9708 = key_or_nil;
          var G__9709 = val_or_node;
          var G__9710 = hash;
          var G__9711 = key;
          var G__9712 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__9706, G__9707, G__9708, G__9709, G__9710, G__9711, G__9712) : cljs.core.create_node.call(null, G__9706, G__9707, G__9708, G__9709, G__9710, G__9711, G__9712);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_9725 = 0;
      var j_9726 = 0;
      while (true) {
        if (i_9725 < 32) {
          if ((self__.bitmap >>> i_9725 & 1) === 0) {
            var G__9727 = i_9725 + 1;
            var G__9728 = j_9726;
            i_9725 = G__9727;
            j_9726 = G__9728;
            continue;
          } else {
            nodes[i_9725] = !(self__.arr[j_9726] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_9726]), self__.arr[j_9726], self__.arr[j_9726 + 1], added_leaf_QMARK_) : self__.arr[j_9726 + 1];
            var G__9729 = i_9725 + 1;
            var G__9730 = j_9726 + 2;
            i_9725 = G__9729;
            j_9726 = G__9730;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__9713 = shift + 5;
          var G__9714 = key_or_nil;
          var G__9715 = val_or_node;
          var G__9716 = hash;
          var G__9717 = key;
          var G__9718 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__9713, G__9714, G__9715, G__9716, G__9717, G__9718) : cljs.core.create_node.call(null, G__9713, G__9714, G__9715, G__9716, G__9717, G__9718);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function cljs$core$__GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function cljs$core$pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__9731 = i + 1;
        var G__9732 = j + 2;
        var G__9733 = bitmap | 1 << i;
        i = G__9731;
        j = G__9732;
        bitmap = G__9733;
        continue;
      } else {
        var G__9734 = i + 1;
        var G__9735 = j;
        var G__9736 = bitmap;
        i = G__9734;
        j = G__9735;
        bitmap = G__9736;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__9737 = self__.arr;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(G__9737) : cljs.core.create_array_node_seq.call(null, G__9737);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          var G__9738 = init__$2;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9738) : cljs.core.deref.call(null, G__9738);
        } else {
          var G__9739 = i + 1;
          var G__9740 = init__$2;
          i = G__9739;
          init__$1 = G__9740;
          continue;
        }
      } else {
        var G__9741 = i + 1;
        var G__9742 = init__$1;
        i = G__9741;
        init__$1 = G__9742;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function cljs$core$__GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function cljs$core$hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__9743 = i + 2;
        i = G__9743;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__9744 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__9744) : cljs.core.create_inode_seq.call(null, G__9744);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function cljs$core$__GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var cljs$core$create_node = null;
  var cljs$core$create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash(key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var cljs$core$create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash(key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  cljs$core$create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return cljs$core$create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return cljs$core$create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$create_node.cljs$core$IFn$_invoke$arity$6 = cljs$core$create_node__6;
  cljs$core$create_node.cljs$core$IFn$_invoke$arity$7 = cljs$core$create_node__7;
  return cljs$core$create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__9745 = self__.nodes;
    var G__9746 = self__.i + 2;
    var G__9747 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__9745, G__9746, G__9747) : cljs.core.create_inode_seq.call(null, G__9745, G__9746, G__9747);
  } else {
    var G__9748 = self__.nodes;
    var G__9749 = self__.i;
    var G__9750 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__9748, G__9749, G__9750) : cljs.core.create_inode_seq.call(null, G__9748, G__9749, G__9750);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function cljs$core$__GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.create_inode_seq = function() {
  var cljs$core$create_inode_seq = null;
  var cljs$core$create_inode_seq__1 = function(nodes) {
    return cljs$core$create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
  };
  var cljs$core$create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__9754 = j + 2;
                j = G__9754;
                continue;
              }
            } else {
              var G__9755 = j + 2;
              j = G__9755;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  cljs$core$create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return cljs$core$create_inode_seq__1.call(this, nodes);
      case 3:
        return cljs$core$create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$create_inode_seq.cljs$core$IFn$_invoke$arity$1 = cljs$core$create_inode_seq__1;
  cljs$core$create_inode_seq.cljs$core$IFn$_invoke$arity$3 = cljs$core$create_inode_seq__3;
  return cljs$core$create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__9756 = null;
  var G__9757 = self__.nodes;
  var G__9758 = self__.i;
  var G__9759 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__9756, G__9757, G__9758, G__9759) : cljs.core.create_array_node_seq.call(null, G__9756, G__9757, G__9758, G__9759);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function cljs$core$__GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.create_array_node_seq = function() {
  var cljs$core$create_array_node_seq = null;
  var cljs$core$create_array_node_seq__1 = function(nodes) {
    return cljs$core$create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
  };
  var cljs$core$create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__9764 = j + 1;
              j = G__9764;
              continue;
            }
          } else {
            var G__9765 = j + 1;
            j = G__9765;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  cljs$core$create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return cljs$core$create_array_node_seq__1.call(this, meta);
      case 4:
        return cljs$core$create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = cljs$core$create_array_node_seq__1;
  cljs$core$create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = cljs$core$create_array_node_seq__4;
  return cljs$core$create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9767 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__9767) : cljs.core.keys.call(null, G__9767);
  }());
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9768 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__9768) : cljs.core.vals.call(null, G__9768);
  }());
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9769 = cljs.core.seq(coll);
  var chunk__9770 = null;
  var count__9771 = 0;
  var i__9772 = 0;
  while (true) {
    if (i__9772 < count__9771) {
      var vec__9773 = chunk__9770.cljs$core$IIndexed$_nth$arity$2(null, i__9772);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9773, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9773, 1, null);
      var G__9774_9785 = v;
      var G__9775_9786 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9774_9785, G__9775_9786) : f.call(null, G__9774_9785, G__9775_9786);
      var G__9787 = seq__9769;
      var G__9788 = chunk__9770;
      var G__9789 = count__9771;
      var G__9790 = i__9772 + 1;
      seq__9769 = G__9787;
      chunk__9770 = G__9788;
      count__9771 = G__9789;
      i__9772 = G__9790;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__9769);
      if (temp__4126__auto__) {
        var seq__9769__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9769__$1)) {
          var c__4907__auto__ = cljs.core.chunk_first(seq__9769__$1);
          var G__9791 = cljs.core.chunk_rest(seq__9769__$1);
          var G__9792 = c__4907__auto__;
          var G__9793 = cljs.core.count(c__4907__auto__);
          var G__9794 = 0;
          seq__9769 = G__9791;
          chunk__9770 = G__9792;
          count__9771 = G__9793;
          i__9772 = G__9794;
          continue;
        } else {
          var vec__9776 = cljs.core.first(seq__9769__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9776, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9776, 1, null);
          var G__9777_9795 = v;
          var G__9778_9796 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9777_9795, G__9778_9796) : f.call(null, G__9777_9795, G__9778_9796);
          var G__9797 = cljs.core.next(seq__9769__$1);
          var G__9798 = null;
          var G__9799 = 0;
          var G__9800 = 0;
          seq__9769 = G__9797;
          chunk__9770 = G__9798;
          count__9771 = G__9799;
          i__9772 = G__9800;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? function() {
    var G__9779 = init;
    var G__9780 = null;
    var G__9781 = self__.nil_val;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9779, G__9780, G__9781) : f.call(null, G__9779, G__9780, G__9781);
  }() : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__9782 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9782) : cljs.core.deref.call(null, G__9782);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj9784 = {};
    return obj9784;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__9801 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__9802 = cljs.core.next(es);
          ret = G__9801;
          es = G__9802;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__9803 = null;
  var G__9803__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9803__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9803 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9803__2.call(this, self__, k);
      case 3:
        return G__9803__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9803.cljs$core$IFn$_invoke$arity$2 = G__9803__2;
  G__9803.cljs$core$IFn$_invoke$arity$3 = G__9803__3;
  return G__9803;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args9766) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9766)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function cljs$core$__GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__9804 = i + 2;
      var G__9805 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__9804;
      ret = G__9805;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__9806 = i + 1;
      var G__9807 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__9806;
      out = G__9807;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__9808 = o;
      if (G__9808) {
        var bit__4796__auto__ = G__9808.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4796__auto__ || G__9808.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__9808.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__9808);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__9808);
      }
    }()) {
      return tcoll.assoc_BANG_(function() {
        var G__9809 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__9809) : cljs.core.key.call(null, G__9809);
      }(), function() {
        var G__9810 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__9810) : cljs.core.val.call(null, G__9810);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__9813 = cljs.core.next(es);
          var G__9814 = tcoll__$1.assoc_BANG_(function() {
            var G__9811 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__9811) : cljs.core.key.call(null, G__9811);
          }(), function() {
            var G__9812 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__9812) : cljs.core.val.call(null, G__9812);
          }());
          es = G__9813;
          tcoll__$1 = G__9814;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function cljs$core$__GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function cljs$core$tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__9815 = ascending_QMARK_ ? t.left : t.right;
      var G__9816 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__9815;
      stack__$1 = G__9816;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function cljs$core$__GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.create_tree_map_seq = function cljs$core$create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function cljs$core$balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function cljs$core$balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function cljs$core$balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function cljs$core$balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function cljs$core$tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? cljs$core$tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__9829 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9829) : cljs.core.deref.call(null, G__9829);
  } else {
    var init__$2 = function() {
      var G__9830 = init__$1;
      var G__9831 = node.key;
      var G__9832 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9830, G__9831, G__9832) : f.call(null, G__9830, G__9831, G__9832);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      var G__9833 = init__$2;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9833) : cljs.core.deref.call(null, G__9833);
    } else {
      var init__$3 = !(node.right == null) ? cljs$core$tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        var G__9834 = init__$3;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9834) : cljs.core.deref.call(null, G__9834);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__9836 = null;
  var G__9836__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9836__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9836 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9836__2.call(this, self__, k);
      case 3:
        return G__9836__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9836.cljs$core$IFn$_invoke$arity$2 = G__9836__2;
  G__9836.cljs$core$IFn$_invoke$arity$3 = G__9836__3;
  return G__9836;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args9835) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9835)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function cljs$core$__GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__9838 = null;
  var G__9838__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9838__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9838 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9838__2.call(this, self__, k);
      case 3:
        return G__9838__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9838.cljs$core$IFn$_invoke$arity$2 = G__9838__2;
  G__9838.cljs$core$IFn$_invoke$arity$3 = G__9838__3;
  return G__9838;
}();
cljs.core.RedNode.prototype.apply = function(self__, args9837) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9837)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function cljs$core$__GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.tree_map_add = function cljs$core$tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__9851 = k;
      var G__9852 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__9851, G__9852) : comp.call(null, G__9851, G__9852);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = cljs$core$tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = cljs$core$tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function cljs$core$tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, cljs$core$tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, cljs$core$tree_map_append(left, right.left), right.right, null);
        } else {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function cljs$core$tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__9871 = k;
      var G__9872 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__9871, G__9872) : comp.call(null, G__9871, G__9872);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = cljs$core$tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = cljs$core$tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function cljs$core$tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = function() {
    var G__9883 = k;
    var G__9884 = tk;
    return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__9883, G__9884) : comp.call(null, G__9883, G__9884);
  }();
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, cljs$core$tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, cljs$core$tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9886 = cljs.core.seq(coll);
  var chunk__9887 = null;
  var count__9888 = 0;
  var i__9889 = 0;
  while (true) {
    if (i__9889 < count__9888) {
      var vec__9890 = chunk__9887.cljs$core$IIndexed$_nth$arity$2(null, i__9889);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9890, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9890, 1, null);
      var G__9891_9903 = v;
      var G__9892_9904 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9891_9903, G__9892_9904) : f.call(null, G__9891_9903, G__9892_9904);
      var G__9905 = seq__9886;
      var G__9906 = chunk__9887;
      var G__9907 = count__9888;
      var G__9908 = i__9889 + 1;
      seq__9886 = G__9905;
      chunk__9887 = G__9906;
      count__9888 = G__9907;
      i__9889 = G__9908;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__9886);
      if (temp__4126__auto__) {
        var seq__9886__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9886__$1)) {
          var c__4907__auto__ = cljs.core.chunk_first(seq__9886__$1);
          var G__9909 = cljs.core.chunk_rest(seq__9886__$1);
          var G__9910 = c__4907__auto__;
          var G__9911 = cljs.core.count(c__4907__auto__);
          var G__9912 = 0;
          seq__9886 = G__9909;
          chunk__9887 = G__9910;
          count__9888 = G__9911;
          i__9889 = G__9912;
          continue;
        } else {
          var vec__9893 = cljs.core.first(seq__9886__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9893, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9893, 1, null);
          var G__9894_9913 = v;
          var G__9895_9914 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9894_9913, G__9895_9914) : f.call(null, G__9894_9913, G__9895_9914);
          var G__9915 = cljs.core.next(seq__9886__$1);
          var G__9916 = null;
          var G__9917 = 0;
          var G__9918 = 0;
          seq__9886 = G__9915;
          chunk__9887 = G__9916;
          count__9888 = G__9917;
          i__9889 = G__9918;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9896 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__9896) : cljs.core.keys.call(null, G__9896);
  }());
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9897 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__9897) : cljs.core.vals.call(null, G__9897);
  }());
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__9898 = k;
        var G__9899 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__9898, G__9899) : self__.comp.call(null, G__9898, G__9899);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__9919 = t.left;
          t = G__9919;
          continue;
        } else {
          var G__9920 = t.right;
          t = G__9920;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__9921 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__9922 = cljs.core.next(es);
          ret = G__9921;
          es = G__9922;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__9923 = null;
  var G__9923__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9923__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9923 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9923__2.call(this, self__, k);
      case 3:
        return G__9923__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9923.cljs$core$IFn$_invoke$arity$2 = G__9923__2;
  G__9923.cljs$core$IFn$_invoke$arity$3 = G__9923__3;
  return G__9923;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args9885) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9885)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__9900 = k;
          var G__9901 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__9900, G__9901) : self__.comp.call(null, G__9900, G__9901);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__9924 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__9925 = t.left;
              stack = G__9924;
              t = G__9925;
              continue;
            } else {
              var G__9926 = stack;
              var G__9927 = t.right;
              stack = G__9926;
              t = G__9927;
              continue;
            }
          } else {
            if (c > 0) {
              var G__9928 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__9929 = t.right;
              stack = G__9928;
              t = G__9929;
              continue;
            } else {
              var G__9930 = stack;
              var G__9931 = t.left;
              stack = G__9930;
              t = G__9931;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  var G__9902 = entry;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__9902) : cljs.core.key.call(null, G__9902);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function cljs$core$__GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.hash_map = function() {
  var cljs$core$hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__9932 = cljs.core.nnext(in$);
        var G__9933 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__9932;
        out = G__9933;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  };
  var cljs$core$hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__9934__i = 0, G__9934__a = new Array(arguments.length - 0);
      while (G__9934__i < G__9934__a.length) {
        G__9934__a[G__9934__i] = arguments[G__9934__i + 0];
        ++G__9934__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__9934__a, 0);
    }
    return cljs$core$hash_map__delegate.call(this, keyvals);
  };
  cljs$core$hash_map.cljs$lang$maxFixedArity = 0;
  cljs$core$hash_map.cljs$lang$applyTo = function(arglist__9935) {
    var keyvals = cljs.core.seq(arglist__9935);
    return cljs$core$hash_map__delegate(keyvals);
  };
  cljs$core$hash_map.cljs$core$IFn$_invoke$arity$variadic = cljs$core$hash_map__delegate;
  return cljs$core$hash_map;
}();
cljs.core.array_map = function() {
  var cljs$core$array_map__delegate = function(keyvals) {
    return cljs.core.PersistentArrayMap.fromArray(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array, keyvals), true, false);
  };
  var cljs$core$array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__9936__i = 0, G__9936__a = new Array(arguments.length - 0);
      while (G__9936__i < G__9936__a.length) {
        G__9936__a[G__9936__i] = arguments[G__9936__i + 0];
        ++G__9936__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__9936__a, 0);
    }
    return cljs$core$array_map__delegate.call(this, keyvals);
  };
  cljs$core$array_map.cljs$lang$maxFixedArity = 0;
  cljs$core$array_map.cljs$lang$applyTo = function(arglist__9937) {
    var keyvals = cljs.core.seq(arglist__9937);
    return cljs$core$array_map__delegate(keyvals);
  };
  cljs$core$array_map.cljs$core$IFn$_invoke$arity$variadic = cljs$core$array_map__delegate;
  return cljs$core$array_map;
}();
cljs.core.obj_map = function() {
  var cljs$core$obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj9941 = {};
      return obj9941;
    }();
    var kvs = cljs.core.seq(keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first(kvs));
        obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
        var G__9942 = cljs.core.nnext(kvs);
        kvs = G__9942;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject(ks, obj);
      }
      break;
    }
  };
  var cljs$core$obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__9943__i = 0, G__9943__a = new Array(arguments.length - 0);
      while (G__9943__i < G__9943__a.length) {
        G__9943__a[G__9943__i] = arguments[G__9943__i + 0];
        ++G__9943__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__9943__a, 0);
    }
    return cljs$core$obj_map__delegate.call(this, keyvals);
  };
  cljs$core$obj_map.cljs$lang$maxFixedArity = 0;
  cljs$core$obj_map.cljs$lang$applyTo = function(arglist__9944) {
    var keyvals = cljs.core.seq(arglist__9944);
    return cljs$core$obj_map__delegate(keyvals);
  };
  cljs$core$obj_map.cljs$core$IFn$_invoke$arity$variadic = cljs$core$obj_map__delegate;
  return cljs$core$obj_map;
}();
cljs.core.sorted_map = function() {
  var cljs$core$sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__9945 = cljs.core.nnext(in$);
        var G__9946 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__9945;
        out = G__9946;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var cljs$core$sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__9947__i = 0, G__9947__a = new Array(arguments.length - 0);
      while (G__9947__i < G__9947__a.length) {
        G__9947__a[G__9947__i] = arguments[G__9947__i + 0];
        ++G__9947__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__9947__a, 0);
    }
    return cljs$core$sorted_map__delegate.call(this, keyvals);
  };
  cljs$core$sorted_map.cljs$lang$maxFixedArity = 0;
  cljs$core$sorted_map.cljs$lang$applyTo = function(arglist__9948) {
    var keyvals = cljs.core.seq(arglist__9948);
    return cljs$core$sorted_map__delegate(keyvals);
  };
  cljs$core$sorted_map.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sorted_map__delegate;
  return cljs$core$sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var cljs$core$sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__9949 = cljs.core.nnext(in$);
        var G__9950 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__9949;
        out = G__9950;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var cljs$core$sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      var G__9951__i = 0, G__9951__a = new Array(arguments.length - 1);
      while (G__9951__i < G__9951__a.length) {
        G__9951__a[G__9951__i] = arguments[G__9951__i + 1];
        ++G__9951__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__9951__a, 0);
    }
    return cljs$core$sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  cljs$core$sorted_map_by.cljs$lang$maxFixedArity = 1;
  cljs$core$sorted_map_by.cljs$lang$applyTo = function(arglist__9952) {
    var comparator = cljs.core.first(arglist__9952);
    var keyvals = cljs.core.rest(arglist__9952);
    return cljs$core$sorted_map_by__delegate(comparator, keyvals);
  };
  cljs$core$sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sorted_map_by__delegate;
  return cljs$core$sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9953 = self__.mseq;
    if (G__9953) {
      var bit__4796__auto__ = G__9953.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4796__auto__ || G__9953.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9953.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9953);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9953);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9954 = self__.mseq;
    if (G__9954) {
      var bit__4796__auto__ = G__9954.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4796__auto__ || G__9954.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9954.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9954);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9954);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function cljs$core$__GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.keys = function cljs$core$keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function cljs$core$key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9955 = self__.mseq;
    if (G__9955) {
      var bit__4796__auto__ = G__9955.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4796__auto__ || G__9955.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9955.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9955);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9955);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9956 = self__.mseq;
    if (G__9956) {
      var bit__4796__auto__ = G__9956.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4796__auto__ || G__9956.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9956.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9956);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__9956);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function cljs$core$__GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.vals = function cljs$core$vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function cljs$core$val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function() {
  var cljs$core$merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__9957_SHARP_, p2__9958_SHARP_) {
        return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
          var or__4122__auto__ = p1__9957_SHARP_;
          if (cljs.core.truth_(or__4122__auto__)) {
            return or__4122__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__9958_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var cljs$core$merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      var G__9959__i = 0, G__9959__a = new Array(arguments.length - 0);
      while (G__9959__i < G__9959__a.length) {
        G__9959__a[G__9959__i] = arguments[G__9959__i + 0];
        ++G__9959__i;
      }
      maps = new cljs.core.IndexedSeq(G__9959__a, 0);
    }
    return cljs$core$merge__delegate.call(this, maps);
  };
  cljs$core$merge.cljs$lang$maxFixedArity = 0;
  cljs$core$merge.cljs$lang$applyTo = function(arglist__9960) {
    var maps = cljs.core.seq(arglist__9960);
    return cljs$core$merge__delegate(maps);
  };
  cljs$core$merge.cljs$core$IFn$_invoke$arity$variadic = cljs$core$merge__delegate;
  return cljs$core$merge;
}();
cljs.core.merge_with = function() {
  var cljs$core$merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first(e);
        var v = cljs.core.second(e);
        if (cljs.core.contains_QMARK_(m, k)) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
            var G__9963 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
            var G__9964 = v;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9963, G__9964) : f.call(null, G__9963, G__9964);
          }());
        } else {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
            var or__4122__auto__ = m1;
            if (cljs.core.truth_(or__4122__auto__)) {
              return or__4122__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq(m2));
        };
      }(merge_entry);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
    } else {
      return null;
    }
  };
  var cljs$core$merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      var G__9965__i = 0, G__9965__a = new Array(arguments.length - 1);
      while (G__9965__i < G__9965__a.length) {
        G__9965__a[G__9965__i] = arguments[G__9965__i + 1];
        ++G__9965__i;
      }
      maps = new cljs.core.IndexedSeq(G__9965__a, 0);
    }
    return cljs$core$merge_with__delegate.call(this, f, maps);
  };
  cljs$core$merge_with.cljs$lang$maxFixedArity = 1;
  cljs$core$merge_with.cljs$lang$applyTo = function(arglist__9966) {
    var f = cljs.core.first(arglist__9966);
    var maps = cljs.core.rest(arglist__9966);
    return cljs$core$merge_with__delegate(f, maps);
  };
  cljs$core$merge_with.cljs$core$IFn$_invoke$arity$variadic = cljs$core$merge_with__delegate;
  return cljs$core$merge_with;
}();
cljs.core.select_keys = function cljs$core$select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__9967 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__9968 = cljs.core.next(keys);
      ret = G__9967;
      keys = G__9968;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9971 = cljs.core.seq(coll);
  var chunk__9972 = null;
  var count__9973 = 0;
  var i__9974 = 0;
  while (true) {
    if (i__9974 < count__9973) {
      var vec__9975 = chunk__9972.cljs$core$IIndexed$_nth$arity$2(null, i__9974);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9975, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9975, 1, null);
      var G__9976_9981 = v;
      var G__9977_9982 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9976_9981, G__9977_9982) : f.call(null, G__9976_9981, G__9977_9982);
      var G__9983 = seq__9971;
      var G__9984 = chunk__9972;
      var G__9985 = count__9973;
      var G__9986 = i__9974 + 1;
      seq__9971 = G__9983;
      chunk__9972 = G__9984;
      count__9973 = G__9985;
      i__9974 = G__9986;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__9971);
      if (temp__4126__auto__) {
        var seq__9971__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9971__$1)) {
          var c__4907__auto__ = cljs.core.chunk_first(seq__9971__$1);
          var G__9987 = cljs.core.chunk_rest(seq__9971__$1);
          var G__9988 = c__4907__auto__;
          var G__9989 = cljs.core.count(c__4907__auto__);
          var G__9990 = 0;
          seq__9971 = G__9987;
          chunk__9972 = G__9988;
          count__9973 = G__9989;
          i__9974 = G__9990;
          continue;
        } else {
          var vec__9978 = cljs.core.first(seq__9971__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9978, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9978, 1, null);
          var G__9979_9991 = v;
          var G__9980_9992 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9979_9991, G__9980_9992) : f.call(null, G__9979_9991, G__9980_9992);
          var G__9993 = cljs.core.next(seq__9971__$1);
          var G__9994 = null;
          var G__9995 = 0;
          var G__9996 = 0;
          seq__9971 = G__9993;
          chunk__9972 = G__9994;
          count__9973 = G__9995;
          i__9974 = G__9996;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__9969_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__9969_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__9997 = null;
  var G__9997__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9997__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9997 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9997__2.call(this, self__, k);
      case 3:
        return G__9997__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9997.cljs$core$IFn$_invoke$arity$2 = G__9997__2;
  G__9997.cljs$core$IFn$_invoke$arity$3 = G__9997__3;
  return G__9997;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args9970) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9970)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function cljs$core$__GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__9998 = i + 1;
        var G__9999 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__9998;
        out = G__9999;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__10000 = i + 1;
        var G__10001 = cljs.core._conj_BANG_(out, items[i]);
        i = G__10000;
        out = G__10001;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__10003 = null;
  var G__10003__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__10003__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__10003 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10003__2.call(this, self__, k);
      case 3:
        return G__10003__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10003.cljs$core$IFn$_invoke$arity$2 = G__10003__2;
  G__10003.cljs$core$IFn$_invoke$arity$3 = G__10003__3;
  return G__10003;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args10002) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10002)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function cljs$core$__GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__10006 = cljs.core.seq(coll);
  var chunk__10007 = null;
  var count__10008 = 0;
  var i__10009 = 0;
  while (true) {
    if (i__10009 < count__10008) {
      var vec__10010 = chunk__10007.cljs$core$IIndexed$_nth$arity$2(null, i__10009);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10010, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10010, 1, null);
      var G__10011_10016 = v;
      var G__10012_10017 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10011_10016, G__10012_10017) : f.call(null, G__10011_10016, G__10012_10017);
      var G__10018 = seq__10006;
      var G__10019 = chunk__10007;
      var G__10020 = count__10008;
      var G__10021 = i__10009 + 1;
      seq__10006 = G__10018;
      chunk__10007 = G__10019;
      count__10008 = G__10020;
      i__10009 = G__10021;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__10006);
      if (temp__4126__auto__) {
        var seq__10006__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10006__$1)) {
          var c__4907__auto__ = cljs.core.chunk_first(seq__10006__$1);
          var G__10022 = cljs.core.chunk_rest(seq__10006__$1);
          var G__10023 = c__4907__auto__;
          var G__10024 = cljs.core.count(c__4907__auto__);
          var G__10025 = 0;
          seq__10006 = G__10022;
          chunk__10007 = G__10023;
          count__10008 = G__10024;
          i__10009 = G__10025;
          continue;
        } else {
          var vec__10013 = cljs.core.first(seq__10006__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10013, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10013, 1, null);
          var G__10014_10026 = v;
          var G__10015_10027 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10014_10026, G__10015_10027) : f.call(null, G__10014_10026, G__10015_10027);
          var G__10028 = cljs.core.next(seq__10006__$1);
          var G__10029 = null;
          var G__10030 = 0;
          var G__10031 = 0;
          seq__10006 = G__10028;
          chunk__10007 = G__10029;
          count__10008 = G__10030;
          i__10009 = G__10031;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__10004_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__10004_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__10032 = null;
  var G__10032__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10032__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10032 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10032__2.call(this, self__, k);
      case 3:
        return G__10032__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10032.cljs$core$IFn$_invoke$arity$2 = G__10032__2;
  G__10032.cljs$core$IFn$_invoke$arity$3 = G__10032__3;
  return G__10032;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args10005) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10005)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function cljs$core$__GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.set_from_indexed_seq = function cljs$core$set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__5001__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__5001__auto__.length) {
        var G__10033 = i + 1;
        var G__10034 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__10033;
        res = G__10034;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function cljs$core$set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__10035 = in$__$1.cljs$core$INext$_next$arity$1(null);
          var G__10036 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__10035;
          out = G__10036;
          continue;
        } else {
          return out.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var cljs$core$hash_set = null;
  var cljs$core$hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var cljs$core$hash_set__1 = function() {
    var G__10037__delegate = function(keys) {
      return cljs.core.set(keys);
    };
    var G__10037 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        var G__10038__i = 0, G__10038__a = new Array(arguments.length - 0);
        while (G__10038__i < G__10038__a.length) {
          G__10038__a[G__10038__i] = arguments[G__10038__i + 0];
          ++G__10038__i;
        }
        keys = new cljs.core.IndexedSeq(G__10038__a, 0);
      }
      return G__10037__delegate.call(this, keys);
    };
    G__10037.cljs$lang$maxFixedArity = 0;
    G__10037.cljs$lang$applyTo = function(arglist__10039) {
      var keys = cljs.core.seq(arglist__10039);
      return G__10037__delegate(keys);
    };
    G__10037.cljs$core$IFn$_invoke$arity$variadic = G__10037__delegate;
    return G__10037;
  }();
  cljs$core$hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$hash_set__0.call(this);
      default:
        var G__10040 = null;
        if (arguments.length > 0) {
          var G__10041__i = 0, G__10041__a = new Array(arguments.length - 0);
          while (G__10041__i < G__10041__a.length) {
            G__10041__a[G__10041__i] = arguments[G__10041__i + 0];
            ++G__10041__i;
          }
          G__10040 = new cljs.core.IndexedSeq(G__10041__a, 0);
        }
        return cljs$core$hash_set__1.cljs$core$IFn$_invoke$arity$variadic(G__10040);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$hash_set.cljs$lang$maxFixedArity = 0;
  cljs$core$hash_set.cljs$lang$applyTo = cljs$core$hash_set__1.cljs$lang$applyTo;
  cljs$core$hash_set.cljs$core$IFn$_invoke$arity$0 = cljs$core$hash_set__0;
  cljs$core$hash_set.cljs$core$IFn$_invoke$arity$variadic = cljs$core$hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$hash_set;
}();
cljs.core.sorted_set = function() {
  var cljs$core$sorted_set__delegate = function(keys) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var cljs$core$sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      var G__10042__i = 0, G__10042__a = new Array(arguments.length - 0);
      while (G__10042__i < G__10042__a.length) {
        G__10042__a[G__10042__i] = arguments[G__10042__i + 0];
        ++G__10042__i;
      }
      keys = new cljs.core.IndexedSeq(G__10042__a, 0);
    }
    return cljs$core$sorted_set__delegate.call(this, keys);
  };
  cljs$core$sorted_set.cljs$lang$maxFixedArity = 0;
  cljs$core$sorted_set.cljs$lang$applyTo = function(arglist__10043) {
    var keys = cljs.core.seq(arglist__10043);
    return cljs$core$sorted_set__delegate(keys);
  };
  cljs$core$sorted_set.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sorted_set__delegate;
  return cljs$core$sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var cljs$core$sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
  };
  var cljs$core$sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      var G__10044__i = 0, G__10044__a = new Array(arguments.length - 1);
      while (G__10044__i < G__10044__a.length) {
        G__10044__a[G__10044__i] = arguments[G__10044__i + 1];
        ++G__10044__i;
      }
      keys = new cljs.core.IndexedSeq(G__10044__a, 0);
    }
    return cljs$core$sorted_set_by__delegate.call(this, comparator, keys);
  };
  cljs$core$sorted_set_by.cljs$lang$maxFixedArity = 1;
  cljs$core$sorted_set_by.cljs$lang$applyTo = function(arglist__10045) {
    var comparator = cljs.core.first(arglist__10045);
    var keys = cljs.core.rest(arglist__10045);
    return cljs$core$sorted_set_by__delegate(comparator, keys);
  };
  cljs$core$sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sorted_set_by__delegate;
  return cljs$core$sorted_set_by;
}();
cljs.core.replace = function() {
  var cljs$core$replace = null;
  var cljs$core$replace__1 = function(smap) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__10046_SHARP_) {
      var temp__4124__auto__ = cljs.core.find(smap, p1__10046_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.val(e);
      } else {
        return p1__10046_SHARP_;
      }
    });
  };
  var cljs$core$replace__2 = function(smap, coll) {
    if (cljs.core.vector_QMARK_(coll)) {
      var n = cljs.core.count(coll);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
        return function(v, i) {
          var temp__4124__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
          if (cljs.core.truth_(temp__4124__auto__)) {
            var e = temp__4124__auto__;
            return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
          } else {
            return v;
          }
        };
      }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
    } else {
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__10047_SHARP_) {
        var temp__4124__auto__ = cljs.core.find(smap, p1__10047_SHARP_);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.second(e);
        } else {
          return p1__10047_SHARP_;
        }
      }, coll);
    }
  };
  cljs$core$replace = function(smap, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$replace__1.call(this, smap);
      case 2:
        return cljs$core$replace__2.call(this, smap, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$replace.cljs$core$IFn$_invoke$arity$1 = cljs$core$replace__1;
  cljs$core$replace.cljs$core$IFn$_invoke$arity$2 = cljs$core$replace__2;
  return cljs$core$replace;
}();
cljs.core.distinct = function() {
  var cljs$core$distinct = null;
  var cljs$core$distinct__0 = function() {
    return function(rf) {
      var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
      return function(seen) {
        return function() {
          var G__10068 = null;
          var G__10068__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__10068__1 = function(result) {
            var G__10058 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10058) : rf.call(null, G__10058);
          };
          var G__10068__2 = function(result, input) {
            if (cljs.core.contains_QMARK_(function() {
              var G__10059 = seen;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10059) : cljs.core.deref.call(null, G__10059);
            }(), input)) {
              return result;
            } else {
              seen.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen.cljs$core$IDeref$_deref$arity$1(null), input));
              var G__10060 = result;
              var G__10061 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10060, G__10061) : rf.call(null, G__10060, G__10061);
            }
          };
          G__10068 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__10068__0.call(this);
              case 1:
                return G__10068__1.call(this, result);
              case 2:
                return G__10068__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__10068.cljs$core$IFn$_invoke$arity$0 = G__10068__0;
          G__10068.cljs$core$IFn$_invoke$arity$1 = G__10068__1;
          G__10068.cljs$core$IFn$_invoke$arity$2 = G__10068__2;
          return G__10068;
        }();
      }(seen);
    };
  };
  var cljs$core$distinct__1 = function(coll) {
    var step = function cljs$core$distinct_$_step(xs, seen) {
      return new cljs.core.LazySeq(null, function() {
        return function(p__10066, seen__$1) {
          while (true) {
            var vec__10067 = p__10066;
            var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10067, 0, null);
            var xs__$1 = vec__10067;
            var temp__4126__auto__ = cljs.core.seq(xs__$1);
            if (temp__4126__auto__) {
              var s = temp__4126__auto__;
              if (cljs.core.contains_QMARK_(seen__$1, f)) {
                var G__10069 = cljs.core.rest(s);
                var G__10070 = seen__$1;
                p__10066 = G__10069;
                seen__$1 = G__10070;
                continue;
              } else {
                return cljs.core.cons(f, cljs$core$distinct_$_step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
              }
            } else {
              return null;
            }
            break;
          }
        }.call(null, xs, seen);
      }, null, null);
    };
    return step(coll, cljs.core.PersistentHashSet.EMPTY);
  };
  cljs$core$distinct = function(coll) {
    switch(arguments.length) {
      case 0:
        return cljs$core$distinct__0.call(this);
      case 1:
        return cljs$core$distinct__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$distinct.cljs$core$IFn$_invoke$arity$0 = cljs$core$distinct__0;
  cljs$core$distinct.cljs$core$IFn$_invoke$arity$1 = cljs$core$distinct__1;
  return cljs$core$distinct;
}();
cljs.core.butlast = function cljs$core$butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__10071 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__10072 = cljs.core.next(s__$1);
      ret = G__10071;
      s__$1 = G__10072;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function cljs$core$name(x) {
  if (function() {
    var G__10074 = x;
    if (G__10074) {
      var bit__4789__auto__ = G__10074.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4789__auto__ || G__10074.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function cljs$core$zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__10075 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__10076 = cljs.core.next(ks);
      var G__10077 = cljs.core.next(vs);
      map = G__10075;
      ks = G__10076;
      vs = G__10077;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var cljs$core$max_key = null;
  var cljs$core$max_key__2 = function(k, x) {
    return x;
  };
  var cljs$core$max_key__3 = function(k, x, y) {
    if (function() {
      var G__10088 = x;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__10088) : k.call(null, G__10088);
    }() > function() {
      var G__10089 = y;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__10089) : k.call(null, G__10089);
    }()) {
      return x;
    } else {
      return y;
    }
  };
  var cljs$core$max_key__4 = function() {
    var G__10090__delegate = function(k, x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10078_SHARP_, p2__10079_SHARP_) {
        return cljs$core$max_key.cljs$core$IFn$_invoke$arity$3(k, p1__10078_SHARP_, p2__10079_SHARP_);
      }, cljs$core$max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
    };
    var G__10090 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        var G__10091__i = 0, G__10091__a = new Array(arguments.length - 3);
        while (G__10091__i < G__10091__a.length) {
          G__10091__a[G__10091__i] = arguments[G__10091__i + 3];
          ++G__10091__i;
        }
        more = new cljs.core.IndexedSeq(G__10091__a, 0);
      }
      return G__10090__delegate.call(this, k, x, y, more);
    };
    G__10090.cljs$lang$maxFixedArity = 3;
    G__10090.cljs$lang$applyTo = function(arglist__10092) {
      var k = cljs.core.first(arglist__10092);
      arglist__10092 = cljs.core.next(arglist__10092);
      var x = cljs.core.first(arglist__10092);
      arglist__10092 = cljs.core.next(arglist__10092);
      var y = cljs.core.first(arglist__10092);
      var more = cljs.core.rest(arglist__10092);
      return G__10090__delegate(k, x, y, more);
    };
    G__10090.cljs$core$IFn$_invoke$arity$variadic = G__10090__delegate;
    return G__10090;
  }();
  cljs$core$max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$max_key__2.call(this, k, x);
      case 3:
        return cljs$core$max_key__3.call(this, k, x, y);
      default:
        var G__10093 = null;
        if (arguments.length > 3) {
          var G__10094__i = 0, G__10094__a = new Array(arguments.length - 3);
          while (G__10094__i < G__10094__a.length) {
            G__10094__a[G__10094__i] = arguments[G__10094__i + 3];
            ++G__10094__i;
          }
          G__10093 = new cljs.core.IndexedSeq(G__10094__a, 0);
        }
        return cljs$core$max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, G__10093);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$max_key.cljs$lang$maxFixedArity = 3;
  cljs$core$max_key.cljs$lang$applyTo = cljs$core$max_key__4.cljs$lang$applyTo;
  cljs$core$max_key.cljs$core$IFn$_invoke$arity$2 = cljs$core$max_key__2;
  cljs$core$max_key.cljs$core$IFn$_invoke$arity$3 = cljs$core$max_key__3;
  cljs$core$max_key.cljs$core$IFn$_invoke$arity$variadic = cljs$core$max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$max_key;
}();
cljs.core.min_key = function() {
  var cljs$core$min_key = null;
  var cljs$core$min_key__2 = function(k, x) {
    return x;
  };
  var cljs$core$min_key__3 = function(k, x, y) {
    if (function() {
      var G__10105 = x;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__10105) : k.call(null, G__10105);
    }() < function() {
      var G__10106 = y;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__10106) : k.call(null, G__10106);
    }()) {
      return x;
    } else {
      return y;
    }
  };
  var cljs$core$min_key__4 = function() {
    var G__10107__delegate = function(k, x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10095_SHARP_, p2__10096_SHARP_) {
        return cljs$core$min_key.cljs$core$IFn$_invoke$arity$3(k, p1__10095_SHARP_, p2__10096_SHARP_);
      }, cljs$core$min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
    };
    var G__10107 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        var G__10108__i = 0, G__10108__a = new Array(arguments.length - 3);
        while (G__10108__i < G__10108__a.length) {
          G__10108__a[G__10108__i] = arguments[G__10108__i + 3];
          ++G__10108__i;
        }
        more = new cljs.core.IndexedSeq(G__10108__a, 0);
      }
      return G__10107__delegate.call(this, k, x, y, more);
    };
    G__10107.cljs$lang$maxFixedArity = 3;
    G__10107.cljs$lang$applyTo = function(arglist__10109) {
      var k = cljs.core.first(arglist__10109);
      arglist__10109 = cljs.core.next(arglist__10109);
      var x = cljs.core.first(arglist__10109);
      arglist__10109 = cljs.core.next(arglist__10109);
      var y = cljs.core.first(arglist__10109);
      var more = cljs.core.rest(arglist__10109);
      return G__10107__delegate(k, x, y, more);
    };
    G__10107.cljs$core$IFn$_invoke$arity$variadic = G__10107__delegate;
    return G__10107;
  }();
  cljs$core$min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$min_key__2.call(this, k, x);
      case 3:
        return cljs$core$min_key__3.call(this, k, x, y);
      default:
        var G__10110 = null;
        if (arguments.length > 3) {
          var G__10111__i = 0, G__10111__a = new Array(arguments.length - 3);
          while (G__10111__i < G__10111__a.length) {
            G__10111__a[G__10111__i] = arguments[G__10111__i + 3];
            ++G__10111__i;
          }
          G__10110 = new cljs.core.IndexedSeq(G__10111__a, 0);
        }
        return cljs$core$min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, G__10110);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$min_key.cljs$lang$maxFixedArity = 3;
  cljs$core$min_key.cljs$lang$applyTo = cljs$core$min_key__4.cljs$lang$applyTo;
  cljs$core$min_key.cljs$core$IFn$_invoke$arity$2 = cljs$core$min_key__2;
  cljs$core$min_key.cljs$core$IFn$_invoke$arity$3 = cljs$core$min_key__3;
  cljs$core$min_key.cljs$core$IFn$_invoke$arity$variadic = cljs$core$min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$min_key;
}();
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function cljs$core$__GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function cljs$core$array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function() {
  var cljs$core$partition_all = null;
  var cljs$core$partition_all__1 = function(n) {
    return function(rf) {
      var a = cljs.core.array_list();
      return function(a) {
        return function() {
          var G__10128 = null;
          var G__10128__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__10128__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              return cljs.core.unreduced(function() {
                var G__10123 = result;
                var G__10124 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10123, G__10124) : rf.call(null, G__10123, G__10124);
              }());
            }();
            var G__10125 = result__$1;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10125) : rf.call(null, G__10125);
          };
          var G__10128__2 = function(result, input) {
            a.add(input);
            if (n === a.size()) {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              var G__10126 = result;
              var G__10127 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10126, G__10127) : rf.call(null, G__10126, G__10127);
            } else {
              return result;
            }
          };
          G__10128 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__10128__0.call(this);
              case 1:
                return G__10128__1.call(this, result);
              case 2:
                return G__10128__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__10128.cljs$core$IFn$_invoke$arity$0 = G__10128__0;
          G__10128.cljs$core$IFn$_invoke$arity$1 = G__10128__1;
          G__10128.cljs$core$IFn$_invoke$arity$2 = G__10128__2;
          return G__10128;
        }();
      }(a);
    };
  };
  var cljs$core$partition_all__2 = function(n, coll) {
    return cljs$core$partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
  };
  var cljs$core$partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), cljs$core$partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$partition_all__1.call(this, n);
      case 2:
        return cljs$core$partition_all__2.call(this, n, step);
      case 3:
        return cljs$core$partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$partition_all.cljs$core$IFn$_invoke$arity$1 = cljs$core$partition_all__1;
  cljs$core$partition_all.cljs$core$IFn$_invoke$arity$2 = cljs$core$partition_all__2;
  cljs$core$partition_all.cljs$core$IFn$_invoke$arity$3 = cljs$core$partition_all__3;
  return cljs$core$partition_all;
}();
cljs.core.take_while = function() {
  var cljs$core$take_while = null;
  var cljs$core$take_while__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__10141 = null;
        var G__10141__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10141__1 = function(result) {
          var G__10136 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10136) : rf.call(null, G__10136);
        };
        var G__10141__2 = function(result, input) {
          if (cljs.core.truth_(function() {
            var G__10137 = input;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__10137) : pred.call(null, G__10137);
          }())) {
            var G__10138 = result;
            var G__10139 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10138, G__10139) : rf.call(null, G__10138, G__10139);
          } else {
            return cljs.core.reduced(result);
          }
        };
        G__10141 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10141__0.call(this);
            case 1:
              return G__10141__1.call(this, result);
            case 2:
              return G__10141__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10141.cljs$core$IFn$_invoke$arity$0 = G__10141__0;
        G__10141.cljs$core$IFn$_invoke$arity$1 = G__10141__1;
        G__10141.cljs$core$IFn$_invoke$arity$2 = G__10141__2;
        return G__10141;
      }();
    };
  };
  var cljs$core$take_while__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.truth_(function() {
          var G__10140 = cljs.core.first(s);
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__10140) : pred.call(null, G__10140);
        }())) {
          return cljs.core.cons(cljs.core.first(s), cljs$core$take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$take_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$take_while__1.call(this, pred);
      case 2:
        return cljs$core$take_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$take_while.cljs$core$IFn$_invoke$arity$1 = cljs$core$take_while__1;
  cljs$core$take_while.cljs$core$IFn$_invoke$arity$2 = cljs$core$take_while__2;
  return cljs$core$take_while;
}();
cljs.core.mk_bound_fn = function cljs$core$mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__10146 = function() {
      var G__10148 = cljs.core._entry_key(sc, e);
      var G__10149 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__10148, G__10149) : comp.call(null, G__10148, G__10149);
    }();
    var G__10147 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__10146, G__10147) : test.call(null, G__10146, G__10147);
  };
};
cljs.core.subseq = function() {
  var cljs$core$subseq = null;
  var cljs$core$subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn(sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__10153 = temp__4126__auto__;
        var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10153, 0, null);
        var s = vec__10153;
        if (cljs.core.truth_(function() {
          var G__10154 = e;
          return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__10154) : include.call(null, G__10154);
        }())) {
          return s;
        } else {
          return cljs.core.next(s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
    }
  };
  var cljs$core$subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__10155 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10155, 0, null);
      var s = vec__10155;
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
    } else {
      return null;
    }
  };
  cljs$core$subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return cljs$core$subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return cljs$core$subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$subseq.cljs$core$IFn$_invoke$arity$3 = cljs$core$subseq__3;
  cljs$core$subseq.cljs$core$IFn$_invoke$arity$5 = cljs$core$subseq__5;
  return cljs$core$subseq;
}();
cljs.core.rsubseq = function() {
  var cljs$core$rsubseq = null;
  var cljs$core$rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn(sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__10159 = temp__4126__auto__;
        var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10159, 0, null);
        var s = vec__10159;
        if (cljs.core.truth_(function() {
          var G__10160 = e;
          return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__10160) : include.call(null, G__10160);
        }())) {
          return s;
        } else {
          return cljs.core.next(s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
    }
  };
  var cljs$core$rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__10161 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10161, 0, null);
      var s = vec__10161;
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
    } else {
      return null;
    }
  };
  cljs$core$rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return cljs$core$rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return cljs$core$rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$rsubseq.cljs$core$IFn$_invoke$arity$3 = cljs$core$rsubseq__3;
  cljs$core$rsubseq.cljs$core$IFn$_invoke$arity$5 = cljs$core$rsubseq__5;
  return cljs$core$rsubseq;
}();
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function cljs$core$__GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__10162 = (self__.end - self__.start) / self__.step;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__10162) : Math.ceil.call(null, G__10162);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = function() {
        var G__10163 = ret;
        var G__10164 = i;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10163, G__10164) : f.call(null, G__10163, G__10164);
      }();
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        var G__10165 = ret__$1;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10165) : cljs.core.deref.call(null, G__10165);
      } else {
        var G__10166 = i + self__.step;
        var G__10167 = ret__$1;
        i = G__10166;
        ret = G__10167;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function cljs$core$__GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.range = function() {
  var cljs$core$range = null;
  var cljs$core$range__0 = function() {
    return cljs$core$range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
  };
  var cljs$core$range__1 = function(end) {
    return cljs$core$range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
  };
  var cljs$core$range__2 = function(start, end) {
    return cljs$core$range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
  };
  var cljs$core$range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  cljs$core$range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return cljs$core$range__0.call(this);
      case 1:
        return cljs$core$range__1.call(this, start);
      case 2:
        return cljs$core$range__2.call(this, start, end);
      case 3:
        return cljs$core$range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$range.cljs$core$IFn$_invoke$arity$0 = cljs$core$range__0;
  cljs$core$range.cljs$core$IFn$_invoke$arity$1 = cljs$core$range__1;
  cljs$core$range.cljs$core$IFn$_invoke$arity$2 = cljs$core$range__2;
  cljs$core$range.cljs$core$IFn$_invoke$arity$3 = cljs$core$range__3;
  return cljs$core$range;
}();
cljs.core.take_nth = function() {
  var cljs$core$take_nth = null;
  var cljs$core$take_nth__1 = function(n) {
    return function(rf) {
      var ia = cljs.core.volatile_BANG_(-1);
      return function(ia) {
        return function() {
          var G__10185 = null;
          var G__10185__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__10185__1 = function(result) {
            var G__10182 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10182) : rf.call(null, G__10182);
          };
          var G__10185__2 = function(result, input) {
            var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
            if (cljs.core.rem(i, n) === 0) {
              var G__10183 = result;
              var G__10184 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10183, G__10184) : rf.call(null, G__10183, G__10184);
            } else {
              return result;
            }
          };
          G__10185 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__10185__0.call(this);
              case 1:
                return G__10185__1.call(this, result);
              case 2:
                return G__10185__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__10185.cljs$core$IFn$_invoke$arity$0 = G__10185__0;
          G__10185.cljs$core$IFn$_invoke$arity$1 = G__10185__1;
          G__10185.cljs$core$IFn$_invoke$arity$2 = G__10185__2;
          return G__10185;
        }();
      }(ia);
    };
  };
  var cljs$core$take_nth__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.first(s), cljs$core$take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$take_nth = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$take_nth__1.call(this, n);
      case 2:
        return cljs$core$take_nth__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$take_nth.cljs$core$IFn$_invoke$arity$1 = cljs$core$take_nth__1;
  cljs$core$take_nth.cljs$core$IFn$_invoke$arity$2 = cljs$core$take_nth__2;
  return cljs$core$take_nth;
}();
cljs.core.split_with = function cljs$core$split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function() {
  var cljs$core$partition_by = null;
  var cljs$core$partition_by__1 = function(f) {
    return function(rf) {
      var a = cljs.core.array_list();
      var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(a, pa) {
        return function() {
          var G__10207 = null;
          var G__10207__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__10207__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              return cljs.core.unreduced(function() {
                var G__10198 = result;
                var G__10199 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10198, G__10199) : rf.call(null, G__10198, G__10199);
              }());
            }();
            var G__10200 = result__$1;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10200) : rf.call(null, G__10200);
          };
          var G__10207__2 = function(result, input) {
            var pval = function() {
              var G__10201 = pa;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10201) : cljs.core.deref.call(null, G__10201);
            }();
            var val = function() {
              var G__10202 = input;
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10202) : f.call(null, G__10202);
            }();
            cljs.core.vreset_BANG_(pa, val);
            if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
              a.add(input);
              return result;
            } else {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              var ret = function() {
                var G__10203 = result;
                var G__10204 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10203, G__10204) : rf.call(null, G__10203, G__10204);
              }();
              if (cljs.core.reduced_QMARK_(ret)) {
              } else {
                a.add(input);
              }
              return ret;
            }
          };
          G__10207 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__10207__0.call(this);
              case 1:
                return G__10207__1.call(this, result);
              case 2:
                return G__10207__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__10207.cljs$core$IFn$_invoke$arity$0 = G__10207__0;
          G__10207.cljs$core$IFn$_invoke$arity$1 = G__10207__1;
          G__10207.cljs$core$IFn$_invoke$arity$2 = G__10207__2;
          return G__10207;
        }();
      }(a, pa);
    };
  };
  var cljs$core$partition_by__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var fst = cljs.core.first(s);
        var fv = function() {
          var G__10205 = fst;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10205) : f.call(null, G__10205);
        }();
        var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4126__auto__) {
          return function(p1__10186_SHARP_) {
            return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, function() {
              var G__10206 = p1__10186_SHARP_;
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10206) : f.call(null, G__10206);
            }());
          };
        }(fst, fv, s, temp__4126__auto__), cljs.core.next(s)));
        return cljs.core.cons(run, cljs$core$partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$partition_by = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$partition_by__1.call(this, f);
      case 2:
        return cljs$core$partition_by__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$partition_by.cljs$core$IFn$_invoke$arity$1 = cljs$core$partition_by__1;
  cljs$core$partition_by.cljs$core$IFn$_invoke$arity$2 = cljs$core$partition_by__2;
  return cljs$core$partition_by;
}();
cljs.core.frequencies = function cljs$core$frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var cljs$core$reductions = null;
  var cljs$core$reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return cljs$core$reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }());
      }
    }, null, null);
  };
  var cljs$core$reductions__3 = function(f, init, coll) {
    return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs$core$reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
          var G__10216 = init;
          var G__10217 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10216, G__10217) : f.call(null, G__10216, G__10217);
        }(), cljs.core.rest(s));
      } else {
        return null;
      }
    }, null, null));
  };
  cljs$core$reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return cljs$core$reductions__2.call(this, f, init);
      case 3:
        return cljs$core$reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$reductions.cljs$core$IFn$_invoke$arity$2 = cljs$core$reductions__2;
  cljs$core$reductions.cljs$core$IFn$_invoke$arity$3 = cljs$core$reductions__3;
  return cljs$core$reductions;
}();
cljs.core.juxt = function() {
  var cljs$core$juxt = null;
  var cljs$core$juxt__1 = function(f) {
    return function() {
      var G__10312 = null;
      var G__10312__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }()], null);
      };
      var G__10312__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10270 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10270) : f.call(null, G__10270);
        }()], null);
      };
      var G__10312__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10271 = x;
          var G__10272 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10271, G__10272) : f.call(null, G__10271, G__10272);
        }()], null);
      };
      var G__10312__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10273 = x;
          var G__10274 = y;
          var G__10275 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10273, G__10274, G__10275) : f.call(null, G__10273, G__10274, G__10275);
        }()], null);
      };
      var G__10312__4 = function() {
        var G__10313__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
        };
        var G__10313 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__10314__i = 0, G__10314__a = new Array(arguments.length - 3);
            while (G__10314__i < G__10314__a.length) {
              G__10314__a[G__10314__i] = arguments[G__10314__i + 3];
              ++G__10314__i;
            }
            args = new cljs.core.IndexedSeq(G__10314__a, 0);
          }
          return G__10313__delegate.call(this, x, y, z, args);
        };
        G__10313.cljs$lang$maxFixedArity = 3;
        G__10313.cljs$lang$applyTo = function(arglist__10315) {
          var x = cljs.core.first(arglist__10315);
          arglist__10315 = cljs.core.next(arglist__10315);
          var y = cljs.core.first(arglist__10315);
          arglist__10315 = cljs.core.next(arglist__10315);
          var z = cljs.core.first(arglist__10315);
          var args = cljs.core.rest(arglist__10315);
          return G__10313__delegate(x, y, z, args);
        };
        G__10313.cljs$core$IFn$_invoke$arity$variadic = G__10313__delegate;
        return G__10313;
      }();
      G__10312 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__10312__0.call(this);
          case 1:
            return G__10312__1.call(this, x);
          case 2:
            return G__10312__2.call(this, x, y);
          case 3:
            return G__10312__3.call(this, x, y, z);
          default:
            var G__10316 = null;
            if (arguments.length > 3) {
              var G__10317__i = 0, G__10317__a = new Array(arguments.length - 3);
              while (G__10317__i < G__10317__a.length) {
                G__10317__a[G__10317__i] = arguments[G__10317__i + 3];
                ++G__10317__i;
              }
              G__10316 = new cljs.core.IndexedSeq(G__10317__a, 0);
            }
            return G__10312__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10316);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10312.cljs$lang$maxFixedArity = 3;
      G__10312.cljs$lang$applyTo = G__10312__4.cljs$lang$applyTo;
      G__10312.cljs$core$IFn$_invoke$arity$0 = G__10312__0;
      G__10312.cljs$core$IFn$_invoke$arity$1 = G__10312__1;
      G__10312.cljs$core$IFn$_invoke$arity$2 = G__10312__2;
      G__10312.cljs$core$IFn$_invoke$arity$3 = G__10312__3;
      G__10312.cljs$core$IFn$_invoke$arity$variadic = G__10312__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__10312;
    }();
  };
  var cljs$core$juxt__2 = function(f, g) {
    return function() {
      var G__10318 = null;
      var G__10318__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }(), function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }()], null);
      };
      var G__10318__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10276 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10276) : f.call(null, G__10276);
        }(), function() {
          var G__10277 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__10277) : g.call(null, G__10277);
        }()], null);
      };
      var G__10318__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10278 = x;
          var G__10279 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10278, G__10279) : f.call(null, G__10278, G__10279);
        }(), function() {
          var G__10280 = x;
          var G__10281 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__10280, G__10281) : g.call(null, G__10280, G__10281);
        }()], null);
      };
      var G__10318__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10282 = x;
          var G__10283 = y;
          var G__10284 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10282, G__10283, G__10284) : f.call(null, G__10282, G__10283, G__10284);
        }(), function() {
          var G__10285 = x;
          var G__10286 = y;
          var G__10287 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__10285, G__10286, G__10287) : g.call(null, G__10285, G__10286, G__10287);
        }()], null);
      };
      var G__10318__4 = function() {
        var G__10319__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
        };
        var G__10319 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__10320__i = 0, G__10320__a = new Array(arguments.length - 3);
            while (G__10320__i < G__10320__a.length) {
              G__10320__a[G__10320__i] = arguments[G__10320__i + 3];
              ++G__10320__i;
            }
            args = new cljs.core.IndexedSeq(G__10320__a, 0);
          }
          return G__10319__delegate.call(this, x, y, z, args);
        };
        G__10319.cljs$lang$maxFixedArity = 3;
        G__10319.cljs$lang$applyTo = function(arglist__10321) {
          var x = cljs.core.first(arglist__10321);
          arglist__10321 = cljs.core.next(arglist__10321);
          var y = cljs.core.first(arglist__10321);
          arglist__10321 = cljs.core.next(arglist__10321);
          var z = cljs.core.first(arglist__10321);
          var args = cljs.core.rest(arglist__10321);
          return G__10319__delegate(x, y, z, args);
        };
        G__10319.cljs$core$IFn$_invoke$arity$variadic = G__10319__delegate;
        return G__10319;
      }();
      G__10318 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__10318__0.call(this);
          case 1:
            return G__10318__1.call(this, x);
          case 2:
            return G__10318__2.call(this, x, y);
          case 3:
            return G__10318__3.call(this, x, y, z);
          default:
            var G__10322 = null;
            if (arguments.length > 3) {
              var G__10323__i = 0, G__10323__a = new Array(arguments.length - 3);
              while (G__10323__i < G__10323__a.length) {
                G__10323__a[G__10323__i] = arguments[G__10323__i + 3];
                ++G__10323__i;
              }
              G__10322 = new cljs.core.IndexedSeq(G__10323__a, 0);
            }
            return G__10318__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10322);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10318.cljs$lang$maxFixedArity = 3;
      G__10318.cljs$lang$applyTo = G__10318__4.cljs$lang$applyTo;
      G__10318.cljs$core$IFn$_invoke$arity$0 = G__10318__0;
      G__10318.cljs$core$IFn$_invoke$arity$1 = G__10318__1;
      G__10318.cljs$core$IFn$_invoke$arity$2 = G__10318__2;
      G__10318.cljs$core$IFn$_invoke$arity$3 = G__10318__3;
      G__10318.cljs$core$IFn$_invoke$arity$variadic = G__10318__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__10318;
    }();
  };
  var cljs$core$juxt__3 = function(f, g, h) {
    return function() {
      var G__10324 = null;
      var G__10324__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }(), function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }(), function() {
          return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        }()], null);
      };
      var G__10324__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10288 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10288) : f.call(null, G__10288);
        }(), function() {
          var G__10289 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__10289) : g.call(null, G__10289);
        }(), function() {
          var G__10290 = x;
          return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__10290) : h.call(null, G__10290);
        }()], null);
      };
      var G__10324__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10291 = x;
          var G__10292 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10291, G__10292) : f.call(null, G__10291, G__10292);
        }(), function() {
          var G__10293 = x;
          var G__10294 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__10293, G__10294) : g.call(null, G__10293, G__10294);
        }(), function() {
          var G__10295 = x;
          var G__10296 = y;
          return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__10295, G__10296) : h.call(null, G__10295, G__10296);
        }()], null);
      };
      var G__10324__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10297 = x;
          var G__10298 = y;
          var G__10299 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10297, G__10298, G__10299) : f.call(null, G__10297, G__10298, G__10299);
        }(), function() {
          var G__10300 = x;
          var G__10301 = y;
          var G__10302 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__10300, G__10301, G__10302) : g.call(null, G__10300, G__10301, G__10302);
        }(), function() {
          var G__10303 = x;
          var G__10304 = y;
          var G__10305 = z;
          return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__10303, G__10304, G__10305) : h.call(null, G__10303, G__10304, G__10305);
        }()], null);
      };
      var G__10324__4 = function() {
        var G__10325__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
        };
        var G__10325 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__10326__i = 0, G__10326__a = new Array(arguments.length - 3);
            while (G__10326__i < G__10326__a.length) {
              G__10326__a[G__10326__i] = arguments[G__10326__i + 3];
              ++G__10326__i;
            }
            args = new cljs.core.IndexedSeq(G__10326__a, 0);
          }
          return G__10325__delegate.call(this, x, y, z, args);
        };
        G__10325.cljs$lang$maxFixedArity = 3;
        G__10325.cljs$lang$applyTo = function(arglist__10327) {
          var x = cljs.core.first(arglist__10327);
          arglist__10327 = cljs.core.next(arglist__10327);
          var y = cljs.core.first(arglist__10327);
          arglist__10327 = cljs.core.next(arglist__10327);
          var z = cljs.core.first(arglist__10327);
          var args = cljs.core.rest(arglist__10327);
          return G__10325__delegate(x, y, z, args);
        };
        G__10325.cljs$core$IFn$_invoke$arity$variadic = G__10325__delegate;
        return G__10325;
      }();
      G__10324 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__10324__0.call(this);
          case 1:
            return G__10324__1.call(this, x);
          case 2:
            return G__10324__2.call(this, x, y);
          case 3:
            return G__10324__3.call(this, x, y, z);
          default:
            var G__10328 = null;
            if (arguments.length > 3) {
              var G__10329__i = 0, G__10329__a = new Array(arguments.length - 3);
              while (G__10329__i < G__10329__a.length) {
                G__10329__a[G__10329__i] = arguments[G__10329__i + 3];
                ++G__10329__i;
              }
              G__10328 = new cljs.core.IndexedSeq(G__10329__a, 0);
            }
            return G__10324__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10328);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10324.cljs$lang$maxFixedArity = 3;
      G__10324.cljs$lang$applyTo = G__10324__4.cljs$lang$applyTo;
      G__10324.cljs$core$IFn$_invoke$arity$0 = G__10324__0;
      G__10324.cljs$core$IFn$_invoke$arity$1 = G__10324__1;
      G__10324.cljs$core$IFn$_invoke$arity$2 = G__10324__2;
      G__10324.cljs$core$IFn$_invoke$arity$3 = G__10324__3;
      G__10324.cljs$core$IFn$_invoke$arity$variadic = G__10324__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__10324;
    }();
  };
  var cljs$core$juxt__4 = function() {
    var G__10330__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__10331 = null;
          var G__10331__0 = function() {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__10218_SHARP_, p2__10219_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10218_SHARP_, function() {
                  return p2__10219_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__10219_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__10219_SHARP_.call(null);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__10331__1 = function(x) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__10220_SHARP_, p2__10221_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10220_SHARP_, function() {
                  var G__10306 = x;
                  return p2__10221_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__10221_SHARP_.cljs$core$IFn$_invoke$arity$1(G__10306) : p2__10221_SHARP_.call(null, G__10306);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__10331__2 = function(x, y) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__10222_SHARP_, p2__10223_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10222_SHARP_, function() {
                  var G__10307 = x;
                  var G__10308 = y;
                  return p2__10223_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__10223_SHARP_.cljs$core$IFn$_invoke$arity$2(G__10307, G__10308) : p2__10223_SHARP_.call(null, G__10307, G__10308);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__10331__3 = function(x, y, z) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__10224_SHARP_, p2__10225_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10224_SHARP_, function() {
                  var G__10309 = x;
                  var G__10310 = y;
                  var G__10311 = z;
                  return p2__10225_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__10225_SHARP_.cljs$core$IFn$_invoke$arity$3(G__10309, G__10310, G__10311) : p2__10225_SHARP_.call(null, G__10309, G__10310, G__10311);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__10331__4 = function() {
            var G__10332__delegate = function(x, y, z, args) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
                return function(p1__10226_SHARP_, p2__10227_SHARP_) {
                  return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10226_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__10227_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__10332 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__10333__i = 0, G__10333__a = new Array(arguments.length - 3);
                while (G__10333__i < G__10333__a.length) {
                  G__10333__a[G__10333__i] = arguments[G__10333__i + 3];
                  ++G__10333__i;
                }
                args = new cljs.core.IndexedSeq(G__10333__a, 0);
              }
              return G__10332__delegate.call(this, x, y, z, args);
            };
            G__10332.cljs$lang$maxFixedArity = 3;
            G__10332.cljs$lang$applyTo = function(arglist__10334) {
              var x = cljs.core.first(arglist__10334);
              arglist__10334 = cljs.core.next(arglist__10334);
              var y = cljs.core.first(arglist__10334);
              arglist__10334 = cljs.core.next(arglist__10334);
              var z = cljs.core.first(arglist__10334);
              var args = cljs.core.rest(arglist__10334);
              return G__10332__delegate(x, y, z, args);
            };
            G__10332.cljs$core$IFn$_invoke$arity$variadic = G__10332__delegate;
            return G__10332;
          }();
          G__10331 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__10331__0.call(this);
              case 1:
                return G__10331__1.call(this, x);
              case 2:
                return G__10331__2.call(this, x, y);
              case 3:
                return G__10331__3.call(this, x, y, z);
              default:
                var G__10335 = null;
                if (arguments.length > 3) {
                  var G__10336__i = 0, G__10336__a = new Array(arguments.length - 3);
                  while (G__10336__i < G__10336__a.length) {
                    G__10336__a[G__10336__i] = arguments[G__10336__i + 3];
                    ++G__10336__i;
                  }
                  G__10335 = new cljs.core.IndexedSeq(G__10336__a, 0);
                }
                return G__10331__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10335);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__10331.cljs$lang$maxFixedArity = 3;
          G__10331.cljs$lang$applyTo = G__10331__4.cljs$lang$applyTo;
          G__10331.cljs$core$IFn$_invoke$arity$0 = G__10331__0;
          G__10331.cljs$core$IFn$_invoke$arity$1 = G__10331__1;
          G__10331.cljs$core$IFn$_invoke$arity$2 = G__10331__2;
          G__10331.cljs$core$IFn$_invoke$arity$3 = G__10331__3;
          G__10331.cljs$core$IFn$_invoke$arity$variadic = G__10331__4.cljs$core$IFn$_invoke$arity$variadic;
          return G__10331;
        }();
      }(fs__$1);
    };
    var G__10330 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        var G__10337__i = 0, G__10337__a = new Array(arguments.length - 3);
        while (G__10337__i < G__10337__a.length) {
          G__10337__a[G__10337__i] = arguments[G__10337__i + 3];
          ++G__10337__i;
        }
        fs = new cljs.core.IndexedSeq(G__10337__a, 0);
      }
      return G__10330__delegate.call(this, f, g, h, fs);
    };
    G__10330.cljs$lang$maxFixedArity = 3;
    G__10330.cljs$lang$applyTo = function(arglist__10338) {
      var f = cljs.core.first(arglist__10338);
      arglist__10338 = cljs.core.next(arglist__10338);
      var g = cljs.core.first(arglist__10338);
      arglist__10338 = cljs.core.next(arglist__10338);
      var h = cljs.core.first(arglist__10338);
      var fs = cljs.core.rest(arglist__10338);
      return G__10330__delegate(f, g, h, fs);
    };
    G__10330.cljs$core$IFn$_invoke$arity$variadic = G__10330__delegate;
    return G__10330;
  }();
  cljs$core$juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$juxt__1.call(this, f);
      case 2:
        return cljs$core$juxt__2.call(this, f, g);
      case 3:
        return cljs$core$juxt__3.call(this, f, g, h);
      default:
        var G__10339 = null;
        if (arguments.length > 3) {
          var G__10340__i = 0, G__10340__a = new Array(arguments.length - 3);
          while (G__10340__i < G__10340__a.length) {
            G__10340__a[G__10340__i] = arguments[G__10340__i + 3];
            ++G__10340__i;
          }
          G__10339 = new cljs.core.IndexedSeq(G__10340__a, 0);
        }
        return cljs$core$juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, G__10339);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$juxt.cljs$lang$maxFixedArity = 3;
  cljs$core$juxt.cljs$lang$applyTo = cljs$core$juxt__4.cljs$lang$applyTo;
  cljs$core$juxt.cljs$core$IFn$_invoke$arity$1 = cljs$core$juxt__1;
  cljs$core$juxt.cljs$core$IFn$_invoke$arity$2 = cljs$core$juxt__2;
  cljs$core$juxt.cljs$core$IFn$_invoke$arity$3 = cljs$core$juxt__3;
  cljs$core$juxt.cljs$core$IFn$_invoke$arity$variadic = cljs$core$juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$juxt;
}();
cljs.core.dorun = function() {
  var cljs$core$dorun = null;
  var cljs$core$dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq(coll)) {
        var G__10341 = cljs.core.next(coll);
        coll = G__10341;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var cljs$core$dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq(coll) && n > 0) {
        var G__10342 = n - 1;
        var G__10343 = cljs.core.next(coll);
        n = G__10342;
        coll = G__10343;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  cljs$core$dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$dorun__1.call(this, n);
      case 2:
        return cljs$core$dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$dorun.cljs$core$IFn$_invoke$arity$1 = cljs$core$dorun__1;
  cljs$core$dorun.cljs$core$IFn$_invoke$arity$2 = cljs$core$dorun__2;
  return cljs$core$dorun;
}();
cljs.core.doall = function() {
  var cljs$core$doall = null;
  var cljs$core$doall__1 = function(coll) {
    cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
    return coll;
  };
  var cljs$core$doall__2 = function(n, coll) {
    cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
    return coll;
  };
  cljs$core$doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$doall__1.call(this, n);
      case 2:
        return cljs$core$doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$doall.cljs$core$IFn$_invoke$arity$1 = cljs$core$doall__1;
  cljs$core$doall.cljs$core$IFn$_invoke$arity$2 = cljs$core$doall__2;
  return cljs$core$doall;
}();
cljs.core.regexp_QMARK_ = function cljs$core$regexp_QMARK_(x) {
  return x instanceof RegExp;
};
cljs.core.re_matches = function cljs$core$re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function cljs$core$re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function cljs$core$re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? cljs$core$re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function cljs$core$re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__10347 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s);
    var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10347, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10347, 1, null);
    var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, cljs.core.count(prefix));
    return new RegExp(pattern, function() {
      var or__4122__auto__ = flags;
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return "";
      }
    }());
  }
};
cljs.core.pr_sequential_writer = function cljs$core$pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_10355 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__4122__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__4122__auto__)) {
              return or__4122__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__10356_10362 = cljs.core.first(coll);
          var G__10357_10363 = writer;
          var G__10358_10364 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10356_10362, G__10357_10363, G__10358_10364) : print_one.call(null, G__10356_10362, G__10357_10363, G__10358_10364);
        } else {
        }
        var coll_10365__$1 = cljs.core.next(coll);
        var n_10366 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_10365__$1 && (n_10366 == null || !(n_10366 === 0))) {
            cljs.core._write(writer, sep);
            var G__10359_10367 = cljs.core.first(coll_10365__$1);
            var G__10360_10368 = writer;
            var G__10361_10369 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10359_10367, G__10360_10368, G__10361_10369) : print_one.call(null, G__10359_10367, G__10360_10368, G__10361_10369);
            var G__10370 = cljs.core.next(coll_10365__$1);
            var G__10371 = n_10366 - 1;
            coll_10365__$1 = G__10370;
            n_10366 = G__10371;
            continue;
          } else {
            if (cljs.core.seq(coll_10365__$1) && n_10366 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__4122__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__4122__auto__)) {
                  return or__4122__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_10355;
  }
};
cljs.core.write_all = function() {
  var cljs$core$write_all__delegate = function(writer, ss) {
    var seq__10376 = cljs.core.seq(ss);
    var chunk__10377 = null;
    var count__10378 = 0;
    var i__10379 = 0;
    while (true) {
      if (i__10379 < count__10378) {
        var s = chunk__10377.cljs$core$IIndexed$_nth$arity$2(null, i__10379);
        cljs.core._write(writer, s);
        var G__10380 = seq__10376;
        var G__10381 = chunk__10377;
        var G__10382 = count__10378;
        var G__10383 = i__10379 + 1;
        seq__10376 = G__10380;
        chunk__10377 = G__10381;
        count__10378 = G__10382;
        i__10379 = G__10383;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq(seq__10376);
        if (temp__4126__auto__) {
          var seq__10376__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(seq__10376__$1)) {
            var c__4907__auto__ = cljs.core.chunk_first(seq__10376__$1);
            var G__10384 = cljs.core.chunk_rest(seq__10376__$1);
            var G__10385 = c__4907__auto__;
            var G__10386 = cljs.core.count(c__4907__auto__);
            var G__10387 = 0;
            seq__10376 = G__10384;
            chunk__10377 = G__10385;
            count__10378 = G__10386;
            i__10379 = G__10387;
            continue;
          } else {
            var s = cljs.core.first(seq__10376__$1);
            cljs.core._write(writer, s);
            var G__10388 = cljs.core.next(seq__10376__$1);
            var G__10389 = null;
            var G__10390 = 0;
            var G__10391 = 0;
            seq__10376 = G__10388;
            chunk__10377 = G__10389;
            count__10378 = G__10390;
            i__10379 = G__10391;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var cljs$core$write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      var G__10392__i = 0, G__10392__a = new Array(arguments.length - 1);
      while (G__10392__i < G__10392__a.length) {
        G__10392__a[G__10392__i] = arguments[G__10392__i + 1];
        ++G__10392__i;
      }
      ss = new cljs.core.IndexedSeq(G__10392__a, 0);
    }
    return cljs$core$write_all__delegate.call(this, writer, ss);
  };
  cljs$core$write_all.cljs$lang$maxFixedArity = 1;
  cljs$core$write_all.cljs$lang$applyTo = function(arglist__10393) {
    var writer = cljs.core.first(arglist__10393);
    var ss = cljs.core.rest(arglist__10393);
    return cljs$core$write_all__delegate(writer, ss);
  };
  cljs$core$write_all.cljs$core$IFn$_invoke$arity$variadic = cljs$core$write_all__delegate;
  return cljs$core$write_all;
}();
cljs.core.string_print = function cljs$core$string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function cljs$core$flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj10395 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj10395;
}();
cljs.core.quote_string = function cljs$core$quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(function() {
    var G__10398 = '[\\\\"\b\f\n\r\t]';
    var G__10399 = "g";
    return RegExp(G__10398, G__10399);
  }(), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer_impl = function cljs$core$pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write(writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__4110__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__4110__auto__)) {
          var and__4110__auto____$1 = function() {
            var G__10413 = obj;
            if (G__10413) {
              var bit__4796__auto__ = G__10413.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4796__auto__ || G__10413.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__10413.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__10413);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__10413);
            }
          }();
          if (and__4110__auto____$1) {
            return cljs.core.meta(obj);
          } else {
            return and__4110__auto____$1;
          }
        } else {
          return and__4110__auto__;
        }
      }())) {
        cljs.core._write(writer, "^");
        var G__10414_10424 = cljs.core.meta(obj);
        var G__10415_10425 = writer;
        var G__10416_10426 = opts;
        cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__10414_10424, G__10415_10425, G__10416_10426) : cljs.core.pr_writer.call(null, G__10414_10424, G__10415_10425, G__10416_10426);
        cljs.core._write(writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write(writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__10417 = obj;
            if (G__10417) {
              var bit__4789__auto__ = G__10417.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4789__auto__ || G__10417.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
          } else {
            if (cljs.core.type(obj) === Boolean || typeof obj === "number") {
              return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
            } else {
              if (cljs.core.object_QMARK_(obj)) {
                cljs.core._write(writer, "#js ");
                var G__10418 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
                }, cljs.core.js_keys(obj));
                var G__10419 = cljs.core.pr_writer;
                var G__10420 = writer;
                var G__10421 = opts;
                return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__10418, G__10419, G__10420, G__10421) : cljs.core.print_map.call(null, G__10418, G__10419, G__10420, G__10421);
              } else {
                if (cljs.core.array_QMARK_(obj)) {
                  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (cljs.core.truth_(function() {
                    var G__10422 = obj;
                    return goog.isString(G__10422);
                  }())) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write(writer, cljs.core.quote_string(obj));
                    } else {
                      return cljs.core._write(writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while (true) {
                            if (cljs.core.count(ns) < len) {
                              var G__10427 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__10427;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                      } else {
                        if (cljs.core.regexp_QMARK_(obj)) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                        } else {
                          if (function() {
                            var G__10423 = obj;
                            if (G__10423) {
                              var bit__4796__auto__ = G__10423.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4796__auto__ || G__10423.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__10423.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__10423);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__10423);
                            }
                          }()) {
                            return cljs.core._pr_writer(obj, writer, opts);
                          } else {
                            return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function cljs$core$pr_writer(obj, writer, opts) {
  var temp__4124__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var alt_impl = temp__4124__auto__;
    var G__10431 = obj;
    var G__10432 = writer;
    var G__10433 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__10431, G__10432, G__10433) : alt_impl.call(null, G__10431, G__10432, G__10433);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function cljs$core$pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__10438 = cljs.core.seq(cljs.core.next(objs));
  var chunk__10439 = null;
  var count__10440 = 0;
  var i__10441 = 0;
  while (true) {
    if (i__10441 < count__10440) {
      var obj = chunk__10439.cljs$core$IIndexed$_nth$arity$2(null, i__10441);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__10442 = seq__10438;
      var G__10443 = chunk__10439;
      var G__10444 = count__10440;
      var G__10445 = i__10441 + 1;
      seq__10438 = G__10442;
      chunk__10439 = G__10443;
      count__10440 = G__10444;
      i__10441 = G__10445;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__10438);
      if (temp__4126__auto__) {
        var seq__10438__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10438__$1)) {
          var c__4907__auto__ = cljs.core.chunk_first(seq__10438__$1);
          var G__10446 = cljs.core.chunk_rest(seq__10438__$1);
          var G__10447 = c__4907__auto__;
          var G__10448 = cljs.core.count(c__4907__auto__);
          var G__10449 = 0;
          seq__10438 = G__10446;
          chunk__10439 = G__10447;
          count__10440 = G__10448;
          i__10441 = G__10449;
          continue;
        } else {
          var obj = cljs.core.first(seq__10438__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__10450 = cljs.core.next(seq__10438__$1);
          var G__10451 = null;
          var G__10452 = 0;
          var G__10453 = 0;
          seq__10438 = G__10450;
          chunk__10439 = G__10451;
          count__10440 = G__10452;
          i__10441 = G__10453;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function cljs$core$pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function cljs$core$pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function cljs$core$prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function cljs$core$pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function cljs$core$newline(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var cljs$core$pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
  };
  var cljs$core$pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10454__i = 0, G__10454__a = new Array(arguments.length - 0);
      while (G__10454__i < G__10454__a.length) {
        G__10454__a[G__10454__i] = arguments[G__10454__i + 0];
        ++G__10454__i;
      }
      objs = new cljs.core.IndexedSeq(G__10454__a, 0);
    }
    return cljs$core$pr_str__delegate.call(this, objs);
  };
  cljs$core$pr_str.cljs$lang$maxFixedArity = 0;
  cljs$core$pr_str.cljs$lang$applyTo = function(arglist__10455) {
    var objs = cljs.core.seq(arglist__10455);
    return cljs$core$pr_str__delegate(objs);
  };
  cljs$core$pr_str.cljs$core$IFn$_invoke$arity$variadic = cljs$core$pr_str__delegate;
  return cljs$core$pr_str;
}();
cljs.core.prn_str = function() {
  var cljs$core$prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
  };
  var cljs$core$prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10456__i = 0, G__10456__a = new Array(arguments.length - 0);
      while (G__10456__i < G__10456__a.length) {
        G__10456__a[G__10456__i] = arguments[G__10456__i + 0];
        ++G__10456__i;
      }
      objs = new cljs.core.IndexedSeq(G__10456__a, 0);
    }
    return cljs$core$prn_str__delegate.call(this, objs);
  };
  cljs$core$prn_str.cljs$lang$maxFixedArity = 0;
  cljs$core$prn_str.cljs$lang$applyTo = function(arglist__10457) {
    var objs = cljs.core.seq(arglist__10457);
    return cljs$core$prn_str__delegate(objs);
  };
  cljs$core$prn_str.cljs$core$IFn$_invoke$arity$variadic = cljs$core$prn_str__delegate;
  return cljs$core$prn_str;
}();
cljs.core.pr = function() {
  var cljs$core$pr__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  };
  var cljs$core$pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10458__i = 0, G__10458__a = new Array(arguments.length - 0);
      while (G__10458__i < G__10458__a.length) {
        G__10458__a[G__10458__i] = arguments[G__10458__i + 0];
        ++G__10458__i;
      }
      objs = new cljs.core.IndexedSeq(G__10458__a, 0);
    }
    return cljs$core$pr__delegate.call(this, objs);
  };
  cljs$core$pr.cljs$lang$maxFixedArity = 0;
  cljs$core$pr.cljs$lang$applyTo = function(arglist__10459) {
    var objs = cljs.core.seq(arglist__10459);
    return cljs$core$pr__delegate(objs);
  };
  cljs$core$pr.cljs$core$IFn$_invoke$arity$variadic = cljs$core$pr__delegate;
  return cljs$core$pr;
}();
cljs.core.print = function() {
  var cljs$core$cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10460__i = 0, G__10460__a = new Array(arguments.length - 0);
      while (G__10460__i < G__10460__a.length) {
        G__10460__a[G__10460__i] = arguments[G__10460__i + 0];
        ++G__10460__i;
      }
      objs = new cljs.core.IndexedSeq(G__10460__a, 0);
    }
    return cljs$core$cljs_core_print__delegate.call(this, objs);
  };
  cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__10461) {
    var objs = cljs.core.seq(arglist__10461);
    return cljs$core$cljs_core_print__delegate(objs);
  };
  cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
  return cljs$core$cljs_core_print;
}();
cljs.core.print_str = function() {
  var cljs$core$print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10462__i = 0, G__10462__a = new Array(arguments.length - 0);
      while (G__10462__i < G__10462__a.length) {
        G__10462__a[G__10462__i] = arguments[G__10462__i + 0];
        ++G__10462__i;
      }
      objs = new cljs.core.IndexedSeq(G__10462__a, 0);
    }
    return cljs$core$print_str__delegate.call(this, objs);
  };
  cljs$core$print_str.cljs$lang$maxFixedArity = 0;
  cljs$core$print_str.cljs$lang$applyTo = function(arglist__10463) {
    var objs = cljs.core.seq(arglist__10463);
    return cljs$core$print_str__delegate(objs);
  };
  cljs$core$print_str.cljs$core$IFn$_invoke$arity$variadic = cljs$core$print_str__delegate;
  return cljs$core$print_str;
}();
cljs.core.println = function() {
  var cljs$core$println__delegate = function(objs) {
    cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline(cljs.core.pr_opts());
    } else {
      return null;
    }
  };
  var cljs$core$println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10464__i = 0, G__10464__a = new Array(arguments.length - 0);
      while (G__10464__i < G__10464__a.length) {
        G__10464__a[G__10464__i] = arguments[G__10464__i + 0];
        ++G__10464__i;
      }
      objs = new cljs.core.IndexedSeq(G__10464__a, 0);
    }
    return cljs$core$println__delegate.call(this, objs);
  };
  cljs$core$println.cljs$lang$maxFixedArity = 0;
  cljs$core$println.cljs$lang$applyTo = function(arglist__10465) {
    var objs = cljs.core.seq(arglist__10465);
    return cljs$core$println__delegate(objs);
  };
  cljs$core$println.cljs$core$IFn$_invoke$arity$variadic = cljs$core$println__delegate;
  return cljs$core$println;
}();
cljs.core.println_str = function() {
  var cljs$core$println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10466__i = 0, G__10466__a = new Array(arguments.length - 0);
      while (G__10466__i < G__10466__a.length) {
        G__10466__a[G__10466__i] = arguments[G__10466__i + 0];
        ++G__10466__i;
      }
      objs = new cljs.core.IndexedSeq(G__10466__a, 0);
    }
    return cljs$core$println_str__delegate.call(this, objs);
  };
  cljs$core$println_str.cljs$lang$maxFixedArity = 0;
  cljs$core$println_str.cljs$lang$applyTo = function(arglist__10467) {
    var objs = cljs.core.seq(arglist__10467);
    return cljs$core$println_str__delegate(objs);
  };
  cljs$core$println_str.cljs$core$IFn$_invoke$arity$variadic = cljs$core$println_str__delegate;
  return cljs$core$println_str;
}();
cljs.core.prn = function() {
  var cljs$core$prn__delegate = function(objs) {
    cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline(cljs.core.pr_opts());
    } else {
      return null;
    }
  };
  var cljs$core$prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10468__i = 0, G__10468__a = new Array(arguments.length - 0);
      while (G__10468__i < G__10468__a.length) {
        G__10468__a[G__10468__i] = arguments[G__10468__i + 0];
        ++G__10468__i;
      }
      objs = new cljs.core.IndexedSeq(G__10468__a, 0);
    }
    return cljs$core$prn__delegate.call(this, objs);
  };
  cljs$core$prn.cljs$lang$maxFixedArity = 0;
  cljs$core$prn.cljs$lang$applyTo = function(arglist__10469) {
    var objs = cljs.core.seq(arglist__10469);
    return cljs$core$prn__delegate(objs);
  };
  cljs$core$prn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$prn__delegate;
  return cljs$core$prn;
}();
cljs.core.print_map = function cljs$core$print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__10476_10482 = cljs.core.key(e);
    var G__10477_10483 = w;
    var G__10478_10484 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10476_10482, G__10477_10483, G__10478_10484) : print_one.call(null, G__10476_10482, G__10477_10483, G__10478_10484);
    cljs.core._write(w, " ");
    var G__10479 = cljs.core.val(e);
    var G__10480 = w;
    var G__10481 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10479, G__10480, G__10481) : print_one.call(null, G__10479, G__10480, G__10481);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cVolatile: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cAtom: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_keywords(x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols(x__$1, y);
};
cljs.core.alter_meta_BANG_ = function() {
  var cljs$core$alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
  };
  var cljs$core$alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__10485__i = 0, G__10485__a = new Array(arguments.length - 2);
      while (G__10485__i < G__10485__a.length) {
        G__10485__a[G__10485__i] = arguments[G__10485__i + 2];
        ++G__10485__i;
      }
      args = new cljs.core.IndexedSeq(G__10485__a, 0);
    }
    return cljs$core$alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  cljs$core$alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  cljs$core$alter_meta_BANG_.cljs$lang$applyTo = function(arglist__10486) {
    var iref = cljs.core.first(arglist__10486);
    arglist__10486 = cljs.core.next(arglist__10486);
    var f = cljs.core.first(arglist__10486);
    var args = cljs.core.rest(arglist__10486);
    return cljs$core$alter_meta_BANG___delegate(iref, f, args);
  };
  cljs$core$alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$alter_meta_BANG___delegate;
  return cljs$core$alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function cljs$core$reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function cljs$core$add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function cljs$core$remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var cljs$core$gensym = null;
  var cljs$core$gensym__0 = function() {
    return cljs$core$gensym.cljs$core$IFn$_invoke$arity$1("G__");
  };
  var cljs$core$gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = function() {
        var G__10489 = 0;
        return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__10489) : cljs.core.atom.call(null, G__10489);
      }();
    } else {
    }
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  cljs$core$gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return cljs$core$gensym__0.call(this);
      case 1:
        return cljs$core$gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$gensym.cljs$core$IFn$_invoke$arity$0 = cljs$core$gensym__0;
  cljs$core$gensym.cljs$core$IFn$_invoke$arity$1 = cljs$core$gensym__1;
  return cljs$core$gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = function() {
      return self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    }();
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function cljs$core$__GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function cljs$core$delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function cljs$core$force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    var G__10491 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10491) : cljs.core.deref.call(null, G__10491);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function cljs$core$realized_QMARK_(d) {
  return cljs.core._realized_QMARK_(d);
};
cljs.core.preserving_reduced = function cljs$core$preserving_reduced(rf) {
  return function(p1__10492_SHARP_, p2__10493_SHARP_) {
    var ret = function() {
      var G__10496 = p1__10492_SHARP_;
      var G__10497 = p2__10493_SHARP_;
      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10496, G__10497) : rf.call(null, G__10496, G__10497);
    }();
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cljs$core$cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__10500 = null;
      var G__10500__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__10500__1 = function(result) {
        var G__10499 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10499) : rf.call(null, G__10499);
      };
      var G__10500__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__10500 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__10500__0.call(this);
          case 1:
            return G__10500__1.call(this, result);
          case 2:
            return G__10500__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10500.cljs$core$IFn$_invoke$arity$0 = G__10500__0;
      G__10500.cljs$core$IFn$_invoke$arity$1 = G__10500__1;
      G__10500.cljs$core$IFn$_invoke$arity$2 = G__10500__2;
      return G__10500;
    }();
  }(rf1);
};
cljs.core.dedupe = function() {
  var cljs$core$dedupe = null;
  var cljs$core$dedupe__0 = function() {
    return function(rf) {
      var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(pa) {
        return function() {
          var G__10509 = null;
          var G__10509__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__10509__1 = function(result) {
            var G__10505 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10505) : rf.call(null, G__10505);
          };
          var G__10509__2 = function(result, input) {
            var prior = function() {
              var G__10506 = pa;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10506) : cljs.core.deref.call(null, G__10506);
            }();
            cljs.core.vreset_BANG_(pa, input);
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
              return result;
            } else {
              var G__10507 = result;
              var G__10508 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10507, G__10508) : rf.call(null, G__10507, G__10508);
            }
          };
          G__10509 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__10509__0.call(this);
              case 1:
                return G__10509__1.call(this, result);
              case 2:
                return G__10509__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__10509.cljs$core$IFn$_invoke$arity$0 = G__10509__0;
          G__10509.cljs$core$IFn$_invoke$arity$1 = G__10509__1;
          G__10509.cljs$core$IFn$_invoke$arity$2 = G__10509__2;
          return G__10509;
        }();
      }(pa);
    };
  };
  var cljs$core$dedupe__1 = function(coll) {
    return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs$core$dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
  };
  cljs$core$dedupe = function(coll) {
    switch(arguments.length) {
      case 0:
        return cljs$core$dedupe__0.call(this);
      case 1:
        return cljs$core$dedupe__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$dedupe.cljs$core$IFn$_invoke$arity$0 = cljs$core$dedupe__0;
  cljs$core$dedupe.cljs$core$IFn$_invoke$arity$1 = cljs$core$dedupe__1;
  return cljs$core$dedupe;
}();
cljs.core.random_sample = function() {
  var cljs$core$random_sample = null;
  var cljs$core$random_sample__1 = function(prob) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
      return function() {
        return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
      }() < prob;
    });
  };
  var cljs$core$random_sample__2 = function(prob, coll) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
      return function() {
        return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
      }() < prob;
    }, coll);
  };
  cljs$core$random_sample = function(prob, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$random_sample__1.call(this, prob);
      case 2:
        return cljs$core$random_sample__2.call(this, prob, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$random_sample.cljs$core$IFn$_invoke$arity$1 = cljs$core$random_sample__1;
  cljs$core$random_sample.cljs$core$IFn$_invoke$arity$2 = cljs$core$random_sample__2;
  return cljs$core$random_sample;
}();
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function cljs$core$__GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.eduction = function cljs$core$eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function cljs$core$run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10511_SHARP_, p2__10510_SHARP_) {
    var G__10513 = p2__10510_SHARP_;
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(G__10513) : proc.call(null, G__10513);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj10515 = {};
  return obj10515;
}();
cljs.core._clj__GT_js = function cljs$core$_clj__GT_js(x) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = cljs.core._clj__GT_js[function() {
        var G__10519 = x__4758__auto__;
        return goog.typeOf(G__10519);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function cljs$core$_key__GT_js(x) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = cljs.core._key__GT_js[function() {
        var G__10523 = x__4758__auto__;
        return goog.typeOf(G__10523);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function cljs$core$key__GT_js(k) {
  if (function() {
    var G__10526 = k;
    if (G__10526) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__10526.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__10526.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__10526);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__10526);
    }
  }()) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      var G__10527 = k;
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(G__10527) : cljs.core.clj__GT_js.call(null, G__10527);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function cljs$core$clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__10543 = x;
      if (G__10543) {
        var bit__4796__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4122__auto__ = bit__4796__auto__;
          if (cljs.core.truth_(or__4122__auto__)) {
            return or__4122__auto__;
          } else {
            return G__10543.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__10543.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__10543);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__10543);
      }
    }()) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = function() {
              var obj10545 = {};
              return obj10545;
            }();
            var seq__10546_10556 = cljs.core.seq(x);
            var chunk__10547_10557 = null;
            var count__10548_10558 = 0;
            var i__10549_10559 = 0;
            while (true) {
              if (i__10549_10559 < count__10548_10558) {
                var vec__10550_10560 = chunk__10547_10557.cljs$core$IIndexed$_nth$arity$2(null, i__10549_10559);
                var k_10561 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10550_10560, 0, null);
                var v_10562 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10550_10560, 1, null);
                m[cljs.core.key__GT_js(k_10561)] = cljs$core$clj__GT_js(v_10562);
                var G__10563 = seq__10546_10556;
                var G__10564 = chunk__10547_10557;
                var G__10565 = count__10548_10558;
                var G__10566 = i__10549_10559 + 1;
                seq__10546_10556 = G__10563;
                chunk__10547_10557 = G__10564;
                count__10548_10558 = G__10565;
                i__10549_10559 = G__10566;
                continue;
              } else {
                var temp__4126__auto___10567 = cljs.core.seq(seq__10546_10556);
                if (temp__4126__auto___10567) {
                  var seq__10546_10568__$1 = temp__4126__auto___10567;
                  if (cljs.core.chunked_seq_QMARK_(seq__10546_10568__$1)) {
                    var c__4907__auto___10569 = cljs.core.chunk_first(seq__10546_10568__$1);
                    var G__10570 = cljs.core.chunk_rest(seq__10546_10568__$1);
                    var G__10571 = c__4907__auto___10569;
                    var G__10572 = cljs.core.count(c__4907__auto___10569);
                    var G__10573 = 0;
                    seq__10546_10556 = G__10570;
                    chunk__10547_10557 = G__10571;
                    count__10548_10558 = G__10572;
                    i__10549_10559 = G__10573;
                    continue;
                  } else {
                    var vec__10551_10574 = cljs.core.first(seq__10546_10568__$1);
                    var k_10575 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10551_10574, 0, null);
                    var v_10576 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10551_10574, 1, null);
                    m[cljs.core.key__GT_js(k_10575)] = cljs$core$clj__GT_js(v_10576);
                    var G__10577 = cljs.core.next(seq__10546_10568__$1);
                    var G__10578 = null;
                    var G__10579 = 0;
                    var G__10580 = 0;
                    seq__10546_10556 = G__10577;
                    chunk__10547_10557 = G__10578;
                    count__10548_10558 = G__10579;
                    i__10549_10559 = G__10580;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__10552_10581 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$clj__GT_js, x));
              var chunk__10553_10582 = null;
              var count__10554_10583 = 0;
              var i__10555_10584 = 0;
              while (true) {
                if (i__10555_10584 < count__10554_10583) {
                  var x_10585__$1 = chunk__10553_10582.cljs$core$IIndexed$_nth$arity$2(null, i__10555_10584);
                  arr.push(x_10585__$1);
                  var G__10586 = seq__10552_10581;
                  var G__10587 = chunk__10553_10582;
                  var G__10588 = count__10554_10583;
                  var G__10589 = i__10555_10584 + 1;
                  seq__10552_10581 = G__10586;
                  chunk__10553_10582 = G__10587;
                  count__10554_10583 = G__10588;
                  i__10555_10584 = G__10589;
                  continue;
                } else {
                  var temp__4126__auto___10590 = cljs.core.seq(seq__10552_10581);
                  if (temp__4126__auto___10590) {
                    var seq__10552_10591__$1 = temp__4126__auto___10590;
                    if (cljs.core.chunked_seq_QMARK_(seq__10552_10591__$1)) {
                      var c__4907__auto___10592 = cljs.core.chunk_first(seq__10552_10591__$1);
                      var G__10593 = cljs.core.chunk_rest(seq__10552_10591__$1);
                      var G__10594 = c__4907__auto___10592;
                      var G__10595 = cljs.core.count(c__4907__auto___10592);
                      var G__10596 = 0;
                      seq__10552_10581 = G__10593;
                      chunk__10553_10582 = G__10594;
                      count__10554_10583 = G__10595;
                      i__10555_10584 = G__10596;
                      continue;
                    } else {
                      var x_10597__$1 = cljs.core.first(seq__10552_10591__$1);
                      arr.push(x_10597__$1);
                      var G__10598 = cljs.core.next(seq__10552_10591__$1);
                      var G__10599 = null;
                      var G__10600 = 0;
                      var G__10601 = 0;
                      seq__10552_10581 = G__10598;
                      chunk__10553_10582 = G__10599;
                      count__10554_10583 = G__10600;
                      i__10555_10584 = G__10601;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj10603 = {};
  return obj10603;
}();
cljs.core._js__GT_clj = function cljs$core$_js__GT_clj(x, options) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = cljs.core._js__GT_clj[function() {
        var G__10607 = x__4758__auto__;
        return goog.typeOf(G__10607);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var cljs$core$js__GT_clj = null;
  var cljs$core$js__GT_clj__1 = function(x) {
    return cljs$core$js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
  };
  var cljs$core$js__GT_clj__2 = function() {
    var G__10664__delegate = function(x, opts) {
      var map__10637 = opts;
      var map__10637__$1 = cljs.core.seq_QMARK_(map__10637) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__10637) : map__10637;
      var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10637__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
      var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
      var f = function(map__10637, map__10637__$1, keywordize_keys, keyfn) {
        return function cljs$core$js__GT_clj_$_thisfn(x__$1) {
          if (function() {
            var G__10653 = x__$1;
            if (G__10653) {
              var bit__4796__auto__ = null;
              if (cljs.core.truth_(function() {
                var or__4122__auto__ = bit__4796__auto__;
                if (cljs.core.truth_(or__4122__auto__)) {
                  return or__4122__auto__;
                } else {
                  return G__10653.cljs$core$IEncodeClojure$;
                }
              }())) {
                return true;
              } else {
                if (!G__10653.cljs$lang$protocol_mask$partition$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__10653);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__10653);
            }
          }()) {
            return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
          } else {
            if (cljs.core.seq_QMARK_(x__$1)) {
              return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$js__GT_clj_$_thisfn, x__$1));
            } else {
              if (cljs.core.coll_QMARK_(x__$1)) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$js__GT_clj_$_thisfn, x__$1));
              } else {
                if (cljs.core.array_QMARK_(x__$1)) {
                  return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$js__GT_clj_$_thisfn, x__$1));
                } else {
                  if (cljs.core.type(x__$1) === Object) {
                    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                      var iter__4876__auto__ = function(map__10637, map__10637__$1, keywordize_keys, keyfn) {
                        return function cljs$core$js__GT_clj_$_thisfn_$_iter__10654(s__10655) {
                          return new cljs.core.LazySeq(null, function(map__10637, map__10637__$1, keywordize_keys, keyfn) {
                            return function() {
                              var s__10655__$1 = s__10655;
                              while (true) {
                                var temp__4126__auto__ = cljs.core.seq(s__10655__$1);
                                if (temp__4126__auto__) {
                                  var s__10655__$2 = temp__4126__auto__;
                                  if (cljs.core.chunked_seq_QMARK_(s__10655__$2)) {
                                    var c__4874__auto__ = cljs.core.chunk_first(s__10655__$2);
                                    var size__4875__auto__ = cljs.core.count(c__4874__auto__);
                                    var b__10657 = cljs.core.chunk_buffer(size__4875__auto__);
                                    if (function() {
                                      var i__10656 = 0;
                                      while (true) {
                                        if (i__10656 < size__4875__auto__) {
                                          var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4874__auto__, i__10656);
                                          cljs.core.chunk_append(b__10657, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                            var G__10662 = k;
                                            return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__10662) : keyfn.call(null, G__10662);
                                          }(), cljs$core$js__GT_clj_$_thisfn(x__$1[k])], null));
                                          var G__10665 = i__10656 + 1;
                                          i__10656 = G__10665;
                                          continue;
                                        } else {
                                          return true;
                                        }
                                        break;
                                      }
                                    }()) {
                                      return cljs.core.chunk_cons(cljs.core.chunk(b__10657), cljs$core$js__GT_clj_$_thisfn_$_iter__10654(cljs.core.chunk_rest(s__10655__$2)));
                                    } else {
                                      return cljs.core.chunk_cons(cljs.core.chunk(b__10657), null);
                                    }
                                  } else {
                                    var k = cljs.core.first(s__10655__$2);
                                    return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                      var G__10663 = k;
                                      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__10663) : keyfn.call(null, G__10663);
                                    }(), cljs$core$js__GT_clj_$_thisfn(x__$1[k])], null), cljs$core$js__GT_clj_$_thisfn_$_iter__10654(cljs.core.rest(s__10655__$2)));
                                  }
                                } else {
                                  return null;
                                }
                                break;
                              }
                            };
                          }(map__10637, map__10637__$1, keywordize_keys, keyfn), null, null);
                        };
                      }(map__10637, map__10637__$1, keywordize_keys, keyfn);
                      return iter__4876__auto__(cljs.core.js_keys(x__$1));
                    }());
                  } else {
                    return x__$1;
                  }
                }
              }
            }
          }
        };
      }(map__10637, map__10637__$1, keywordize_keys, keyfn);
      return f(x);
    };
    var G__10664 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        var G__10666__i = 0, G__10666__a = new Array(arguments.length - 1);
        while (G__10666__i < G__10666__a.length) {
          G__10666__a[G__10666__i] = arguments[G__10666__i + 1];
          ++G__10666__i;
        }
        opts = new cljs.core.IndexedSeq(G__10666__a, 0);
      }
      return G__10664__delegate.call(this, x, opts);
    };
    G__10664.cljs$lang$maxFixedArity = 1;
    G__10664.cljs$lang$applyTo = function(arglist__10667) {
      var x = cljs.core.first(arglist__10667);
      var opts = cljs.core.rest(arglist__10667);
      return G__10664__delegate(x, opts);
    };
    G__10664.cljs$core$IFn$_invoke$arity$variadic = G__10664__delegate;
    return G__10664;
  }();
  cljs$core$js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$js__GT_clj__1.call(this, x);
      default:
        var G__10668 = null;
        if (arguments.length > 1) {
          var G__10669__i = 0, G__10669__a = new Array(arguments.length - 1);
          while (G__10669__i < G__10669__a.length) {
            G__10669__a[G__10669__i] = arguments[G__10669__i + 1];
            ++G__10669__i;
          }
          G__10668 = new cljs.core.IndexedSeq(G__10669__a, 0);
        }
        return cljs$core$js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, G__10668);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$js__GT_clj.cljs$lang$maxFixedArity = 1;
  cljs$core$js__GT_clj.cljs$lang$applyTo = cljs$core$js__GT_clj__2.cljs$lang$applyTo;
  cljs$core$js__GT_clj.cljs$core$IFn$_invoke$arity$1 = cljs$core$js__GT_clj__1;
  cljs$core$js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = cljs$core$js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$js__GT_clj;
}();
cljs.core.memoize = function cljs$core$memoize(f) {
  var mem = function() {
    var G__10672 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__10672) : cljs.core.atom.call(null, G__10672);
  }();
  return function(mem) {
    return function() {
      var G__10674__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(function() {
          var G__10673 = mem;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10673) : cljs.core.deref.call(null, G__10673);
        }(), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__10674 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__10675__i = 0, G__10675__a = new Array(arguments.length - 0);
          while (G__10675__i < G__10675__a.length) {
            G__10675__a[G__10675__i] = arguments[G__10675__i + 0];
            ++G__10675__i;
          }
          args = new cljs.core.IndexedSeq(G__10675__a, 0);
        }
        return G__10674__delegate.call(this, args);
      };
      G__10674.cljs$lang$maxFixedArity = 0;
      G__10674.cljs$lang$applyTo = function(arglist__10676) {
        var args = cljs.core.seq(arglist__10676);
        return G__10674__delegate(args);
      };
      G__10674.cljs$core$IFn$_invoke$arity$variadic = G__10674__delegate;
      return G__10674;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var cljs$core$trampoline = null;
  var cljs$core$trampoline__1 = function(f) {
    while (true) {
      var ret = function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }();
      if (cljs.core.fn_QMARK_(ret)) {
        var G__10678 = ret;
        f = G__10678;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var cljs$core$trampoline__2 = function() {
    var G__10679__delegate = function(f, args) {
      return cljs$core$trampoline.cljs$core$IFn$_invoke$arity$1(function() {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
      });
    };
    var G__10679 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        var G__10680__i = 0, G__10680__a = new Array(arguments.length - 1);
        while (G__10680__i < G__10680__a.length) {
          G__10680__a[G__10680__i] = arguments[G__10680__i + 1];
          ++G__10680__i;
        }
        args = new cljs.core.IndexedSeq(G__10680__a, 0);
      }
      return G__10679__delegate.call(this, f, args);
    };
    G__10679.cljs$lang$maxFixedArity = 1;
    G__10679.cljs$lang$applyTo = function(arglist__10681) {
      var f = cljs.core.first(arglist__10681);
      var args = cljs.core.rest(arglist__10681);
      return G__10679__delegate(f, args);
    };
    G__10679.cljs$core$IFn$_invoke$arity$variadic = G__10679__delegate;
    return G__10679;
  }();
  cljs$core$trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$trampoline__1.call(this, f);
      default:
        var G__10682 = null;
        if (arguments.length > 1) {
          var G__10683__i = 0, G__10683__a = new Array(arguments.length - 1);
          while (G__10683__i < G__10683__a.length) {
            G__10683__a[G__10683__i] = arguments[G__10683__i + 1];
            ++G__10683__i;
          }
          G__10682 = new cljs.core.IndexedSeq(G__10683__a, 0);
        }
        return cljs$core$trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, G__10682);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$trampoline.cljs$lang$maxFixedArity = 1;
  cljs$core$trampoline.cljs$lang$applyTo = cljs$core$trampoline__2.cljs$lang$applyTo;
  cljs$core$trampoline.cljs$core$IFn$_invoke$arity$1 = cljs$core$trampoline__1;
  cljs$core$trampoline.cljs$core$IFn$_invoke$arity$variadic = cljs$core$trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$trampoline;
}();
cljs.core.rand = function() {
  var cljs$core$rand = null;
  var cljs$core$rand__0 = function() {
    return cljs$core$rand.cljs$core$IFn$_invoke$arity$1(1);
  };
  var cljs$core$rand__1 = function(n) {
    return function() {
      return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
    }() * n;
  };
  cljs$core$rand = function(n) {
    switch(arguments.length) {
      case 0:
        return cljs$core$rand__0.call(this);
      case 1:
        return cljs$core$rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$rand.cljs$core$IFn$_invoke$arity$0 = cljs$core$rand__0;
  cljs$core$rand.cljs$core$IFn$_invoke$arity$1 = cljs$core$rand__1;
  return cljs$core$rand;
}();
cljs.core.rand_int = function cljs$core$rand_int(n) {
  var G__10686 = function() {
    return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
  }() * n;
  return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__10686) : Math.floor.call(null, G__10686);
};
cljs.core.rand_nth = function cljs$core$rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function cljs$core$group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = function() {
      var G__10688 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10688) : f.call(null, G__10688);
    }();
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function cljs$core$make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function cljs$core$get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__10690 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__10690) : cljs.core.atom.call(null, G__10690);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var cljs$core$swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
  };
  var cljs$core$swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      var G__10691__i = 0, G__10691__a = new Array(arguments.length - 1);
      while (G__10691__i < G__10691__a.length) {
        G__10691__a[G__10691__i] = arguments[G__10691__i + 1];
        ++G__10691__i;
      }
      args = new cljs.core.IndexedSeq(G__10691__a, 0);
    }
    return cljs$core$swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  cljs$core$swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  cljs$core$swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__10692) {
    var f = cljs.core.first(arglist__10692);
    var args = cljs.core.rest(arglist__10692);
    return cljs$core$swap_global_hierarchy_BANG___delegate(f, args);
  };
  cljs$core$swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$swap_global_hierarchy_BANG___delegate;
  return cljs$core$swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var cljs$core$isa_QMARK_ = null;
  var cljs$core$isa_QMARK___2 = function(child, parent) {
    return cljs$core$isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__10757 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10757) : cljs.core.deref.call(null, G__10757);
    }(), child, parent);
  };
  var cljs$core$isa_QMARK___3 = function(h, child, parent) {
    var or__4122__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
    if (or__4122__auto__) {
      return or__4122__auto__;
    } else {
      var or__4122__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__4122__auto____$1) {
        return or__4122__auto____$1;
      } else {
        var and__4110__auto__ = cljs.core.vector_QMARK_(parent);
        if (and__4110__auto__) {
          var and__4110__auto____$1 = cljs.core.vector_QMARK_(child);
          if (and__4110__auto____$1) {
            var and__4110__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
            if (and__4110__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count(parent)) {
                  return ret;
                } else {
                  var G__10782 = cljs$core$isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, function() {
                    var G__10780 = i;
                    return child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(G__10780) : child.call(null, G__10780);
                  }(), function() {
                    var G__10781 = i;
                    return parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(G__10781) : parent.call(null, G__10781);
                  }());
                  var G__10783 = i + 1;
                  ret = G__10782;
                  i = G__10783;
                  continue;
                }
                break;
              }
            } else {
              return and__4110__auto____$2;
            }
          } else {
            return and__4110__auto____$1;
          }
        } else {
          return and__4110__auto__;
        }
      }
    }
  };
  cljs$core$isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return cljs$core$isa_QMARK___2.call(this, h, child);
      case 3:
        return cljs$core$isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = cljs$core$isa_QMARK___2;
  cljs$core$isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = cljs$core$isa_QMARK___3;
  return cljs$core$isa_QMARK_;
}();
cljs.core.parents = function() {
  var cljs$core$parents = null;
  var cljs$core$parents__1 = function(tag) {
    return cljs$core$parents.cljs$core$IFn$_invoke$arity$2(function() {
      var G__10787 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10787) : cljs.core.deref.call(null, G__10787);
    }(), tag);
  };
  var cljs$core$parents__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  cljs$core$parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return cljs$core$parents__1.call(this, h);
      case 2:
        return cljs$core$parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$parents.cljs$core$IFn$_invoke$arity$1 = cljs$core$parents__1;
  cljs$core$parents.cljs$core$IFn$_invoke$arity$2 = cljs$core$parents__2;
  return cljs$core$parents;
}();
cljs.core.ancestors = function() {
  var cljs$core$ancestors = null;
  var cljs$core$ancestors__1 = function(tag) {
    return cljs$core$ancestors.cljs$core$IFn$_invoke$arity$2(function() {
      var G__10791 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10791) : cljs.core.deref.call(null, G__10791);
    }(), tag);
  };
  var cljs$core$ancestors__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  cljs$core$ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return cljs$core$ancestors__1.call(this, h);
      case 2:
        return cljs$core$ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$ancestors.cljs$core$IFn$_invoke$arity$1 = cljs$core$ancestors__1;
  cljs$core$ancestors.cljs$core$IFn$_invoke$arity$2 = cljs$core$ancestors__2;
  return cljs$core$ancestors;
}();
cljs.core.descendants = function() {
  var cljs$core$descendants = null;
  var cljs$core$descendants__1 = function(tag) {
    return cljs$core$descendants.cljs$core$IFn$_invoke$arity$2(function() {
      var G__10795 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10795) : cljs.core.deref.call(null, G__10795);
    }(), tag);
  };
  var cljs$core$descendants__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  cljs$core$descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return cljs$core$descendants__1.call(this, h);
      case 2:
        return cljs$core$descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$descendants.cljs$core$IFn$_invoke$arity$1 = cljs$core$descendants__1;
  cljs$core$descendants.cljs$core$IFn$_invoke$arity$2 = cljs$core$descendants__2;
  return cljs$core$descendants;
}();
cljs.core.derive = function() {
  var cljs$core$derive = null;
  var cljs$core$derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace(parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs$core$derive, cljs.core.array_seq([tag, parent], 0));
    return null;
  };
  var cljs$core$derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, function() {
              var G__10804 = target;
              return targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(G__10804) : targets.call(null, G__10804);
            }())));
          };
        }(tp, td, ta), m, cljs.core.cons(source, function() {
          var G__10805 = source;
          return sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(G__10805) : sources.call(null, G__10805);
        }()));
      };
    }(tp, td, ta);
    var or__4122__auto__ = cljs.core.contains_QMARK_(function() {
      var G__10809 = tag;
      return tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(G__10809) : tp.call(null, G__10809);
    }(), parent) ? null : function() {
      if (cljs.core.contains_QMARK_(function() {
        var G__10810 = tag;
        return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__10810) : ta.call(null, G__10810);
      }(), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_(function() {
        var G__10811 = parent;
        return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__10811) : ta.call(null, G__10811);
      }(), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
      "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return h;
    }
  };
  cljs$core$derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return cljs$core$derive__2.call(this, h, tag);
      case 3:
        return cljs$core$derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$derive.cljs$core$IFn$_invoke$arity$2 = cljs$core$derive__2;
  cljs$core$derive.cljs$core$IFn$_invoke$arity$3 = cljs$core$derive__3;
  return cljs$core$derive;
}();
cljs.core.underive = function() {
  var cljs$core$underive = null;
  var cljs$core$underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs$core$underive, cljs.core.array_seq([tag, parent], 0));
    return null;
  };
  var cljs$core$underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(function() {
      var G__10818 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__10818) : parentMap.call(null, G__10818);
    }()) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(function() {
      var G__10819 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__10819) : parentMap.call(null, G__10819);
    }(), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
    var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
      return function(p1__10812_SHARP_) {
        return cljs.core.cons(cljs.core.first(p1__10812_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__10812_SHARP_), cljs.core.second(p1__10812_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
    if (cljs.core.contains_QMARK_(function() {
      var G__10820 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__10820) : parentMap.call(null, G__10820);
    }(), parent)) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__10813_SHARP_, p2__10814_SHARP_) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__10813_SHARP_, p2__10814_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
    } else {
      return h;
    }
  };
  cljs$core$underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return cljs$core$underive__2.call(this, h, tag);
      case 3:
        return cljs$core$underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$underive.cljs$core$IFn$_invoke$arity$2 = cljs$core$underive__2;
  cljs$core$underive.cljs$core$IFn$_invoke$arity$3 = cljs$core$underive__3;
  return cljs$core$underive;
}();
cljs.core.reset_cache = function cljs$core$reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    var G__10823 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10823) : cljs.core.deref.call(null, G__10823);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    var G__10824 = hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10824) : cljs.core.deref.call(null, G__10824);
  });
};
cljs.core.prefers_STAR_ = function cljs$core$prefers_STAR_(x, y, prefer_table) {
  var xprefs = function() {
    var G__10840 = prefer_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10840) : cljs.core.deref.call(null, G__10840);
  }().call(null, x);
  var or__4122__auto__ = cljs.core.truth_(function() {
    var and__4110__auto__ = xprefs;
    if (cljs.core.truth_(and__4110__auto__)) {
      var G__10842 = y;
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(G__10842) : xprefs.call(null, G__10842);
    } else {
      return and__4110__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__4122__auto__)) {
    return or__4122__auto__;
  } else {
    var or__4122__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(cljs$core$prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__10843 = cljs.core.rest(ps);
          ps = G__10843;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__4122__auto____$1)) {
      return or__4122__auto____$1;
    } else {
      var or__4122__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(cljs$core$prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__10844 = cljs.core.rest(ps);
            ps = G__10844;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__4122__auto____$2)) {
        return or__4122__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function cljs$core$dominates(x, y, prefer_table) {
  var or__4122__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__4122__auto__)) {
    return or__4122__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__10858) {
    var vec__10859 = p__10858;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10859, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10859, 1, null);
    var e = vec__10859;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__10860 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10860) : cljs.core.deref.call(null, G__10860);
    }(), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__4122__auto__ = be == null;
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, function() {
    var G__10861 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10861) : cljs.core.deref.call(null, G__10861);
  }());
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
      var G__10862 = cached_hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10862) : cljs.core.deref.call(null, G__10862);
    }(), function() {
      var G__10863 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10863) : cljs.core.deref.call(null, G__10863);
    }())) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj10865 = {};
  return obj10865;
}();
cljs.core._reset = function cljs$core$_reset(mf) {
  if (function() {
    var and__4110__auto__ = mf;
    if (and__4110__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4758__auto__ = mf == null ? null : mf;
    return function() {
      var or__4122__auto__ = cljs.core._reset[function() {
        var G__10869 = x__4758__auto__;
        return goog.typeOf(G__10869);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._reset["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function cljs$core$_add_method(mf, dispatch_val, method) {
  if (function() {
    var and__4110__auto__ = mf;
    if (and__4110__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4758__auto__ = mf == null ? null : mf;
    return function() {
      var or__4122__auto__ = cljs.core._add_method[function() {
        var G__10873 = x__4758__auto__;
        return goog.typeOf(G__10873);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._add_method["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function cljs$core$_remove_method(mf, dispatch_val) {
  if (function() {
    var and__4110__auto__ = mf;
    if (and__4110__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4758__auto__ = mf == null ? null : mf;
    return function() {
      var or__4122__auto__ = cljs.core._remove_method[function() {
        var G__10877 = x__4758__auto__;
        return goog.typeOf(G__10877);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._remove_method["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function cljs$core$_prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__4110__auto__ = mf;
    if (and__4110__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4758__auto__ = mf == null ? null : mf;
    return function() {
      var or__4122__auto__ = cljs.core._prefer_method[function() {
        var G__10881 = x__4758__auto__;
        return goog.typeOf(G__10881);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._prefer_method["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function cljs$core$_get_method(mf, dispatch_val) {
  if (function() {
    var and__4110__auto__ = mf;
    if (and__4110__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4758__auto__ = mf == null ? null : mf;
    return function() {
      var or__4122__auto__ = cljs.core._get_method[function() {
        var G__10885 = x__4758__auto__;
        return goog.typeOf(G__10885);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._get_method["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function cljs$core$_methods(mf) {
  if (function() {
    var and__4110__auto__ = mf;
    if (and__4110__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4758__auto__ = mf == null ? null : mf;
    return function() {
      var or__4122__auto__ = cljs.core._methods[function() {
        var G__10889 = x__4758__auto__;
        return goog.typeOf(G__10889);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._methods["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function cljs$core$_prefers(mf) {
  if (function() {
    var and__4110__auto__ = mf;
    if (and__4110__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4758__auto__ = mf == null ? null : mf;
    return function() {
      var or__4122__auto__ = cljs.core._prefers[function() {
        var G__10893 = x__4758__auto__;
        return goog.typeOf(G__10893);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._prefers["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function cljs$core$throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__10895 = this$__$1;
  return goog.getUid(G__10895);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
    var G__10896 = self__.cached_hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10896) : cljs.core.deref.call(null, G__10896);
  }(), function() {
    var G__10897 = self__.hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10897) : cljs.core.deref.call(null, G__10897);
  }())) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = function() {
    var G__10898 = self__.method_cache;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10898) : cljs.core.deref.call(null, G__10898);
  }().call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return function() {
        var G__10899 = self__.method_table;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10899) : cljs.core.deref.call(null, G__10899);
      }().call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__10900 = self__.method_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10900) : cljs.core.deref.call(null, G__10900);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__10901 = self__.prefer_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10901) : cljs.core.deref.call(null, G__10901);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__11742 = null;
  var G__11742__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__11742__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10902 = a;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__10902) : self__.dispatch_fn.call(null, G__10902);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10903 = a;
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__10903) : target_fn.call(null, G__10903);
  };
  var G__11742__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10904 = a;
      var G__10905 = b;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__10904, G__10905) : self__.dispatch_fn.call(null, G__10904, G__10905);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10906 = a;
    var G__10907 = b;
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__10906, G__10907) : target_fn.call(null, G__10906, G__10907);
  };
  var G__11742__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10908 = a;
      var G__10909 = b;
      var G__10910 = c;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__10908, G__10909, G__10910) : self__.dispatch_fn.call(null, G__10908, G__10909, G__10910);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10911 = a;
    var G__10912 = b;
    var G__10913 = c;
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__10911, G__10912, G__10913) : target_fn.call(null, G__10911, G__10912, G__10913);
  };
  var G__11742__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10914 = a;
      var G__10915 = b;
      var G__10916 = c;
      var G__10917 = d;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__10914, G__10915, G__10916, G__10917) : self__.dispatch_fn.call(null, G__10914, G__10915, G__10916, G__10917);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10918 = a;
    var G__10919 = b;
    var G__10920 = c;
    var G__10921 = d;
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__10918, G__10919, G__10920, G__10921) : target_fn.call(null, G__10918, G__10919, G__10920, G__10921);
  };
  var G__11742__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10922 = a;
      var G__10923 = b;
      var G__10924 = c;
      var G__10925 = d;
      var G__10926 = e;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__10922, G__10923, G__10924, G__10925, G__10926) : self__.dispatch_fn.call(null, G__10922, G__10923, G__10924, G__10925, G__10926);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10927 = a;
    var G__10928 = b;
    var G__10929 = c;
    var G__10930 = d;
    var G__10931 = e;
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__10927, G__10928, G__10929, G__10930, G__10931) : target_fn.call(null, G__10927, G__10928, G__10929, G__10930, G__10931);
  };
  var G__11742__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10932 = a;
      var G__10933 = b;
      var G__10934 = c;
      var G__10935 = d;
      var G__10936 = e;
      var G__10937 = f;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__10932, G__10933, G__10934, G__10935, G__10936, G__10937) : self__.dispatch_fn.call(null, G__10932, G__10933, G__10934, G__10935, G__10936, G__10937);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10938 = a;
    var G__10939 = b;
    var G__10940 = c;
    var G__10941 = d;
    var G__10942 = e;
    var G__10943 = f;
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__10938, G__10939, G__10940, G__10941, G__10942, G__10943) : target_fn.call(null, G__10938, G__10939, G__10940, G__10941, G__10942, G__10943);
  };
  var G__11742__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10944 = a;
      var G__10945 = b;
      var G__10946 = c;
      var G__10947 = d;
      var G__10948 = e;
      var G__10949 = f;
      var G__10950 = g;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__10944, G__10945, G__10946, G__10947, G__10948, G__10949, G__10950) : self__.dispatch_fn.call(null, G__10944, G__10945, G__10946, G__10947, G__10948, G__10949, G__10950);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10951 = a;
    var G__10952 = b;
    var G__10953 = c;
    var G__10954 = d;
    var G__10955 = e;
    var G__10956 = f;
    var G__10957 = g;
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__10951, G__10952, G__10953, G__10954, G__10955, G__10956, G__10957) : target_fn.call(null, G__10951, G__10952, G__10953, G__10954, G__10955, G__10956, G__10957);
  };
  var G__11742__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10958 = a;
      var G__10959 = b;
      var G__10960 = c;
      var G__10961 = d;
      var G__10962 = e;
      var G__10963 = f;
      var G__10964 = g;
      var G__10965 = h;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__10958, G__10959, G__10960, G__10961, G__10962, G__10963, G__10964, G__10965) : self__.dispatch_fn.call(null, G__10958, G__10959, G__10960, G__10961, G__10962, G__10963, G__10964, G__10965);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10966 = a;
    var G__10967 = b;
    var G__10968 = c;
    var G__10969 = d;
    var G__10970 = e;
    var G__10971 = f;
    var G__10972 = g;
    var G__10973 = h;
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__10966, G__10967, G__10968, G__10969, G__10970, G__10971, G__10972, G__10973) : target_fn.call(null, G__10966, G__10967, G__10968, G__10969, G__10970, G__10971, G__10972, G__10973);
  };
  var G__11742__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10974 = a;
      var G__10975 = b;
      var G__10976 = c;
      var G__10977 = d;
      var G__10978 = e;
      var G__10979 = f;
      var G__10980 = g;
      var G__10981 = h;
      var G__10982 = i;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__10974, G__10975, G__10976, G__10977, G__10978, G__10979, G__10980, G__10981, G__10982) : self__.dispatch_fn.call(null, G__10974, G__10975, G__10976, G__10977, G__10978, G__10979, G__10980, G__10981, G__10982);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10983 = a;
    var G__10984 = b;
    var G__10985 = c;
    var G__10986 = d;
    var G__10987 = e;
    var G__10988 = f;
    var G__10989 = g;
    var G__10990 = h;
    var G__10991 = i;
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__10983, G__10984, G__10985, G__10986, G__10987, G__10988, G__10989, G__10990, G__10991) : target_fn.call(null, G__10983, G__10984, G__10985, G__10986, G__10987, G__10988, G__10989, G__10990, G__10991);
  };
  var G__11742__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10992 = a;
      var G__10993 = b;
      var G__10994 = c;
      var G__10995 = d;
      var G__10996 = e;
      var G__10997 = f;
      var G__10998 = g;
      var G__10999 = h;
      var G__11000 = i;
      var G__11001 = j;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__10992, G__10993, G__10994, G__10995, G__10996, G__10997, G__10998, G__10999, G__11000, G__11001) : self__.dispatch_fn.call(null, G__10992, G__10993, G__10994, G__10995, G__10996, G__10997, G__10998, G__10999, G__11000, G__11001);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11002 = a;
    var G__11003 = b;
    var G__11004 = c;
    var G__11005 = d;
    var G__11006 = e;
    var G__11007 = f;
    var G__11008 = g;
    var G__11009 = h;
    var G__11010 = i;
    var G__11011 = j;
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__11002, G__11003, G__11004, G__11005, G__11006, G__11007, G__11008, G__11009, G__11010, G__11011) : target_fn.call(null, G__11002, G__11003, G__11004, G__11005, G__11006, G__11007, G__11008, G__11009, G__11010, G__11011);
  };
  var G__11742__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11012 = a;
      var G__11013 = b;
      var G__11014 = c;
      var G__11015 = d;
      var G__11016 = e;
      var G__11017 = f;
      var G__11018 = g;
      var G__11019 = h;
      var G__11020 = i;
      var G__11021 = j;
      var G__11022 = k;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__11012, G__11013, G__11014, G__11015, G__11016, G__11017, G__11018, G__11019, G__11020, G__11021, G__11022) : self__.dispatch_fn.call(null, G__11012, G__11013, G__11014, G__11015, G__11016, G__11017, G__11018, G__11019, G__11020, G__11021, G__11022);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11023 = a;
    var G__11024 = b;
    var G__11025 = c;
    var G__11026 = d;
    var G__11027 = e;
    var G__11028 = f;
    var G__11029 = g;
    var G__11030 = h;
    var G__11031 = i;
    var G__11032 = j;
    var G__11033 = k;
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__11023, G__11024, G__11025, G__11026, G__11027, G__11028, G__11029, G__11030, G__11031, G__11032, G__11033) : target_fn.call(null, G__11023, G__11024, G__11025, G__11026, G__11027, G__11028, G__11029, G__11030, G__11031, G__11032, G__11033);
  };
  var G__11742__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11034 = a;
      var G__11035 = b;
      var G__11036 = c;
      var G__11037 = d;
      var G__11038 = e;
      var G__11039 = f;
      var G__11040 = g;
      var G__11041 = h;
      var G__11042 = i;
      var G__11043 = j;
      var G__11044 = k;
      var G__11045 = l;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__11034, G__11035, G__11036, G__11037, G__11038, G__11039, G__11040, G__11041, G__11042, G__11043, G__11044, G__11045) : self__.dispatch_fn.call(null, G__11034, G__11035, G__11036, G__11037, G__11038, G__11039, G__11040, G__11041, G__11042, G__11043, G__11044, G__11045);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11046 = a;
    var G__11047 = b;
    var G__11048 = c;
    var G__11049 = d;
    var G__11050 = e;
    var G__11051 = f;
    var G__11052 = g;
    var G__11053 = h;
    var G__11054 = i;
    var G__11055 = j;
    var G__11056 = k;
    var G__11057 = l;
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__11046, G__11047, G__11048, G__11049, G__11050, G__11051, G__11052, G__11053, G__11054, G__11055, G__11056, G__11057) : target_fn.call(null, G__11046, G__11047, G__11048, G__11049, G__11050, G__11051, G__11052, G__11053, G__11054, G__11055, G__11056, G__11057);
  };
  var G__11742__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11058 = a;
      var G__11059 = b;
      var G__11060 = c;
      var G__11061 = d;
      var G__11062 = e;
      var G__11063 = f;
      var G__11064 = g;
      var G__11065 = h;
      var G__11066 = i;
      var G__11067 = j;
      var G__11068 = k;
      var G__11069 = l;
      var G__11070 = m;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__11058, G__11059, G__11060, G__11061, G__11062, G__11063, G__11064, G__11065, G__11066, G__11067, G__11068, G__11069, G__11070) : self__.dispatch_fn.call(null, G__11058, G__11059, G__11060, G__11061, G__11062, G__11063, G__11064, G__11065, G__11066, G__11067, G__11068, G__11069, G__11070);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11071 = a;
    var G__11072 = b;
    var G__11073 = c;
    var G__11074 = d;
    var G__11075 = e;
    var G__11076 = f;
    var G__11077 = g;
    var G__11078 = h;
    var G__11079 = i;
    var G__11080 = j;
    var G__11081 = k;
    var G__11082 = l;
    var G__11083 = m;
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__11071, G__11072, G__11073, G__11074, G__11075, G__11076, G__11077, G__11078, G__11079, G__11080, G__11081, G__11082, G__11083) : target_fn.call(null, G__11071, G__11072, G__11073, G__11074, G__11075, G__11076, G__11077, G__11078, G__11079, G__11080, G__11081, G__11082, G__11083);
  };
  var G__11742__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11084 = a;
      var G__11085 = b;
      var G__11086 = c;
      var G__11087 = d;
      var G__11088 = e;
      var G__11089 = f;
      var G__11090 = g;
      var G__11091 = h;
      var G__11092 = i;
      var G__11093 = j;
      var G__11094 = k;
      var G__11095 = l;
      var G__11096 = m;
      var G__11097 = n;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__11084, G__11085, G__11086, G__11087, G__11088, G__11089, G__11090, G__11091, G__11092, G__11093, G__11094, G__11095, G__11096, G__11097) : self__.dispatch_fn.call(null, G__11084, G__11085, G__11086, G__11087, G__11088, G__11089, G__11090, G__11091, G__11092, G__11093, G__11094, G__11095, G__11096, G__11097);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11098 = a;
    var G__11099 = b;
    var G__11100 = c;
    var G__11101 = d;
    var G__11102 = e;
    var G__11103 = f;
    var G__11104 = g;
    var G__11105 = h;
    var G__11106 = i;
    var G__11107 = j;
    var G__11108 = k;
    var G__11109 = l;
    var G__11110 = m;
    var G__11111 = n;
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__11098, G__11099, G__11100, G__11101, G__11102, G__11103, G__11104, G__11105, G__11106, G__11107, G__11108, G__11109, G__11110, G__11111) : target_fn.call(null, G__11098, G__11099, G__11100, G__11101, G__11102, G__11103, G__11104, G__11105, G__11106, G__11107, G__11108, G__11109, G__11110, G__11111);
  };
  var G__11742__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11112 = a;
      var G__11113 = b;
      var G__11114 = c;
      var G__11115 = d;
      var G__11116 = e;
      var G__11117 = f;
      var G__11118 = g;
      var G__11119 = h;
      var G__11120 = i;
      var G__11121 = j;
      var G__11122 = k;
      var G__11123 = l;
      var G__11124 = m;
      var G__11125 = n;
      var G__11126 = o;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__11112, G__11113, G__11114, G__11115, G__11116, G__11117, G__11118, G__11119, G__11120, G__11121, G__11122, G__11123, G__11124, G__11125, G__11126) : self__.dispatch_fn.call(null, G__11112, G__11113, G__11114, G__11115, G__11116, G__11117, G__11118, G__11119, G__11120, G__11121, G__11122, G__11123, G__11124, G__11125, G__11126);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11127 = a;
    var G__11128 = b;
    var G__11129 = c;
    var G__11130 = d;
    var G__11131 = e;
    var G__11132 = f;
    var G__11133 = g;
    var G__11134 = h;
    var G__11135 = i;
    var G__11136 = j;
    var G__11137 = k;
    var G__11138 = l;
    var G__11139 = m;
    var G__11140 = n;
    var G__11141 = o;
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__11127, G__11128, G__11129, G__11130, G__11131, G__11132, G__11133, G__11134, G__11135, G__11136, G__11137, G__11138, G__11139, G__11140, G__11141) : target_fn.call(null, G__11127, G__11128, G__11129, G__11130, G__11131, G__11132, G__11133, G__11134, G__11135, G__11136, G__11137, G__11138, G__11139, G__11140, G__11141);
  };
  var G__11742__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11142 = a;
      var G__11143 = b;
      var G__11144 = c;
      var G__11145 = d;
      var G__11146 = e;
      var G__11147 = f;
      var G__11148 = g;
      var G__11149 = h;
      var G__11150 = i;
      var G__11151 = j;
      var G__11152 = k;
      var G__11153 = l;
      var G__11154 = m;
      var G__11155 = n;
      var G__11156 = o;
      var G__11157 = p;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__11142, G__11143, G__11144, G__11145, G__11146, G__11147, G__11148, G__11149, G__11150, G__11151, G__11152, G__11153, G__11154, G__11155, G__11156, G__11157) : self__.dispatch_fn.call(null, G__11142, G__11143, G__11144, G__11145, G__11146, G__11147, G__11148, G__11149, G__11150, G__11151, G__11152, G__11153, G__11154, G__11155, G__11156, G__11157);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11158 = a;
    var G__11159 = b;
    var G__11160 = c;
    var G__11161 = d;
    var G__11162 = e;
    var G__11163 = f;
    var G__11164 = g;
    var G__11165 = h;
    var G__11166 = i;
    var G__11167 = j;
    var G__11168 = k;
    var G__11169 = l;
    var G__11170 = m;
    var G__11171 = n;
    var G__11172 = o;
    var G__11173 = p;
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__11158, G__11159, G__11160, G__11161, G__11162, G__11163, G__11164, G__11165, G__11166, G__11167, G__11168, G__11169, G__11170, G__11171, G__11172, G__11173) : target_fn.call(null, G__11158, G__11159, G__11160, G__11161, G__11162, G__11163, G__11164, G__11165, G__11166, G__11167, G__11168, G__11169, G__11170, G__11171, G__11172, G__11173);
  };
  var G__11742__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11174 = a;
      var G__11175 = b;
      var G__11176 = c;
      var G__11177 = d;
      var G__11178 = e;
      var G__11179 = f;
      var G__11180 = g;
      var G__11181 = h;
      var G__11182 = i;
      var G__11183 = j;
      var G__11184 = k;
      var G__11185 = l;
      var G__11186 = m;
      var G__11187 = n;
      var G__11188 = o;
      var G__11189 = p;
      var G__11190 = q;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__11174, G__11175, G__11176, G__11177, G__11178, G__11179, G__11180, G__11181, G__11182, G__11183, G__11184, G__11185, G__11186, G__11187, G__11188, G__11189, G__11190) : self__.dispatch_fn.call(null, G__11174, G__11175, G__11176, G__11177, G__11178, G__11179, G__11180, G__11181, G__11182, G__11183, G__11184, G__11185, G__11186, G__11187, G__11188, G__11189, G__11190);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11191 = a;
    var G__11192 = b;
    var G__11193 = c;
    var G__11194 = d;
    var G__11195 = e;
    var G__11196 = f;
    var G__11197 = g;
    var G__11198 = h;
    var G__11199 = i;
    var G__11200 = j;
    var G__11201 = k;
    var G__11202 = l;
    var G__11203 = m;
    var G__11204 = n;
    var G__11205 = o;
    var G__11206 = p;
    var G__11207 = q;
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__11191, G__11192, G__11193, G__11194, G__11195, G__11196, G__11197, G__11198, G__11199, G__11200, G__11201, G__11202, G__11203, G__11204, G__11205, G__11206, G__11207) : target_fn.call(null, G__11191, G__11192, G__11193, G__11194, G__11195, G__11196, G__11197, G__11198, G__11199, G__11200, G__11201, G__11202, G__11203, G__11204, G__11205, G__11206, G__11207);
  };
  var G__11742__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11208 = a;
      var G__11209 = b;
      var G__11210 = c;
      var G__11211 = d;
      var G__11212 = e;
      var G__11213 = f;
      var G__11214 = g;
      var G__11215 = h;
      var G__11216 = i;
      var G__11217 = j;
      var G__11218 = k;
      var G__11219 = l;
      var G__11220 = m;
      var G__11221 = n;
      var G__11222 = o;
      var G__11223 = p;
      var G__11224 = q;
      var G__11225 = r;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__11208, G__11209, G__11210, G__11211, G__11212, G__11213, G__11214, G__11215, G__11216, G__11217, G__11218, G__11219, G__11220, G__11221, G__11222, G__11223, G__11224, G__11225) : self__.dispatch_fn.call(null, G__11208, G__11209, G__11210, G__11211, G__11212, G__11213, G__11214, G__11215, G__11216, G__11217, G__11218, G__11219, G__11220, G__11221, G__11222, G__11223, G__11224, G__11225);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11226 = a;
    var G__11227 = b;
    var G__11228 = c;
    var G__11229 = d;
    var G__11230 = e;
    var G__11231 = f;
    var G__11232 = g;
    var G__11233 = h;
    var G__11234 = i;
    var G__11235 = j;
    var G__11236 = k;
    var G__11237 = l;
    var G__11238 = m;
    var G__11239 = n;
    var G__11240 = o;
    var G__11241 = p;
    var G__11242 = q;
    var G__11243 = r;
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__11226, G__11227, G__11228, G__11229, G__11230, G__11231, G__11232, G__11233, G__11234, G__11235, G__11236, G__11237, G__11238, G__11239, G__11240, G__11241, G__11242, G__11243) : target_fn.call(null, G__11226, G__11227, G__11228, G__11229, G__11230, G__11231, G__11232, G__11233, G__11234, G__11235, G__11236, G__11237, G__11238, G__11239, G__11240, G__11241, G__11242, G__11243);
  };
  var G__11742__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11244 = a;
      var G__11245 = b;
      var G__11246 = c;
      var G__11247 = d;
      var G__11248 = e;
      var G__11249 = f;
      var G__11250 = g;
      var G__11251 = h;
      var G__11252 = i;
      var G__11253 = j;
      var G__11254 = k;
      var G__11255 = l;
      var G__11256 = m;
      var G__11257 = n;
      var G__11258 = o;
      var G__11259 = p;
      var G__11260 = q;
      var G__11261 = r;
      var G__11262 = s;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__11244, G__11245, G__11246, G__11247, G__11248, G__11249, G__11250, G__11251, G__11252, G__11253, G__11254, G__11255, G__11256, G__11257, G__11258, G__11259, G__11260, G__11261, G__11262) : self__.dispatch_fn.call(null, G__11244, G__11245, G__11246, G__11247, G__11248, G__11249, G__11250, G__11251, G__11252, G__11253, G__11254, G__11255, G__11256, G__11257, G__11258, G__11259, G__11260, 
      G__11261, G__11262);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11263 = a;
    var G__11264 = b;
    var G__11265 = c;
    var G__11266 = d;
    var G__11267 = e;
    var G__11268 = f;
    var G__11269 = g;
    var G__11270 = h;
    var G__11271 = i;
    var G__11272 = j;
    var G__11273 = k;
    var G__11274 = l;
    var G__11275 = m;
    var G__11276 = n;
    var G__11277 = o;
    var G__11278 = p;
    var G__11279 = q;
    var G__11280 = r;
    var G__11281 = s;
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__11263, G__11264, G__11265, G__11266, G__11267, G__11268, G__11269, G__11270, G__11271, G__11272, G__11273, G__11274, G__11275, G__11276, G__11277, G__11278, G__11279, G__11280, G__11281) : target_fn.call(null, G__11263, G__11264, G__11265, G__11266, G__11267, G__11268, G__11269, G__11270, G__11271, G__11272, G__11273, G__11274, G__11275, G__11276, G__11277, G__11278, G__11279, G__11280, G__11281);
  };
  var G__11742__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11282 = a;
      var G__11283 = b;
      var G__11284 = c;
      var G__11285 = d;
      var G__11286 = e;
      var G__11287 = f;
      var G__11288 = g;
      var G__11289 = h;
      var G__11290 = i;
      var G__11291 = j;
      var G__11292 = k;
      var G__11293 = l;
      var G__11294 = m;
      var G__11295 = n;
      var G__11296 = o;
      var G__11297 = p;
      var G__11298 = q;
      var G__11299 = r;
      var G__11300 = s;
      var G__11301 = t;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__11282, G__11283, G__11284, G__11285, G__11286, G__11287, G__11288, G__11289, G__11290, G__11291, G__11292, G__11293, G__11294, G__11295, G__11296, G__11297, G__11298, G__11299, G__11300, G__11301) : self__.dispatch_fn.call(null, G__11282, G__11283, G__11284, G__11285, G__11286, G__11287, G__11288, G__11289, G__11290, G__11291, G__11292, G__11293, G__11294, G__11295, G__11296, G__11297, 
      G__11298, G__11299, G__11300, G__11301);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11302 = a;
    var G__11303 = b;
    var G__11304 = c;
    var G__11305 = d;
    var G__11306 = e;
    var G__11307 = f;
    var G__11308 = g;
    var G__11309 = h;
    var G__11310 = i;
    var G__11311 = j;
    var G__11312 = k;
    var G__11313 = l;
    var G__11314 = m;
    var G__11315 = n;
    var G__11316 = o;
    var G__11317 = p;
    var G__11318 = q;
    var G__11319 = r;
    var G__11320 = s;
    var G__11321 = t;
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__11302, G__11303, G__11304, G__11305, G__11306, G__11307, G__11308, G__11309, G__11310, G__11311, G__11312, G__11313, G__11314, G__11315, G__11316, G__11317, G__11318, G__11319, G__11320, G__11321) : target_fn.call(null, G__11302, G__11303, G__11304, G__11305, G__11306, G__11307, G__11308, G__11309, G__11310, G__11311, G__11312, G__11313, G__11314, G__11315, G__11316, G__11317, G__11318, G__11319, G__11320, 
    G__11321);
  };
  var G__11742__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__11742 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__11742__1.call(this, self__);
      case 2:
        return G__11742__2.call(this, self__, a);
      case 3:
        return G__11742__3.call(this, self__, a, b);
      case 4:
        return G__11742__4.call(this, self__, a, b, c);
      case 5:
        return G__11742__5.call(this, self__, a, b, c, d);
      case 6:
        return G__11742__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__11742__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__11742__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__11742__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__11742__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__11742__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__11742__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__11742__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__11742__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__11742__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__11742__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__11742__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__11742__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__11742__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__11742__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__11742__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__11742__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11742.cljs$core$IFn$_invoke$arity$1 = G__11742__1;
  G__11742.cljs$core$IFn$_invoke$arity$2 = G__11742__2;
  G__11742.cljs$core$IFn$_invoke$arity$3 = G__11742__3;
  G__11742.cljs$core$IFn$_invoke$arity$4 = G__11742__4;
  G__11742.cljs$core$IFn$_invoke$arity$5 = G__11742__5;
  G__11742.cljs$core$IFn$_invoke$arity$6 = G__11742__6;
  G__11742.cljs$core$IFn$_invoke$arity$7 = G__11742__7;
  G__11742.cljs$core$IFn$_invoke$arity$8 = G__11742__8;
  G__11742.cljs$core$IFn$_invoke$arity$9 = G__11742__9;
  G__11742.cljs$core$IFn$_invoke$arity$10 = G__11742__10;
  G__11742.cljs$core$IFn$_invoke$arity$11 = G__11742__11;
  G__11742.cljs$core$IFn$_invoke$arity$12 = G__11742__12;
  G__11742.cljs$core$IFn$_invoke$arity$13 = G__11742__13;
  G__11742.cljs$core$IFn$_invoke$arity$14 = G__11742__14;
  G__11742.cljs$core$IFn$_invoke$arity$15 = G__11742__15;
  G__11742.cljs$core$IFn$_invoke$arity$16 = G__11742__16;
  G__11742.cljs$core$IFn$_invoke$arity$17 = G__11742__17;
  G__11742.cljs$core$IFn$_invoke$arity$18 = G__11742__18;
  G__11742.cljs$core$IFn$_invoke$arity$19 = G__11742__19;
  G__11742.cljs$core$IFn$_invoke$arity$20 = G__11742__20;
  G__11742.cljs$core$IFn$_invoke$arity$21 = G__11742__21;
  G__11742.cljs$core$IFn$_invoke$arity$22 = G__11742__22;
  return G__11742;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args10894) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10894)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11322 = a;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__11322) : self__.dispatch_fn.call(null, G__11322);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11323 = a;
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__11323) : target_fn.call(null, G__11323);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11324 = a;
    var G__11325 = b;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__11324, G__11325) : self__.dispatch_fn.call(null, G__11324, G__11325);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11326 = a;
  var G__11327 = b;
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__11326, G__11327) : target_fn.call(null, G__11326, G__11327);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11328 = a;
    var G__11329 = b;
    var G__11330 = c;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__11328, G__11329, G__11330) : self__.dispatch_fn.call(null, G__11328, G__11329, G__11330);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11331 = a;
  var G__11332 = b;
  var G__11333 = c;
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__11331, G__11332, G__11333) : target_fn.call(null, G__11331, G__11332, G__11333);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11334 = a;
    var G__11335 = b;
    var G__11336 = c;
    var G__11337 = d;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__11334, G__11335, G__11336, G__11337) : self__.dispatch_fn.call(null, G__11334, G__11335, G__11336, G__11337);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11338 = a;
  var G__11339 = b;
  var G__11340 = c;
  var G__11341 = d;
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__11338, G__11339, G__11340, G__11341) : target_fn.call(null, G__11338, G__11339, G__11340, G__11341);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11342 = a;
    var G__11343 = b;
    var G__11344 = c;
    var G__11345 = d;
    var G__11346 = e;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__11342, G__11343, G__11344, G__11345, G__11346) : self__.dispatch_fn.call(null, G__11342, G__11343, G__11344, G__11345, G__11346);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11347 = a;
  var G__11348 = b;
  var G__11349 = c;
  var G__11350 = d;
  var G__11351 = e;
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__11347, G__11348, G__11349, G__11350, G__11351) : target_fn.call(null, G__11347, G__11348, G__11349, G__11350, G__11351);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11352 = a;
    var G__11353 = b;
    var G__11354 = c;
    var G__11355 = d;
    var G__11356 = e;
    var G__11357 = f;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__11352, G__11353, G__11354, G__11355, G__11356, G__11357) : self__.dispatch_fn.call(null, G__11352, G__11353, G__11354, G__11355, G__11356, G__11357);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11358 = a;
  var G__11359 = b;
  var G__11360 = c;
  var G__11361 = d;
  var G__11362 = e;
  var G__11363 = f;
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__11358, G__11359, G__11360, G__11361, G__11362, G__11363) : target_fn.call(null, G__11358, G__11359, G__11360, G__11361, G__11362, G__11363);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11364 = a;
    var G__11365 = b;
    var G__11366 = c;
    var G__11367 = d;
    var G__11368 = e;
    var G__11369 = f;
    var G__11370 = g;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__11364, G__11365, G__11366, G__11367, G__11368, G__11369, G__11370) : self__.dispatch_fn.call(null, G__11364, G__11365, G__11366, G__11367, G__11368, G__11369, G__11370);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11371 = a;
  var G__11372 = b;
  var G__11373 = c;
  var G__11374 = d;
  var G__11375 = e;
  var G__11376 = f;
  var G__11377 = g;
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__11371, G__11372, G__11373, G__11374, G__11375, G__11376, G__11377) : target_fn.call(null, G__11371, G__11372, G__11373, G__11374, G__11375, G__11376, G__11377);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11378 = a;
    var G__11379 = b;
    var G__11380 = c;
    var G__11381 = d;
    var G__11382 = e;
    var G__11383 = f;
    var G__11384 = g;
    var G__11385 = h;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__11378, G__11379, G__11380, G__11381, G__11382, G__11383, G__11384, G__11385) : self__.dispatch_fn.call(null, G__11378, G__11379, G__11380, G__11381, G__11382, G__11383, G__11384, G__11385);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11386 = a;
  var G__11387 = b;
  var G__11388 = c;
  var G__11389 = d;
  var G__11390 = e;
  var G__11391 = f;
  var G__11392 = g;
  var G__11393 = h;
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__11386, G__11387, G__11388, G__11389, G__11390, G__11391, G__11392, G__11393) : target_fn.call(null, G__11386, G__11387, G__11388, G__11389, G__11390, G__11391, G__11392, G__11393);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11394 = a;
    var G__11395 = b;
    var G__11396 = c;
    var G__11397 = d;
    var G__11398 = e;
    var G__11399 = f;
    var G__11400 = g;
    var G__11401 = h;
    var G__11402 = i;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__11394, G__11395, G__11396, G__11397, G__11398, G__11399, G__11400, G__11401, G__11402) : self__.dispatch_fn.call(null, G__11394, G__11395, G__11396, G__11397, G__11398, G__11399, G__11400, G__11401, G__11402);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11403 = a;
  var G__11404 = b;
  var G__11405 = c;
  var G__11406 = d;
  var G__11407 = e;
  var G__11408 = f;
  var G__11409 = g;
  var G__11410 = h;
  var G__11411 = i;
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__11403, G__11404, G__11405, G__11406, G__11407, G__11408, G__11409, G__11410, G__11411) : target_fn.call(null, G__11403, G__11404, G__11405, G__11406, G__11407, G__11408, G__11409, G__11410, G__11411);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11412 = a;
    var G__11413 = b;
    var G__11414 = c;
    var G__11415 = d;
    var G__11416 = e;
    var G__11417 = f;
    var G__11418 = g;
    var G__11419 = h;
    var G__11420 = i;
    var G__11421 = j;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__11412, G__11413, G__11414, G__11415, G__11416, G__11417, G__11418, G__11419, G__11420, G__11421) : self__.dispatch_fn.call(null, G__11412, G__11413, G__11414, G__11415, G__11416, G__11417, G__11418, G__11419, G__11420, G__11421);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11422 = a;
  var G__11423 = b;
  var G__11424 = c;
  var G__11425 = d;
  var G__11426 = e;
  var G__11427 = f;
  var G__11428 = g;
  var G__11429 = h;
  var G__11430 = i;
  var G__11431 = j;
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__11422, G__11423, G__11424, G__11425, G__11426, G__11427, G__11428, G__11429, G__11430, G__11431) : target_fn.call(null, G__11422, G__11423, G__11424, G__11425, G__11426, G__11427, G__11428, G__11429, G__11430, G__11431);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11432 = a;
    var G__11433 = b;
    var G__11434 = c;
    var G__11435 = d;
    var G__11436 = e;
    var G__11437 = f;
    var G__11438 = g;
    var G__11439 = h;
    var G__11440 = i;
    var G__11441 = j;
    var G__11442 = k;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__11432, G__11433, G__11434, G__11435, G__11436, G__11437, G__11438, G__11439, G__11440, G__11441, G__11442) : self__.dispatch_fn.call(null, G__11432, G__11433, G__11434, G__11435, G__11436, G__11437, G__11438, G__11439, G__11440, G__11441, G__11442);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11443 = a;
  var G__11444 = b;
  var G__11445 = c;
  var G__11446 = d;
  var G__11447 = e;
  var G__11448 = f;
  var G__11449 = g;
  var G__11450 = h;
  var G__11451 = i;
  var G__11452 = j;
  var G__11453 = k;
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__11443, G__11444, G__11445, G__11446, G__11447, G__11448, G__11449, G__11450, G__11451, G__11452, G__11453) : target_fn.call(null, G__11443, G__11444, G__11445, G__11446, G__11447, G__11448, G__11449, G__11450, G__11451, G__11452, G__11453);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11454 = a;
    var G__11455 = b;
    var G__11456 = c;
    var G__11457 = d;
    var G__11458 = e;
    var G__11459 = f;
    var G__11460 = g;
    var G__11461 = h;
    var G__11462 = i;
    var G__11463 = j;
    var G__11464 = k;
    var G__11465 = l;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__11454, G__11455, G__11456, G__11457, G__11458, G__11459, G__11460, G__11461, G__11462, G__11463, G__11464, G__11465) : self__.dispatch_fn.call(null, G__11454, G__11455, G__11456, G__11457, G__11458, G__11459, G__11460, G__11461, G__11462, G__11463, G__11464, G__11465);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11466 = a;
  var G__11467 = b;
  var G__11468 = c;
  var G__11469 = d;
  var G__11470 = e;
  var G__11471 = f;
  var G__11472 = g;
  var G__11473 = h;
  var G__11474 = i;
  var G__11475 = j;
  var G__11476 = k;
  var G__11477 = l;
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__11466, G__11467, G__11468, G__11469, G__11470, G__11471, G__11472, G__11473, G__11474, G__11475, G__11476, G__11477) : target_fn.call(null, G__11466, G__11467, G__11468, G__11469, G__11470, G__11471, G__11472, G__11473, G__11474, G__11475, G__11476, G__11477);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11478 = a;
    var G__11479 = b;
    var G__11480 = c;
    var G__11481 = d;
    var G__11482 = e;
    var G__11483 = f;
    var G__11484 = g;
    var G__11485 = h;
    var G__11486 = i;
    var G__11487 = j;
    var G__11488 = k;
    var G__11489 = l;
    var G__11490 = m;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__11478, G__11479, G__11480, G__11481, G__11482, G__11483, G__11484, G__11485, G__11486, G__11487, G__11488, G__11489, G__11490) : self__.dispatch_fn.call(null, G__11478, G__11479, G__11480, G__11481, G__11482, G__11483, G__11484, G__11485, G__11486, G__11487, G__11488, G__11489, G__11490);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11491 = a;
  var G__11492 = b;
  var G__11493 = c;
  var G__11494 = d;
  var G__11495 = e;
  var G__11496 = f;
  var G__11497 = g;
  var G__11498 = h;
  var G__11499 = i;
  var G__11500 = j;
  var G__11501 = k;
  var G__11502 = l;
  var G__11503 = m;
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__11491, G__11492, G__11493, G__11494, G__11495, G__11496, G__11497, G__11498, G__11499, G__11500, G__11501, G__11502, G__11503) : target_fn.call(null, G__11491, G__11492, G__11493, G__11494, G__11495, G__11496, G__11497, G__11498, G__11499, G__11500, G__11501, G__11502, G__11503);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11504 = a;
    var G__11505 = b;
    var G__11506 = c;
    var G__11507 = d;
    var G__11508 = e;
    var G__11509 = f;
    var G__11510 = g;
    var G__11511 = h;
    var G__11512 = i;
    var G__11513 = j;
    var G__11514 = k;
    var G__11515 = l;
    var G__11516 = m;
    var G__11517 = n;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__11504, G__11505, G__11506, G__11507, G__11508, G__11509, G__11510, G__11511, G__11512, G__11513, G__11514, G__11515, G__11516, G__11517) : self__.dispatch_fn.call(null, G__11504, G__11505, G__11506, G__11507, G__11508, G__11509, G__11510, G__11511, G__11512, G__11513, G__11514, G__11515, G__11516, G__11517);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11518 = a;
  var G__11519 = b;
  var G__11520 = c;
  var G__11521 = d;
  var G__11522 = e;
  var G__11523 = f;
  var G__11524 = g;
  var G__11525 = h;
  var G__11526 = i;
  var G__11527 = j;
  var G__11528 = k;
  var G__11529 = l;
  var G__11530 = m;
  var G__11531 = n;
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__11518, G__11519, G__11520, G__11521, G__11522, G__11523, G__11524, G__11525, G__11526, G__11527, G__11528, G__11529, G__11530, G__11531) : target_fn.call(null, G__11518, G__11519, G__11520, G__11521, G__11522, G__11523, G__11524, G__11525, G__11526, G__11527, G__11528, G__11529, G__11530, G__11531);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11532 = a;
    var G__11533 = b;
    var G__11534 = c;
    var G__11535 = d;
    var G__11536 = e;
    var G__11537 = f;
    var G__11538 = g;
    var G__11539 = h;
    var G__11540 = i;
    var G__11541 = j;
    var G__11542 = k;
    var G__11543 = l;
    var G__11544 = m;
    var G__11545 = n;
    var G__11546 = o;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__11532, G__11533, G__11534, G__11535, G__11536, G__11537, G__11538, G__11539, G__11540, G__11541, G__11542, G__11543, G__11544, G__11545, G__11546) : self__.dispatch_fn.call(null, G__11532, G__11533, G__11534, G__11535, G__11536, G__11537, G__11538, G__11539, G__11540, G__11541, G__11542, G__11543, G__11544, G__11545, G__11546);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11547 = a;
  var G__11548 = b;
  var G__11549 = c;
  var G__11550 = d;
  var G__11551 = e;
  var G__11552 = f;
  var G__11553 = g;
  var G__11554 = h;
  var G__11555 = i;
  var G__11556 = j;
  var G__11557 = k;
  var G__11558 = l;
  var G__11559 = m;
  var G__11560 = n;
  var G__11561 = o;
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__11547, G__11548, G__11549, G__11550, G__11551, G__11552, G__11553, G__11554, G__11555, G__11556, G__11557, G__11558, G__11559, G__11560, G__11561) : target_fn.call(null, G__11547, G__11548, G__11549, G__11550, G__11551, G__11552, G__11553, G__11554, G__11555, G__11556, G__11557, G__11558, G__11559, G__11560, G__11561);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11562 = a;
    var G__11563 = b;
    var G__11564 = c;
    var G__11565 = d;
    var G__11566 = e;
    var G__11567 = f;
    var G__11568 = g;
    var G__11569 = h;
    var G__11570 = i;
    var G__11571 = j;
    var G__11572 = k;
    var G__11573 = l;
    var G__11574 = m;
    var G__11575 = n;
    var G__11576 = o;
    var G__11577 = p;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__11562, G__11563, G__11564, G__11565, G__11566, G__11567, G__11568, G__11569, G__11570, G__11571, G__11572, G__11573, G__11574, G__11575, G__11576, G__11577) : self__.dispatch_fn.call(null, G__11562, G__11563, G__11564, G__11565, G__11566, G__11567, G__11568, G__11569, G__11570, G__11571, G__11572, G__11573, G__11574, G__11575, G__11576, G__11577);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11578 = a;
  var G__11579 = b;
  var G__11580 = c;
  var G__11581 = d;
  var G__11582 = e;
  var G__11583 = f;
  var G__11584 = g;
  var G__11585 = h;
  var G__11586 = i;
  var G__11587 = j;
  var G__11588 = k;
  var G__11589 = l;
  var G__11590 = m;
  var G__11591 = n;
  var G__11592 = o;
  var G__11593 = p;
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__11578, G__11579, G__11580, G__11581, G__11582, G__11583, G__11584, G__11585, G__11586, G__11587, G__11588, G__11589, G__11590, G__11591, G__11592, G__11593) : target_fn.call(null, G__11578, G__11579, G__11580, G__11581, G__11582, G__11583, G__11584, G__11585, G__11586, G__11587, G__11588, G__11589, G__11590, G__11591, G__11592, G__11593);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11594 = a;
    var G__11595 = b;
    var G__11596 = c;
    var G__11597 = d;
    var G__11598 = e;
    var G__11599 = f;
    var G__11600 = g;
    var G__11601 = h;
    var G__11602 = i;
    var G__11603 = j;
    var G__11604 = k;
    var G__11605 = l;
    var G__11606 = m;
    var G__11607 = n;
    var G__11608 = o;
    var G__11609 = p;
    var G__11610 = q;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__11594, G__11595, G__11596, G__11597, G__11598, G__11599, G__11600, G__11601, G__11602, G__11603, G__11604, G__11605, G__11606, G__11607, G__11608, G__11609, G__11610) : self__.dispatch_fn.call(null, G__11594, G__11595, G__11596, G__11597, G__11598, G__11599, G__11600, G__11601, G__11602, G__11603, G__11604, G__11605, G__11606, G__11607, G__11608, G__11609, G__11610);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11611 = a;
  var G__11612 = b;
  var G__11613 = c;
  var G__11614 = d;
  var G__11615 = e;
  var G__11616 = f;
  var G__11617 = g;
  var G__11618 = h;
  var G__11619 = i;
  var G__11620 = j;
  var G__11621 = k;
  var G__11622 = l;
  var G__11623 = m;
  var G__11624 = n;
  var G__11625 = o;
  var G__11626 = p;
  var G__11627 = q;
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__11611, G__11612, G__11613, G__11614, G__11615, G__11616, G__11617, G__11618, G__11619, G__11620, G__11621, G__11622, G__11623, G__11624, G__11625, G__11626, G__11627) : target_fn.call(null, G__11611, G__11612, G__11613, G__11614, G__11615, G__11616, G__11617, G__11618, G__11619, G__11620, G__11621, G__11622, G__11623, G__11624, G__11625, G__11626, G__11627);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11628 = a;
    var G__11629 = b;
    var G__11630 = c;
    var G__11631 = d;
    var G__11632 = e;
    var G__11633 = f;
    var G__11634 = g;
    var G__11635 = h;
    var G__11636 = i;
    var G__11637 = j;
    var G__11638 = k;
    var G__11639 = l;
    var G__11640 = m;
    var G__11641 = n;
    var G__11642 = o;
    var G__11643 = p;
    var G__11644 = q;
    var G__11645 = r;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__11628, G__11629, G__11630, G__11631, G__11632, G__11633, G__11634, G__11635, G__11636, G__11637, G__11638, G__11639, G__11640, G__11641, G__11642, G__11643, G__11644, G__11645) : self__.dispatch_fn.call(null, G__11628, G__11629, G__11630, G__11631, G__11632, G__11633, G__11634, G__11635, G__11636, G__11637, G__11638, G__11639, G__11640, G__11641, G__11642, G__11643, G__11644, G__11645);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11646 = a;
  var G__11647 = b;
  var G__11648 = c;
  var G__11649 = d;
  var G__11650 = e;
  var G__11651 = f;
  var G__11652 = g;
  var G__11653 = h;
  var G__11654 = i;
  var G__11655 = j;
  var G__11656 = k;
  var G__11657 = l;
  var G__11658 = m;
  var G__11659 = n;
  var G__11660 = o;
  var G__11661 = p;
  var G__11662 = q;
  var G__11663 = r;
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__11646, G__11647, G__11648, G__11649, G__11650, G__11651, G__11652, G__11653, G__11654, G__11655, G__11656, G__11657, G__11658, G__11659, G__11660, G__11661, G__11662, G__11663) : target_fn.call(null, G__11646, G__11647, G__11648, G__11649, G__11650, G__11651, G__11652, G__11653, G__11654, G__11655, G__11656, G__11657, G__11658, G__11659, G__11660, G__11661, G__11662, G__11663);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11664 = a;
    var G__11665 = b;
    var G__11666 = c;
    var G__11667 = d;
    var G__11668 = e;
    var G__11669 = f;
    var G__11670 = g;
    var G__11671 = h;
    var G__11672 = i;
    var G__11673 = j;
    var G__11674 = k;
    var G__11675 = l;
    var G__11676 = m;
    var G__11677 = n;
    var G__11678 = o;
    var G__11679 = p;
    var G__11680 = q;
    var G__11681 = r;
    var G__11682 = s;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__11664, G__11665, G__11666, G__11667, G__11668, G__11669, G__11670, G__11671, G__11672, G__11673, G__11674, G__11675, G__11676, G__11677, G__11678, G__11679, G__11680, G__11681, G__11682) : self__.dispatch_fn.call(null, G__11664, G__11665, G__11666, G__11667, G__11668, G__11669, G__11670, G__11671, G__11672, G__11673, G__11674, G__11675, G__11676, G__11677, G__11678, G__11679, G__11680, 
    G__11681, G__11682);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11683 = a;
  var G__11684 = b;
  var G__11685 = c;
  var G__11686 = d;
  var G__11687 = e;
  var G__11688 = f;
  var G__11689 = g;
  var G__11690 = h;
  var G__11691 = i;
  var G__11692 = j;
  var G__11693 = k;
  var G__11694 = l;
  var G__11695 = m;
  var G__11696 = n;
  var G__11697 = o;
  var G__11698 = p;
  var G__11699 = q;
  var G__11700 = r;
  var G__11701 = s;
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__11683, G__11684, G__11685, G__11686, G__11687, G__11688, G__11689, G__11690, G__11691, G__11692, G__11693, G__11694, G__11695, G__11696, G__11697, G__11698, G__11699, G__11700, G__11701) : target_fn.call(null, G__11683, G__11684, G__11685, G__11686, G__11687, G__11688, G__11689, G__11690, G__11691, G__11692, G__11693, G__11694, G__11695, G__11696, G__11697, G__11698, G__11699, G__11700, G__11701);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11702 = a;
    var G__11703 = b;
    var G__11704 = c;
    var G__11705 = d;
    var G__11706 = e;
    var G__11707 = f;
    var G__11708 = g;
    var G__11709 = h;
    var G__11710 = i;
    var G__11711 = j;
    var G__11712 = k;
    var G__11713 = l;
    var G__11714 = m;
    var G__11715 = n;
    var G__11716 = o;
    var G__11717 = p;
    var G__11718 = q;
    var G__11719 = r;
    var G__11720 = s;
    var G__11721 = t;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__11702, G__11703, G__11704, G__11705, G__11706, G__11707, G__11708, G__11709, G__11710, G__11711, G__11712, G__11713, G__11714, G__11715, G__11716, G__11717, G__11718, G__11719, G__11720, G__11721) : self__.dispatch_fn.call(null, G__11702, G__11703, G__11704, G__11705, G__11706, G__11707, G__11708, G__11709, G__11710, G__11711, G__11712, G__11713, G__11714, G__11715, G__11716, G__11717, 
    G__11718, G__11719, G__11720, G__11721);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11722 = a;
  var G__11723 = b;
  var G__11724 = c;
  var G__11725 = d;
  var G__11726 = e;
  var G__11727 = f;
  var G__11728 = g;
  var G__11729 = h;
  var G__11730 = i;
  var G__11731 = j;
  var G__11732 = k;
  var G__11733 = l;
  var G__11734 = m;
  var G__11735 = n;
  var G__11736 = o;
  var G__11737 = p;
  var G__11738 = q;
  var G__11739 = r;
  var G__11740 = s;
  var G__11741 = t;
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__11722, G__11723, G__11724, G__11725, G__11726, G__11727, G__11728, G__11729, G__11730, G__11731, G__11732, G__11733, G__11734, G__11735, G__11736, G__11737, G__11738, G__11739, G__11740, G__11741) : target_fn.call(null, G__11722, G__11723, G__11724, G__11725, G__11726, G__11727, G__11728, G__11729, G__11730, G__11731, G__11732, G__11733, G__11734, G__11735, G__11736, G__11737, G__11738, G__11739, G__11740, 
  G__11741);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function cljs$core$__GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function cljs$core$remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function cljs$core$remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function cljs$core$prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function cljs$core$methods(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function cljs$core$get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function cljs$core$prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  var G__11743 = self__.uuid;
  var G__11744 = other.uuid;
  return goog.array.defaultCompare(G__11743, G__11744);
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__11745 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([this$__$1], 0));
  return goog.string.hashCode(G__11745);
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function cljs$core$__GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.pr_writer_ex_info = function cljs$core$pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#ExceptionInfo{:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ExceptionInfo = function cljs$core$ExceptionInfo(message, data, cause) {
  var e = new Error;
  var this$ = this;
  this$.message = message;
  this$.data = data;
  this$.cause = cause;
  this$.name = e.name;
  this$.description = e.description;
  this$.number = e.number;
  this$.fileName = e.fileName;
  this$.lineNumber = e.lineNumber;
  this$.columnNumber = e.columnNumber;
  this$.stack = e.stack;
  return this$;
};
cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
  var obj__$1 = this;
  return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
};
cljs.core.ExceptionInfo.prototype.toString = function() {
  var this$ = this;
  return cljs.core.pr_str_STAR_(this$);
};
cljs.core.ex_info = function() {
  var cljs$core$ex_info = null;
  var cljs$core$ex_info__2 = function(msg, data) {
    return cljs$core$ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
  };
  var cljs$core$ex_info__3 = function(msg, data, cause) {
    return new cljs.core.ExceptionInfo(msg, data, cause);
  };
  cljs$core$ex_info = function(msg, data, cause) {
    switch(arguments.length) {
      case 2:
        return cljs$core$ex_info__2.call(this, msg, data);
      case 3:
        return cljs$core$ex_info__3.call(this, msg, data, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$ex_info.cljs$core$IFn$_invoke$arity$2 = cljs$core$ex_info__2;
  cljs$core$ex_info.cljs$core$IFn$_invoke$arity$3 = cljs$core$ex_info__3;
  return cljs$core$ex_info;
}();
cljs.core.ex_data = function cljs$core$ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function cljs$core$ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function cljs$core$ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function cljs$core$comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(function() {
      var G__11753 = x;
      var G__11754 = y;
      return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__11753, G__11754) : pred.call(null, G__11753, G__11754);
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(function() {
        var G__11755 = y;
        var G__11756 = x;
        return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__11755, G__11756) : pred.call(null, G__11755, G__11756);
      }())) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function cljs$core$special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", 
  "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), 
  null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function cljs$core$test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
goog.provide("om.dom");
goog.require("cljs.core");
goog.require("goog.object");
om.dom.a = function() {
  var om$dom$a__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.a.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$a = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8717__i = 0, G__8717__a = new Array(arguments.length - 1);
      while (G__8717__i < G__8717__a.length) {
        G__8717__a[G__8717__i] = arguments[G__8717__i + 1];
        ++G__8717__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8717__a, 0);
    }
    return om$dom$a__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$a.cljs$lang$maxFixedArity = 1;
  om$dom$a.cljs$lang$applyTo = function(arglist__8718) {
    var opts__6241__auto__ = cljs.core.first(arglist__8718);
    var children__6242__auto__ = cljs.core.rest(arglist__8718);
    return om$dom$a__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$a.cljs$core$IFn$_invoke$arity$variadic = om$dom$a__delegate;
  return om$dom$a;
}();
om.dom.abbr = function() {
  var om$dom$abbr__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.abbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$abbr = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8719__i = 0, G__8719__a = new Array(arguments.length - 1);
      while (G__8719__i < G__8719__a.length) {
        G__8719__a[G__8719__i] = arguments[G__8719__i + 1];
        ++G__8719__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8719__a, 0);
    }
    return om$dom$abbr__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$abbr.cljs$lang$maxFixedArity = 1;
  om$dom$abbr.cljs$lang$applyTo = function(arglist__8720) {
    var opts__6241__auto__ = cljs.core.first(arglist__8720);
    var children__6242__auto__ = cljs.core.rest(arglist__8720);
    return om$dom$abbr__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$abbr.cljs$core$IFn$_invoke$arity$variadic = om$dom$abbr__delegate;
  return om$dom$abbr;
}();
om.dom.address = function() {
  var om$dom$address__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.address.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$address = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8721__i = 0, G__8721__a = new Array(arguments.length - 1);
      while (G__8721__i < G__8721__a.length) {
        G__8721__a[G__8721__i] = arguments[G__8721__i + 1];
        ++G__8721__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8721__a, 0);
    }
    return om$dom$address__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$address.cljs$lang$maxFixedArity = 1;
  om$dom$address.cljs$lang$applyTo = function(arglist__8722) {
    var opts__6241__auto__ = cljs.core.first(arglist__8722);
    var children__6242__auto__ = cljs.core.rest(arglist__8722);
    return om$dom$address__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$address.cljs$core$IFn$_invoke$arity$variadic = om$dom$address__delegate;
  return om$dom$address;
}();
om.dom.area = function() {
  var om$dom$area__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.area.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$area = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8723__i = 0, G__8723__a = new Array(arguments.length - 1);
      while (G__8723__i < G__8723__a.length) {
        G__8723__a[G__8723__i] = arguments[G__8723__i + 1];
        ++G__8723__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8723__a, 0);
    }
    return om$dom$area__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$area.cljs$lang$maxFixedArity = 1;
  om$dom$area.cljs$lang$applyTo = function(arglist__8724) {
    var opts__6241__auto__ = cljs.core.first(arglist__8724);
    var children__6242__auto__ = cljs.core.rest(arglist__8724);
    return om$dom$area__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$area.cljs$core$IFn$_invoke$arity$variadic = om$dom$area__delegate;
  return om$dom$area;
}();
om.dom.article = function() {
  var om$dom$article__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.article.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$article = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8725__i = 0, G__8725__a = new Array(arguments.length - 1);
      while (G__8725__i < G__8725__a.length) {
        G__8725__a[G__8725__i] = arguments[G__8725__i + 1];
        ++G__8725__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8725__a, 0);
    }
    return om$dom$article__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$article.cljs$lang$maxFixedArity = 1;
  om$dom$article.cljs$lang$applyTo = function(arglist__8726) {
    var opts__6241__auto__ = cljs.core.first(arglist__8726);
    var children__6242__auto__ = cljs.core.rest(arglist__8726);
    return om$dom$article__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$article.cljs$core$IFn$_invoke$arity$variadic = om$dom$article__delegate;
  return om$dom$article;
}();
om.dom.aside = function() {
  var om$dom$aside__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.aside.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$aside = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8727__i = 0, G__8727__a = new Array(arguments.length - 1);
      while (G__8727__i < G__8727__a.length) {
        G__8727__a[G__8727__i] = arguments[G__8727__i + 1];
        ++G__8727__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8727__a, 0);
    }
    return om$dom$aside__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$aside.cljs$lang$maxFixedArity = 1;
  om$dom$aside.cljs$lang$applyTo = function(arglist__8728) {
    var opts__6241__auto__ = cljs.core.first(arglist__8728);
    var children__6242__auto__ = cljs.core.rest(arglist__8728);
    return om$dom$aside__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$aside.cljs$core$IFn$_invoke$arity$variadic = om$dom$aside__delegate;
  return om$dom$aside;
}();
om.dom.audio = function() {
  var om$dom$audio__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.audio.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$audio = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8729__i = 0, G__8729__a = new Array(arguments.length - 1);
      while (G__8729__i < G__8729__a.length) {
        G__8729__a[G__8729__i] = arguments[G__8729__i + 1];
        ++G__8729__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8729__a, 0);
    }
    return om$dom$audio__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$audio.cljs$lang$maxFixedArity = 1;
  om$dom$audio.cljs$lang$applyTo = function(arglist__8730) {
    var opts__6241__auto__ = cljs.core.first(arglist__8730);
    var children__6242__auto__ = cljs.core.rest(arglist__8730);
    return om$dom$audio__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$audio.cljs$core$IFn$_invoke$arity$variadic = om$dom$audio__delegate;
  return om$dom$audio;
}();
om.dom.b = function() {
  var om$dom$b__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.b.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$b = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8731__i = 0, G__8731__a = new Array(arguments.length - 1);
      while (G__8731__i < G__8731__a.length) {
        G__8731__a[G__8731__i] = arguments[G__8731__i + 1];
        ++G__8731__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8731__a, 0);
    }
    return om$dom$b__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$b.cljs$lang$maxFixedArity = 1;
  om$dom$b.cljs$lang$applyTo = function(arglist__8732) {
    var opts__6241__auto__ = cljs.core.first(arglist__8732);
    var children__6242__auto__ = cljs.core.rest(arglist__8732);
    return om$dom$b__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$b.cljs$core$IFn$_invoke$arity$variadic = om$dom$b__delegate;
  return om$dom$b;
}();
om.dom.base = function() {
  var om$dom$base__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.base.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$base = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8733__i = 0, G__8733__a = new Array(arguments.length - 1);
      while (G__8733__i < G__8733__a.length) {
        G__8733__a[G__8733__i] = arguments[G__8733__i + 1];
        ++G__8733__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8733__a, 0);
    }
    return om$dom$base__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$base.cljs$lang$maxFixedArity = 1;
  om$dom$base.cljs$lang$applyTo = function(arglist__8734) {
    var opts__6241__auto__ = cljs.core.first(arglist__8734);
    var children__6242__auto__ = cljs.core.rest(arglist__8734);
    return om$dom$base__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$base.cljs$core$IFn$_invoke$arity$variadic = om$dom$base__delegate;
  return om$dom$base;
}();
om.dom.bdi = function() {
  var om$dom$bdi__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.bdi.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$bdi = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8735__i = 0, G__8735__a = new Array(arguments.length - 1);
      while (G__8735__i < G__8735__a.length) {
        G__8735__a[G__8735__i] = arguments[G__8735__i + 1];
        ++G__8735__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8735__a, 0);
    }
    return om$dom$bdi__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$bdi.cljs$lang$maxFixedArity = 1;
  om$dom$bdi.cljs$lang$applyTo = function(arglist__8736) {
    var opts__6241__auto__ = cljs.core.first(arglist__8736);
    var children__6242__auto__ = cljs.core.rest(arglist__8736);
    return om$dom$bdi__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$bdi.cljs$core$IFn$_invoke$arity$variadic = om$dom$bdi__delegate;
  return om$dom$bdi;
}();
om.dom.bdo = function() {
  var om$dom$bdo__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.bdo.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$bdo = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8737__i = 0, G__8737__a = new Array(arguments.length - 1);
      while (G__8737__i < G__8737__a.length) {
        G__8737__a[G__8737__i] = arguments[G__8737__i + 1];
        ++G__8737__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8737__a, 0);
    }
    return om$dom$bdo__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$bdo.cljs$lang$maxFixedArity = 1;
  om$dom$bdo.cljs$lang$applyTo = function(arglist__8738) {
    var opts__6241__auto__ = cljs.core.first(arglist__8738);
    var children__6242__auto__ = cljs.core.rest(arglist__8738);
    return om$dom$bdo__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$bdo.cljs$core$IFn$_invoke$arity$variadic = om$dom$bdo__delegate;
  return om$dom$bdo;
}();
om.dom.big = function() {
  var om$dom$big__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.big.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$big = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8739__i = 0, G__8739__a = new Array(arguments.length - 1);
      while (G__8739__i < G__8739__a.length) {
        G__8739__a[G__8739__i] = arguments[G__8739__i + 1];
        ++G__8739__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8739__a, 0);
    }
    return om$dom$big__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$big.cljs$lang$maxFixedArity = 1;
  om$dom$big.cljs$lang$applyTo = function(arglist__8740) {
    var opts__6241__auto__ = cljs.core.first(arglist__8740);
    var children__6242__auto__ = cljs.core.rest(arglist__8740);
    return om$dom$big__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$big.cljs$core$IFn$_invoke$arity$variadic = om$dom$big__delegate;
  return om$dom$big;
}();
om.dom.blockquote = function() {
  var om$dom$blockquote__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.blockquote.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$blockquote = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8741__i = 0, G__8741__a = new Array(arguments.length - 1);
      while (G__8741__i < G__8741__a.length) {
        G__8741__a[G__8741__i] = arguments[G__8741__i + 1];
        ++G__8741__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8741__a, 0);
    }
    return om$dom$blockquote__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$blockquote.cljs$lang$maxFixedArity = 1;
  om$dom$blockquote.cljs$lang$applyTo = function(arglist__8742) {
    var opts__6241__auto__ = cljs.core.first(arglist__8742);
    var children__6242__auto__ = cljs.core.rest(arglist__8742);
    return om$dom$blockquote__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$blockquote.cljs$core$IFn$_invoke$arity$variadic = om$dom$blockquote__delegate;
  return om$dom$blockquote;
}();
om.dom.body = function() {
  var om$dom$body__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.body.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$body = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8743__i = 0, G__8743__a = new Array(arguments.length - 1);
      while (G__8743__i < G__8743__a.length) {
        G__8743__a[G__8743__i] = arguments[G__8743__i + 1];
        ++G__8743__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8743__a, 0);
    }
    return om$dom$body__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$body.cljs$lang$maxFixedArity = 1;
  om$dom$body.cljs$lang$applyTo = function(arglist__8744) {
    var opts__6241__auto__ = cljs.core.first(arglist__8744);
    var children__6242__auto__ = cljs.core.rest(arglist__8744);
    return om$dom$body__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$body.cljs$core$IFn$_invoke$arity$variadic = om$dom$body__delegate;
  return om$dom$body;
}();
om.dom.br = function() {
  var om$dom$br__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.br.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$br = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8745__i = 0, G__8745__a = new Array(arguments.length - 1);
      while (G__8745__i < G__8745__a.length) {
        G__8745__a[G__8745__i] = arguments[G__8745__i + 1];
        ++G__8745__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8745__a, 0);
    }
    return om$dom$br__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$br.cljs$lang$maxFixedArity = 1;
  om$dom$br.cljs$lang$applyTo = function(arglist__8746) {
    var opts__6241__auto__ = cljs.core.first(arglist__8746);
    var children__6242__auto__ = cljs.core.rest(arglist__8746);
    return om$dom$br__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$br.cljs$core$IFn$_invoke$arity$variadic = om$dom$br__delegate;
  return om$dom$br;
}();
om.dom.button = function() {
  var om$dom$button__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.button.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$button = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8747__i = 0, G__8747__a = new Array(arguments.length - 1);
      while (G__8747__i < G__8747__a.length) {
        G__8747__a[G__8747__i] = arguments[G__8747__i + 1];
        ++G__8747__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8747__a, 0);
    }
    return om$dom$button__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$button.cljs$lang$maxFixedArity = 1;
  om$dom$button.cljs$lang$applyTo = function(arglist__8748) {
    var opts__6241__auto__ = cljs.core.first(arglist__8748);
    var children__6242__auto__ = cljs.core.rest(arglist__8748);
    return om$dom$button__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$button.cljs$core$IFn$_invoke$arity$variadic = om$dom$button__delegate;
  return om$dom$button;
}();
om.dom.canvas = function() {
  var om$dom$canvas__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.canvas.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$canvas = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8749__i = 0, G__8749__a = new Array(arguments.length - 1);
      while (G__8749__i < G__8749__a.length) {
        G__8749__a[G__8749__i] = arguments[G__8749__i + 1];
        ++G__8749__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8749__a, 0);
    }
    return om$dom$canvas__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$canvas.cljs$lang$maxFixedArity = 1;
  om$dom$canvas.cljs$lang$applyTo = function(arglist__8750) {
    var opts__6241__auto__ = cljs.core.first(arglist__8750);
    var children__6242__auto__ = cljs.core.rest(arglist__8750);
    return om$dom$canvas__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$canvas.cljs$core$IFn$_invoke$arity$variadic = om$dom$canvas__delegate;
  return om$dom$canvas;
}();
om.dom.caption = function() {
  var om$dom$caption__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.caption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$caption = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8751__i = 0, G__8751__a = new Array(arguments.length - 1);
      while (G__8751__i < G__8751__a.length) {
        G__8751__a[G__8751__i] = arguments[G__8751__i + 1];
        ++G__8751__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8751__a, 0);
    }
    return om$dom$caption__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$caption.cljs$lang$maxFixedArity = 1;
  om$dom$caption.cljs$lang$applyTo = function(arglist__8752) {
    var opts__6241__auto__ = cljs.core.first(arglist__8752);
    var children__6242__auto__ = cljs.core.rest(arglist__8752);
    return om$dom$caption__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$caption.cljs$core$IFn$_invoke$arity$variadic = om$dom$caption__delegate;
  return om$dom$caption;
}();
om.dom.cite = function() {
  var om$dom$cite__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.cite.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$cite = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8753__i = 0, G__8753__a = new Array(arguments.length - 1);
      while (G__8753__i < G__8753__a.length) {
        G__8753__a[G__8753__i] = arguments[G__8753__i + 1];
        ++G__8753__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8753__a, 0);
    }
    return om$dom$cite__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$cite.cljs$lang$maxFixedArity = 1;
  om$dom$cite.cljs$lang$applyTo = function(arglist__8754) {
    var opts__6241__auto__ = cljs.core.first(arglist__8754);
    var children__6242__auto__ = cljs.core.rest(arglist__8754);
    return om$dom$cite__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$cite.cljs$core$IFn$_invoke$arity$variadic = om$dom$cite__delegate;
  return om$dom$cite;
}();
om.dom.code = function() {
  var om$dom$code__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.code.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$code = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8755__i = 0, G__8755__a = new Array(arguments.length - 1);
      while (G__8755__i < G__8755__a.length) {
        G__8755__a[G__8755__i] = arguments[G__8755__i + 1];
        ++G__8755__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8755__a, 0);
    }
    return om$dom$code__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$code.cljs$lang$maxFixedArity = 1;
  om$dom$code.cljs$lang$applyTo = function(arglist__8756) {
    var opts__6241__auto__ = cljs.core.first(arglist__8756);
    var children__6242__auto__ = cljs.core.rest(arglist__8756);
    return om$dom$code__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$code.cljs$core$IFn$_invoke$arity$variadic = om$dom$code__delegate;
  return om$dom$code;
}();
om.dom.col = function() {
  var om$dom$col__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.col.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$col = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8757__i = 0, G__8757__a = new Array(arguments.length - 1);
      while (G__8757__i < G__8757__a.length) {
        G__8757__a[G__8757__i] = arguments[G__8757__i + 1];
        ++G__8757__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8757__a, 0);
    }
    return om$dom$col__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$col.cljs$lang$maxFixedArity = 1;
  om$dom$col.cljs$lang$applyTo = function(arglist__8758) {
    var opts__6241__auto__ = cljs.core.first(arglist__8758);
    var children__6242__auto__ = cljs.core.rest(arglist__8758);
    return om$dom$col__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$col.cljs$core$IFn$_invoke$arity$variadic = om$dom$col__delegate;
  return om$dom$col;
}();
om.dom.colgroup = function() {
  var om$dom$colgroup__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.colgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$colgroup = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8759__i = 0, G__8759__a = new Array(arguments.length - 1);
      while (G__8759__i < G__8759__a.length) {
        G__8759__a[G__8759__i] = arguments[G__8759__i + 1];
        ++G__8759__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8759__a, 0);
    }
    return om$dom$colgroup__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$colgroup.cljs$lang$maxFixedArity = 1;
  om$dom$colgroup.cljs$lang$applyTo = function(arglist__8760) {
    var opts__6241__auto__ = cljs.core.first(arglist__8760);
    var children__6242__auto__ = cljs.core.rest(arglist__8760);
    return om$dom$colgroup__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$colgroup.cljs$core$IFn$_invoke$arity$variadic = om$dom$colgroup__delegate;
  return om$dom$colgroup;
}();
om.dom.data = function() {
  var om$dom$data__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.data.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$data = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8761__i = 0, G__8761__a = new Array(arguments.length - 1);
      while (G__8761__i < G__8761__a.length) {
        G__8761__a[G__8761__i] = arguments[G__8761__i + 1];
        ++G__8761__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8761__a, 0);
    }
    return om$dom$data__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$data.cljs$lang$maxFixedArity = 1;
  om$dom$data.cljs$lang$applyTo = function(arglist__8762) {
    var opts__6241__auto__ = cljs.core.first(arglist__8762);
    var children__6242__auto__ = cljs.core.rest(arglist__8762);
    return om$dom$data__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$data.cljs$core$IFn$_invoke$arity$variadic = om$dom$data__delegate;
  return om$dom$data;
}();
om.dom.datalist = function() {
  var om$dom$datalist__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.datalist.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$datalist = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8763__i = 0, G__8763__a = new Array(arguments.length - 1);
      while (G__8763__i < G__8763__a.length) {
        G__8763__a[G__8763__i] = arguments[G__8763__i + 1];
        ++G__8763__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8763__a, 0);
    }
    return om$dom$datalist__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$datalist.cljs$lang$maxFixedArity = 1;
  om$dom$datalist.cljs$lang$applyTo = function(arglist__8764) {
    var opts__6241__auto__ = cljs.core.first(arglist__8764);
    var children__6242__auto__ = cljs.core.rest(arglist__8764);
    return om$dom$datalist__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$datalist.cljs$core$IFn$_invoke$arity$variadic = om$dom$datalist__delegate;
  return om$dom$datalist;
}();
om.dom.dd = function() {
  var om$dom$dd__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.dd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$dd = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8765__i = 0, G__8765__a = new Array(arguments.length - 1);
      while (G__8765__i < G__8765__a.length) {
        G__8765__a[G__8765__i] = arguments[G__8765__i + 1];
        ++G__8765__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8765__a, 0);
    }
    return om$dom$dd__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$dd.cljs$lang$maxFixedArity = 1;
  om$dom$dd.cljs$lang$applyTo = function(arglist__8766) {
    var opts__6241__auto__ = cljs.core.first(arglist__8766);
    var children__6242__auto__ = cljs.core.rest(arglist__8766);
    return om$dom$dd__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$dd.cljs$core$IFn$_invoke$arity$variadic = om$dom$dd__delegate;
  return om$dom$dd;
}();
om.dom.del = function() {
  var om$dom$del__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.del.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$del = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8767__i = 0, G__8767__a = new Array(arguments.length - 1);
      while (G__8767__i < G__8767__a.length) {
        G__8767__a[G__8767__i] = arguments[G__8767__i + 1];
        ++G__8767__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8767__a, 0);
    }
    return om$dom$del__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$del.cljs$lang$maxFixedArity = 1;
  om$dom$del.cljs$lang$applyTo = function(arglist__8768) {
    var opts__6241__auto__ = cljs.core.first(arglist__8768);
    var children__6242__auto__ = cljs.core.rest(arglist__8768);
    return om$dom$del__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$del.cljs$core$IFn$_invoke$arity$variadic = om$dom$del__delegate;
  return om$dom$del;
}();
om.dom.dfn = function() {
  var om$dom$dfn__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.dfn.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$dfn = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8769__i = 0, G__8769__a = new Array(arguments.length - 1);
      while (G__8769__i < G__8769__a.length) {
        G__8769__a[G__8769__i] = arguments[G__8769__i + 1];
        ++G__8769__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8769__a, 0);
    }
    return om$dom$dfn__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$dfn.cljs$lang$maxFixedArity = 1;
  om$dom$dfn.cljs$lang$applyTo = function(arglist__8770) {
    var opts__6241__auto__ = cljs.core.first(arglist__8770);
    var children__6242__auto__ = cljs.core.rest(arglist__8770);
    return om$dom$dfn__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$dfn.cljs$core$IFn$_invoke$arity$variadic = om$dom$dfn__delegate;
  return om$dom$dfn;
}();
om.dom.div = function() {
  var om$dom$div__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.div.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$div = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8771__i = 0, G__8771__a = new Array(arguments.length - 1);
      while (G__8771__i < G__8771__a.length) {
        G__8771__a[G__8771__i] = arguments[G__8771__i + 1];
        ++G__8771__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8771__a, 0);
    }
    return om$dom$div__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$div.cljs$lang$maxFixedArity = 1;
  om$dom$div.cljs$lang$applyTo = function(arglist__8772) {
    var opts__6241__auto__ = cljs.core.first(arglist__8772);
    var children__6242__auto__ = cljs.core.rest(arglist__8772);
    return om$dom$div__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$div.cljs$core$IFn$_invoke$arity$variadic = om$dom$div__delegate;
  return om$dom$div;
}();
om.dom.dl = function() {
  var om$dom$dl__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.dl.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$dl = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8773__i = 0, G__8773__a = new Array(arguments.length - 1);
      while (G__8773__i < G__8773__a.length) {
        G__8773__a[G__8773__i] = arguments[G__8773__i + 1];
        ++G__8773__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8773__a, 0);
    }
    return om$dom$dl__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$dl.cljs$lang$maxFixedArity = 1;
  om$dom$dl.cljs$lang$applyTo = function(arglist__8774) {
    var opts__6241__auto__ = cljs.core.first(arglist__8774);
    var children__6242__auto__ = cljs.core.rest(arglist__8774);
    return om$dom$dl__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$dl.cljs$core$IFn$_invoke$arity$variadic = om$dom$dl__delegate;
  return om$dom$dl;
}();
om.dom.dt = function() {
  var om$dom$dt__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.dt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$dt = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8775__i = 0, G__8775__a = new Array(arguments.length - 1);
      while (G__8775__i < G__8775__a.length) {
        G__8775__a[G__8775__i] = arguments[G__8775__i + 1];
        ++G__8775__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8775__a, 0);
    }
    return om$dom$dt__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$dt.cljs$lang$maxFixedArity = 1;
  om$dom$dt.cljs$lang$applyTo = function(arglist__8776) {
    var opts__6241__auto__ = cljs.core.first(arglist__8776);
    var children__6242__auto__ = cljs.core.rest(arglist__8776);
    return om$dom$dt__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$dt.cljs$core$IFn$_invoke$arity$variadic = om$dom$dt__delegate;
  return om$dom$dt;
}();
om.dom.em = function() {
  var om$dom$em__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.em.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$em = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8777__i = 0, G__8777__a = new Array(arguments.length - 1);
      while (G__8777__i < G__8777__a.length) {
        G__8777__a[G__8777__i] = arguments[G__8777__i + 1];
        ++G__8777__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8777__a, 0);
    }
    return om$dom$em__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$em.cljs$lang$maxFixedArity = 1;
  om$dom$em.cljs$lang$applyTo = function(arglist__8778) {
    var opts__6241__auto__ = cljs.core.first(arglist__8778);
    var children__6242__auto__ = cljs.core.rest(arglist__8778);
    return om$dom$em__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$em.cljs$core$IFn$_invoke$arity$variadic = om$dom$em__delegate;
  return om$dom$em;
}();
om.dom.embed = function() {
  var om$dom$embed__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.embed.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$embed = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8779__i = 0, G__8779__a = new Array(arguments.length - 1);
      while (G__8779__i < G__8779__a.length) {
        G__8779__a[G__8779__i] = arguments[G__8779__i + 1];
        ++G__8779__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8779__a, 0);
    }
    return om$dom$embed__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$embed.cljs$lang$maxFixedArity = 1;
  om$dom$embed.cljs$lang$applyTo = function(arglist__8780) {
    var opts__6241__auto__ = cljs.core.first(arglist__8780);
    var children__6242__auto__ = cljs.core.rest(arglist__8780);
    return om$dom$embed__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$embed.cljs$core$IFn$_invoke$arity$variadic = om$dom$embed__delegate;
  return om$dom$embed;
}();
om.dom.fieldset = function() {
  var om$dom$fieldset__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.fieldset.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$fieldset = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8781__i = 0, G__8781__a = new Array(arguments.length - 1);
      while (G__8781__i < G__8781__a.length) {
        G__8781__a[G__8781__i] = arguments[G__8781__i + 1];
        ++G__8781__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8781__a, 0);
    }
    return om$dom$fieldset__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$fieldset.cljs$lang$maxFixedArity = 1;
  om$dom$fieldset.cljs$lang$applyTo = function(arglist__8782) {
    var opts__6241__auto__ = cljs.core.first(arglist__8782);
    var children__6242__auto__ = cljs.core.rest(arglist__8782);
    return om$dom$fieldset__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$fieldset.cljs$core$IFn$_invoke$arity$variadic = om$dom$fieldset__delegate;
  return om$dom$fieldset;
}();
om.dom.figcaption = function() {
  var om$dom$figcaption__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.figcaption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$figcaption = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8783__i = 0, G__8783__a = new Array(arguments.length - 1);
      while (G__8783__i < G__8783__a.length) {
        G__8783__a[G__8783__i] = arguments[G__8783__i + 1];
        ++G__8783__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8783__a, 0);
    }
    return om$dom$figcaption__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$figcaption.cljs$lang$maxFixedArity = 1;
  om$dom$figcaption.cljs$lang$applyTo = function(arglist__8784) {
    var opts__6241__auto__ = cljs.core.first(arglist__8784);
    var children__6242__auto__ = cljs.core.rest(arglist__8784);
    return om$dom$figcaption__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$figcaption.cljs$core$IFn$_invoke$arity$variadic = om$dom$figcaption__delegate;
  return om$dom$figcaption;
}();
om.dom.figure = function() {
  var om$dom$figure__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.figure.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$figure = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8785__i = 0, G__8785__a = new Array(arguments.length - 1);
      while (G__8785__i < G__8785__a.length) {
        G__8785__a[G__8785__i] = arguments[G__8785__i + 1];
        ++G__8785__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8785__a, 0);
    }
    return om$dom$figure__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$figure.cljs$lang$maxFixedArity = 1;
  om$dom$figure.cljs$lang$applyTo = function(arglist__8786) {
    var opts__6241__auto__ = cljs.core.first(arglist__8786);
    var children__6242__auto__ = cljs.core.rest(arglist__8786);
    return om$dom$figure__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$figure.cljs$core$IFn$_invoke$arity$variadic = om$dom$figure__delegate;
  return om$dom$figure;
}();
om.dom.footer = function() {
  var om$dom$footer__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.footer.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$footer = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8787__i = 0, G__8787__a = new Array(arguments.length - 1);
      while (G__8787__i < G__8787__a.length) {
        G__8787__a[G__8787__i] = arguments[G__8787__i + 1];
        ++G__8787__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8787__a, 0);
    }
    return om$dom$footer__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$footer.cljs$lang$maxFixedArity = 1;
  om$dom$footer.cljs$lang$applyTo = function(arglist__8788) {
    var opts__6241__auto__ = cljs.core.first(arglist__8788);
    var children__6242__auto__ = cljs.core.rest(arglist__8788);
    return om$dom$footer__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$footer.cljs$core$IFn$_invoke$arity$variadic = om$dom$footer__delegate;
  return om$dom$footer;
}();
om.dom.form = function() {
  var om$dom$form__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.form.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$form = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8789__i = 0, G__8789__a = new Array(arguments.length - 1);
      while (G__8789__i < G__8789__a.length) {
        G__8789__a[G__8789__i] = arguments[G__8789__i + 1];
        ++G__8789__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8789__a, 0);
    }
    return om$dom$form__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$form.cljs$lang$maxFixedArity = 1;
  om$dom$form.cljs$lang$applyTo = function(arglist__8790) {
    var opts__6241__auto__ = cljs.core.first(arglist__8790);
    var children__6242__auto__ = cljs.core.rest(arglist__8790);
    return om$dom$form__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$form.cljs$core$IFn$_invoke$arity$variadic = om$dom$form__delegate;
  return om$dom$form;
}();
om.dom.h1 = function() {
  var om$dom$h1__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.h1.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$h1 = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8791__i = 0, G__8791__a = new Array(arguments.length - 1);
      while (G__8791__i < G__8791__a.length) {
        G__8791__a[G__8791__i] = arguments[G__8791__i + 1];
        ++G__8791__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8791__a, 0);
    }
    return om$dom$h1__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$h1.cljs$lang$maxFixedArity = 1;
  om$dom$h1.cljs$lang$applyTo = function(arglist__8792) {
    var opts__6241__auto__ = cljs.core.first(arglist__8792);
    var children__6242__auto__ = cljs.core.rest(arglist__8792);
    return om$dom$h1__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$h1.cljs$core$IFn$_invoke$arity$variadic = om$dom$h1__delegate;
  return om$dom$h1;
}();
om.dom.h2 = function() {
  var om$dom$h2__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.h2.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$h2 = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8793__i = 0, G__8793__a = new Array(arguments.length - 1);
      while (G__8793__i < G__8793__a.length) {
        G__8793__a[G__8793__i] = arguments[G__8793__i + 1];
        ++G__8793__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8793__a, 0);
    }
    return om$dom$h2__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$h2.cljs$lang$maxFixedArity = 1;
  om$dom$h2.cljs$lang$applyTo = function(arglist__8794) {
    var opts__6241__auto__ = cljs.core.first(arglist__8794);
    var children__6242__auto__ = cljs.core.rest(arglist__8794);
    return om$dom$h2__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$h2.cljs$core$IFn$_invoke$arity$variadic = om$dom$h2__delegate;
  return om$dom$h2;
}();
om.dom.h3 = function() {
  var om$dom$h3__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.h3.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$h3 = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8795__i = 0, G__8795__a = new Array(arguments.length - 1);
      while (G__8795__i < G__8795__a.length) {
        G__8795__a[G__8795__i] = arguments[G__8795__i + 1];
        ++G__8795__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8795__a, 0);
    }
    return om$dom$h3__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$h3.cljs$lang$maxFixedArity = 1;
  om$dom$h3.cljs$lang$applyTo = function(arglist__8796) {
    var opts__6241__auto__ = cljs.core.first(arglist__8796);
    var children__6242__auto__ = cljs.core.rest(arglist__8796);
    return om$dom$h3__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$h3.cljs$core$IFn$_invoke$arity$variadic = om$dom$h3__delegate;
  return om$dom$h3;
}();
om.dom.h4 = function() {
  var om$dom$h4__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.h4.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$h4 = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8797__i = 0, G__8797__a = new Array(arguments.length - 1);
      while (G__8797__i < G__8797__a.length) {
        G__8797__a[G__8797__i] = arguments[G__8797__i + 1];
        ++G__8797__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8797__a, 0);
    }
    return om$dom$h4__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$h4.cljs$lang$maxFixedArity = 1;
  om$dom$h4.cljs$lang$applyTo = function(arglist__8798) {
    var opts__6241__auto__ = cljs.core.first(arglist__8798);
    var children__6242__auto__ = cljs.core.rest(arglist__8798);
    return om$dom$h4__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$h4.cljs$core$IFn$_invoke$arity$variadic = om$dom$h4__delegate;
  return om$dom$h4;
}();
om.dom.h5 = function() {
  var om$dom$h5__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.h5.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$h5 = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8799__i = 0, G__8799__a = new Array(arguments.length - 1);
      while (G__8799__i < G__8799__a.length) {
        G__8799__a[G__8799__i] = arguments[G__8799__i + 1];
        ++G__8799__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8799__a, 0);
    }
    return om$dom$h5__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$h5.cljs$lang$maxFixedArity = 1;
  om$dom$h5.cljs$lang$applyTo = function(arglist__8800) {
    var opts__6241__auto__ = cljs.core.first(arglist__8800);
    var children__6242__auto__ = cljs.core.rest(arglist__8800);
    return om$dom$h5__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$h5.cljs$core$IFn$_invoke$arity$variadic = om$dom$h5__delegate;
  return om$dom$h5;
}();
om.dom.h6 = function() {
  var om$dom$h6__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.h6.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$h6 = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8801__i = 0, G__8801__a = new Array(arguments.length - 1);
      while (G__8801__i < G__8801__a.length) {
        G__8801__a[G__8801__i] = arguments[G__8801__i + 1];
        ++G__8801__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8801__a, 0);
    }
    return om$dom$h6__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$h6.cljs$lang$maxFixedArity = 1;
  om$dom$h6.cljs$lang$applyTo = function(arglist__8802) {
    var opts__6241__auto__ = cljs.core.first(arglist__8802);
    var children__6242__auto__ = cljs.core.rest(arglist__8802);
    return om$dom$h6__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$h6.cljs$core$IFn$_invoke$arity$variadic = om$dom$h6__delegate;
  return om$dom$h6;
}();
om.dom.head = function() {
  var om$dom$head__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.head.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$head = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8803__i = 0, G__8803__a = new Array(arguments.length - 1);
      while (G__8803__i < G__8803__a.length) {
        G__8803__a[G__8803__i] = arguments[G__8803__i + 1];
        ++G__8803__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8803__a, 0);
    }
    return om$dom$head__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$head.cljs$lang$maxFixedArity = 1;
  om$dom$head.cljs$lang$applyTo = function(arglist__8804) {
    var opts__6241__auto__ = cljs.core.first(arglist__8804);
    var children__6242__auto__ = cljs.core.rest(arglist__8804);
    return om$dom$head__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$head.cljs$core$IFn$_invoke$arity$variadic = om$dom$head__delegate;
  return om$dom$head;
}();
om.dom.header = function() {
  var om$dom$header__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.header.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$header = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8805__i = 0, G__8805__a = new Array(arguments.length - 1);
      while (G__8805__i < G__8805__a.length) {
        G__8805__a[G__8805__i] = arguments[G__8805__i + 1];
        ++G__8805__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8805__a, 0);
    }
    return om$dom$header__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$header.cljs$lang$maxFixedArity = 1;
  om$dom$header.cljs$lang$applyTo = function(arglist__8806) {
    var opts__6241__auto__ = cljs.core.first(arglist__8806);
    var children__6242__auto__ = cljs.core.rest(arglist__8806);
    return om$dom$header__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$header.cljs$core$IFn$_invoke$arity$variadic = om$dom$header__delegate;
  return om$dom$header;
}();
om.dom.hr = function() {
  var om$dom$hr__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.hr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$hr = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8807__i = 0, G__8807__a = new Array(arguments.length - 1);
      while (G__8807__i < G__8807__a.length) {
        G__8807__a[G__8807__i] = arguments[G__8807__i + 1];
        ++G__8807__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8807__a, 0);
    }
    return om$dom$hr__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$hr.cljs$lang$maxFixedArity = 1;
  om$dom$hr.cljs$lang$applyTo = function(arglist__8808) {
    var opts__6241__auto__ = cljs.core.first(arglist__8808);
    var children__6242__auto__ = cljs.core.rest(arglist__8808);
    return om$dom$hr__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$hr.cljs$core$IFn$_invoke$arity$variadic = om$dom$hr__delegate;
  return om$dom$hr;
}();
om.dom.html = function() {
  var om$dom$html__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.html.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$html = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8809__i = 0, G__8809__a = new Array(arguments.length - 1);
      while (G__8809__i < G__8809__a.length) {
        G__8809__a[G__8809__i] = arguments[G__8809__i + 1];
        ++G__8809__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8809__a, 0);
    }
    return om$dom$html__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$html.cljs$lang$maxFixedArity = 1;
  om$dom$html.cljs$lang$applyTo = function(arglist__8810) {
    var opts__6241__auto__ = cljs.core.first(arglist__8810);
    var children__6242__auto__ = cljs.core.rest(arglist__8810);
    return om$dom$html__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$html.cljs$core$IFn$_invoke$arity$variadic = om$dom$html__delegate;
  return om$dom$html;
}();
om.dom.i = function() {
  var om$dom$i__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.i.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$i = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8811__i = 0, G__8811__a = new Array(arguments.length - 1);
      while (G__8811__i < G__8811__a.length) {
        G__8811__a[G__8811__i] = arguments[G__8811__i + 1];
        ++G__8811__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8811__a, 0);
    }
    return om$dom$i__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$i.cljs$lang$maxFixedArity = 1;
  om$dom$i.cljs$lang$applyTo = function(arglist__8812) {
    var opts__6241__auto__ = cljs.core.first(arglist__8812);
    var children__6242__auto__ = cljs.core.rest(arglist__8812);
    return om$dom$i__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$i.cljs$core$IFn$_invoke$arity$variadic = om$dom$i__delegate;
  return om$dom$i;
}();
om.dom.iframe = function() {
  var om$dom$iframe__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.iframe.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$iframe = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8813__i = 0, G__8813__a = new Array(arguments.length - 1);
      while (G__8813__i < G__8813__a.length) {
        G__8813__a[G__8813__i] = arguments[G__8813__i + 1];
        ++G__8813__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8813__a, 0);
    }
    return om$dom$iframe__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$iframe.cljs$lang$maxFixedArity = 1;
  om$dom$iframe.cljs$lang$applyTo = function(arglist__8814) {
    var opts__6241__auto__ = cljs.core.first(arglist__8814);
    var children__6242__auto__ = cljs.core.rest(arglist__8814);
    return om$dom$iframe__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$iframe.cljs$core$IFn$_invoke$arity$variadic = om$dom$iframe__delegate;
  return om$dom$iframe;
}();
om.dom.img = function() {
  var om$dom$img__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.img.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$img = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8815__i = 0, G__8815__a = new Array(arguments.length - 1);
      while (G__8815__i < G__8815__a.length) {
        G__8815__a[G__8815__i] = arguments[G__8815__i + 1];
        ++G__8815__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8815__a, 0);
    }
    return om$dom$img__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$img.cljs$lang$maxFixedArity = 1;
  om$dom$img.cljs$lang$applyTo = function(arglist__8816) {
    var opts__6241__auto__ = cljs.core.first(arglist__8816);
    var children__6242__auto__ = cljs.core.rest(arglist__8816);
    return om$dom$img__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$img.cljs$core$IFn$_invoke$arity$variadic = om$dom$img__delegate;
  return om$dom$img;
}();
om.dom.ins = function() {
  var om$dom$ins__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.ins.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$ins = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8817__i = 0, G__8817__a = new Array(arguments.length - 1);
      while (G__8817__i < G__8817__a.length) {
        G__8817__a[G__8817__i] = arguments[G__8817__i + 1];
        ++G__8817__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8817__a, 0);
    }
    return om$dom$ins__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$ins.cljs$lang$maxFixedArity = 1;
  om$dom$ins.cljs$lang$applyTo = function(arglist__8818) {
    var opts__6241__auto__ = cljs.core.first(arglist__8818);
    var children__6242__auto__ = cljs.core.rest(arglist__8818);
    return om$dom$ins__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$ins.cljs$core$IFn$_invoke$arity$variadic = om$dom$ins__delegate;
  return om$dom$ins;
}();
om.dom.kbd = function() {
  var om$dom$kbd__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.kbd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$kbd = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8819__i = 0, G__8819__a = new Array(arguments.length - 1);
      while (G__8819__i < G__8819__a.length) {
        G__8819__a[G__8819__i] = arguments[G__8819__i + 1];
        ++G__8819__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8819__a, 0);
    }
    return om$dom$kbd__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$kbd.cljs$lang$maxFixedArity = 1;
  om$dom$kbd.cljs$lang$applyTo = function(arglist__8820) {
    var opts__6241__auto__ = cljs.core.first(arglist__8820);
    var children__6242__auto__ = cljs.core.rest(arglist__8820);
    return om$dom$kbd__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$kbd.cljs$core$IFn$_invoke$arity$variadic = om$dom$kbd__delegate;
  return om$dom$kbd;
}();
om.dom.keygen = function() {
  var om$dom$keygen__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.keygen.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$keygen = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8821__i = 0, G__8821__a = new Array(arguments.length - 1);
      while (G__8821__i < G__8821__a.length) {
        G__8821__a[G__8821__i] = arguments[G__8821__i + 1];
        ++G__8821__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8821__a, 0);
    }
    return om$dom$keygen__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$keygen.cljs$lang$maxFixedArity = 1;
  om$dom$keygen.cljs$lang$applyTo = function(arglist__8822) {
    var opts__6241__auto__ = cljs.core.first(arglist__8822);
    var children__6242__auto__ = cljs.core.rest(arglist__8822);
    return om$dom$keygen__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$keygen.cljs$core$IFn$_invoke$arity$variadic = om$dom$keygen__delegate;
  return om$dom$keygen;
}();
om.dom.label = function() {
  var om$dom$label__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.label.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$label = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8823__i = 0, G__8823__a = new Array(arguments.length - 1);
      while (G__8823__i < G__8823__a.length) {
        G__8823__a[G__8823__i] = arguments[G__8823__i + 1];
        ++G__8823__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8823__a, 0);
    }
    return om$dom$label__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$label.cljs$lang$maxFixedArity = 1;
  om$dom$label.cljs$lang$applyTo = function(arglist__8824) {
    var opts__6241__auto__ = cljs.core.first(arglist__8824);
    var children__6242__auto__ = cljs.core.rest(arglist__8824);
    return om$dom$label__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$label.cljs$core$IFn$_invoke$arity$variadic = om$dom$label__delegate;
  return om$dom$label;
}();
om.dom.legend = function() {
  var om$dom$legend__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.legend.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$legend = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8825__i = 0, G__8825__a = new Array(arguments.length - 1);
      while (G__8825__i < G__8825__a.length) {
        G__8825__a[G__8825__i] = arguments[G__8825__i + 1];
        ++G__8825__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8825__a, 0);
    }
    return om$dom$legend__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$legend.cljs$lang$maxFixedArity = 1;
  om$dom$legend.cljs$lang$applyTo = function(arglist__8826) {
    var opts__6241__auto__ = cljs.core.first(arglist__8826);
    var children__6242__auto__ = cljs.core.rest(arglist__8826);
    return om$dom$legend__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$legend.cljs$core$IFn$_invoke$arity$variadic = om$dom$legend__delegate;
  return om$dom$legend;
}();
om.dom.li = function() {
  var om$dom$li__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.li.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$li = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8827__i = 0, G__8827__a = new Array(arguments.length - 1);
      while (G__8827__i < G__8827__a.length) {
        G__8827__a[G__8827__i] = arguments[G__8827__i + 1];
        ++G__8827__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8827__a, 0);
    }
    return om$dom$li__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$li.cljs$lang$maxFixedArity = 1;
  om$dom$li.cljs$lang$applyTo = function(arglist__8828) {
    var opts__6241__auto__ = cljs.core.first(arglist__8828);
    var children__6242__auto__ = cljs.core.rest(arglist__8828);
    return om$dom$li__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$li.cljs$core$IFn$_invoke$arity$variadic = om$dom$li__delegate;
  return om$dom$li;
}();
om.dom.link = function() {
  var om$dom$link__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.link.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$link = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8829__i = 0, G__8829__a = new Array(arguments.length - 1);
      while (G__8829__i < G__8829__a.length) {
        G__8829__a[G__8829__i] = arguments[G__8829__i + 1];
        ++G__8829__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8829__a, 0);
    }
    return om$dom$link__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$link.cljs$lang$maxFixedArity = 1;
  om$dom$link.cljs$lang$applyTo = function(arglist__8830) {
    var opts__6241__auto__ = cljs.core.first(arglist__8830);
    var children__6242__auto__ = cljs.core.rest(arglist__8830);
    return om$dom$link__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$link.cljs$core$IFn$_invoke$arity$variadic = om$dom$link__delegate;
  return om$dom$link;
}();
om.dom.main = function() {
  var om$dom$main__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.main.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$main = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8831__i = 0, G__8831__a = new Array(arguments.length - 1);
      while (G__8831__i < G__8831__a.length) {
        G__8831__a[G__8831__i] = arguments[G__8831__i + 1];
        ++G__8831__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8831__a, 0);
    }
    return om$dom$main__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$main.cljs$lang$maxFixedArity = 1;
  om$dom$main.cljs$lang$applyTo = function(arglist__8832) {
    var opts__6241__auto__ = cljs.core.first(arglist__8832);
    var children__6242__auto__ = cljs.core.rest(arglist__8832);
    return om$dom$main__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$main.cljs$core$IFn$_invoke$arity$variadic = om$dom$main__delegate;
  return om$dom$main;
}();
om.dom.map = function() {
  var om$dom$map__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.map.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$map = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8833__i = 0, G__8833__a = new Array(arguments.length - 1);
      while (G__8833__i < G__8833__a.length) {
        G__8833__a[G__8833__i] = arguments[G__8833__i + 1];
        ++G__8833__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8833__a, 0);
    }
    return om$dom$map__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$map.cljs$lang$maxFixedArity = 1;
  om$dom$map.cljs$lang$applyTo = function(arglist__8834) {
    var opts__6241__auto__ = cljs.core.first(arglist__8834);
    var children__6242__auto__ = cljs.core.rest(arglist__8834);
    return om$dom$map__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$map.cljs$core$IFn$_invoke$arity$variadic = om$dom$map__delegate;
  return om$dom$map;
}();
om.dom.mark = function() {
  var om$dom$mark__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.mark.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$mark = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8835__i = 0, G__8835__a = new Array(arguments.length - 1);
      while (G__8835__i < G__8835__a.length) {
        G__8835__a[G__8835__i] = arguments[G__8835__i + 1];
        ++G__8835__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8835__a, 0);
    }
    return om$dom$mark__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$mark.cljs$lang$maxFixedArity = 1;
  om$dom$mark.cljs$lang$applyTo = function(arglist__8836) {
    var opts__6241__auto__ = cljs.core.first(arglist__8836);
    var children__6242__auto__ = cljs.core.rest(arglist__8836);
    return om$dom$mark__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$mark.cljs$core$IFn$_invoke$arity$variadic = om$dom$mark__delegate;
  return om$dom$mark;
}();
om.dom.marquee = function() {
  var om$dom$marquee__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.marquee.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$marquee = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8837__i = 0, G__8837__a = new Array(arguments.length - 1);
      while (G__8837__i < G__8837__a.length) {
        G__8837__a[G__8837__i] = arguments[G__8837__i + 1];
        ++G__8837__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8837__a, 0);
    }
    return om$dom$marquee__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$marquee.cljs$lang$maxFixedArity = 1;
  om$dom$marquee.cljs$lang$applyTo = function(arglist__8838) {
    var opts__6241__auto__ = cljs.core.first(arglist__8838);
    var children__6242__auto__ = cljs.core.rest(arglist__8838);
    return om$dom$marquee__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$marquee.cljs$core$IFn$_invoke$arity$variadic = om$dom$marquee__delegate;
  return om$dom$marquee;
}();
om.dom.menu = function() {
  var om$dom$menu__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.menu.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$menu = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8839__i = 0, G__8839__a = new Array(arguments.length - 1);
      while (G__8839__i < G__8839__a.length) {
        G__8839__a[G__8839__i] = arguments[G__8839__i + 1];
        ++G__8839__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8839__a, 0);
    }
    return om$dom$menu__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$menu.cljs$lang$maxFixedArity = 1;
  om$dom$menu.cljs$lang$applyTo = function(arglist__8840) {
    var opts__6241__auto__ = cljs.core.first(arglist__8840);
    var children__6242__auto__ = cljs.core.rest(arglist__8840);
    return om$dom$menu__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$menu.cljs$core$IFn$_invoke$arity$variadic = om$dom$menu__delegate;
  return om$dom$menu;
}();
om.dom.menuitem = function() {
  var om$dom$menuitem__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.menuitem.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$menuitem = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8841__i = 0, G__8841__a = new Array(arguments.length - 1);
      while (G__8841__i < G__8841__a.length) {
        G__8841__a[G__8841__i] = arguments[G__8841__i + 1];
        ++G__8841__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8841__a, 0);
    }
    return om$dom$menuitem__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$menuitem.cljs$lang$maxFixedArity = 1;
  om$dom$menuitem.cljs$lang$applyTo = function(arglist__8842) {
    var opts__6241__auto__ = cljs.core.first(arglist__8842);
    var children__6242__auto__ = cljs.core.rest(arglist__8842);
    return om$dom$menuitem__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$menuitem.cljs$core$IFn$_invoke$arity$variadic = om$dom$menuitem__delegate;
  return om$dom$menuitem;
}();
om.dom.meta = function() {
  var om$dom$meta__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.meta.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$meta = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8843__i = 0, G__8843__a = new Array(arguments.length - 1);
      while (G__8843__i < G__8843__a.length) {
        G__8843__a[G__8843__i] = arguments[G__8843__i + 1];
        ++G__8843__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8843__a, 0);
    }
    return om$dom$meta__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$meta.cljs$lang$maxFixedArity = 1;
  om$dom$meta.cljs$lang$applyTo = function(arglist__8844) {
    var opts__6241__auto__ = cljs.core.first(arglist__8844);
    var children__6242__auto__ = cljs.core.rest(arglist__8844);
    return om$dom$meta__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$meta.cljs$core$IFn$_invoke$arity$variadic = om$dom$meta__delegate;
  return om$dom$meta;
}();
om.dom.meter = function() {
  var om$dom$meter__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.meter.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$meter = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8845__i = 0, G__8845__a = new Array(arguments.length - 1);
      while (G__8845__i < G__8845__a.length) {
        G__8845__a[G__8845__i] = arguments[G__8845__i + 1];
        ++G__8845__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8845__a, 0);
    }
    return om$dom$meter__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$meter.cljs$lang$maxFixedArity = 1;
  om$dom$meter.cljs$lang$applyTo = function(arglist__8846) {
    var opts__6241__auto__ = cljs.core.first(arglist__8846);
    var children__6242__auto__ = cljs.core.rest(arglist__8846);
    return om$dom$meter__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$meter.cljs$core$IFn$_invoke$arity$variadic = om$dom$meter__delegate;
  return om$dom$meter;
}();
om.dom.nav = function() {
  var om$dom$nav__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.nav.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$nav = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8847__i = 0, G__8847__a = new Array(arguments.length - 1);
      while (G__8847__i < G__8847__a.length) {
        G__8847__a[G__8847__i] = arguments[G__8847__i + 1];
        ++G__8847__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8847__a, 0);
    }
    return om$dom$nav__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$nav.cljs$lang$maxFixedArity = 1;
  om$dom$nav.cljs$lang$applyTo = function(arglist__8848) {
    var opts__6241__auto__ = cljs.core.first(arglist__8848);
    var children__6242__auto__ = cljs.core.rest(arglist__8848);
    return om$dom$nav__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$nav.cljs$core$IFn$_invoke$arity$variadic = om$dom$nav__delegate;
  return om$dom$nav;
}();
om.dom.noscript = function() {
  var om$dom$noscript__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.noscript.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$noscript = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8849__i = 0, G__8849__a = new Array(arguments.length - 1);
      while (G__8849__i < G__8849__a.length) {
        G__8849__a[G__8849__i] = arguments[G__8849__i + 1];
        ++G__8849__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8849__a, 0);
    }
    return om$dom$noscript__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$noscript.cljs$lang$maxFixedArity = 1;
  om$dom$noscript.cljs$lang$applyTo = function(arglist__8850) {
    var opts__6241__auto__ = cljs.core.first(arglist__8850);
    var children__6242__auto__ = cljs.core.rest(arglist__8850);
    return om$dom$noscript__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$noscript.cljs$core$IFn$_invoke$arity$variadic = om$dom$noscript__delegate;
  return om$dom$noscript;
}();
om.dom.object = function() {
  var om$dom$object__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.object.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$object = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8851__i = 0, G__8851__a = new Array(arguments.length - 1);
      while (G__8851__i < G__8851__a.length) {
        G__8851__a[G__8851__i] = arguments[G__8851__i + 1];
        ++G__8851__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8851__a, 0);
    }
    return om$dom$object__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$object.cljs$lang$maxFixedArity = 1;
  om$dom$object.cljs$lang$applyTo = function(arglist__8852) {
    var opts__6241__auto__ = cljs.core.first(arglist__8852);
    var children__6242__auto__ = cljs.core.rest(arglist__8852);
    return om$dom$object__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$object.cljs$core$IFn$_invoke$arity$variadic = om$dom$object__delegate;
  return om$dom$object;
}();
om.dom.ol = function() {
  var om$dom$ol__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.ol.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$ol = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8853__i = 0, G__8853__a = new Array(arguments.length - 1);
      while (G__8853__i < G__8853__a.length) {
        G__8853__a[G__8853__i] = arguments[G__8853__i + 1];
        ++G__8853__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8853__a, 0);
    }
    return om$dom$ol__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$ol.cljs$lang$maxFixedArity = 1;
  om$dom$ol.cljs$lang$applyTo = function(arglist__8854) {
    var opts__6241__auto__ = cljs.core.first(arglist__8854);
    var children__6242__auto__ = cljs.core.rest(arglist__8854);
    return om$dom$ol__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$ol.cljs$core$IFn$_invoke$arity$variadic = om$dom$ol__delegate;
  return om$dom$ol;
}();
om.dom.optgroup = function() {
  var om$dom$optgroup__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.optgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$optgroup = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8855__i = 0, G__8855__a = new Array(arguments.length - 1);
      while (G__8855__i < G__8855__a.length) {
        G__8855__a[G__8855__i] = arguments[G__8855__i + 1];
        ++G__8855__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8855__a, 0);
    }
    return om$dom$optgroup__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$optgroup.cljs$lang$maxFixedArity = 1;
  om$dom$optgroup.cljs$lang$applyTo = function(arglist__8856) {
    var opts__6241__auto__ = cljs.core.first(arglist__8856);
    var children__6242__auto__ = cljs.core.rest(arglist__8856);
    return om$dom$optgroup__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$optgroup.cljs$core$IFn$_invoke$arity$variadic = om$dom$optgroup__delegate;
  return om$dom$optgroup;
}();
om.dom.output = function() {
  var om$dom$output__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.output.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$output = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8857__i = 0, G__8857__a = new Array(arguments.length - 1);
      while (G__8857__i < G__8857__a.length) {
        G__8857__a[G__8857__i] = arguments[G__8857__i + 1];
        ++G__8857__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8857__a, 0);
    }
    return om$dom$output__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$output.cljs$lang$maxFixedArity = 1;
  om$dom$output.cljs$lang$applyTo = function(arglist__8858) {
    var opts__6241__auto__ = cljs.core.first(arglist__8858);
    var children__6242__auto__ = cljs.core.rest(arglist__8858);
    return om$dom$output__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$output.cljs$core$IFn$_invoke$arity$variadic = om$dom$output__delegate;
  return om$dom$output;
}();
om.dom.p = function() {
  var om$dom$p__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.p.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$p = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8859__i = 0, G__8859__a = new Array(arguments.length - 1);
      while (G__8859__i < G__8859__a.length) {
        G__8859__a[G__8859__i] = arguments[G__8859__i + 1];
        ++G__8859__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8859__a, 0);
    }
    return om$dom$p__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$p.cljs$lang$maxFixedArity = 1;
  om$dom$p.cljs$lang$applyTo = function(arglist__8860) {
    var opts__6241__auto__ = cljs.core.first(arglist__8860);
    var children__6242__auto__ = cljs.core.rest(arglist__8860);
    return om$dom$p__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$p.cljs$core$IFn$_invoke$arity$variadic = om$dom$p__delegate;
  return om$dom$p;
}();
om.dom.param = function() {
  var om$dom$param__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.param.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$param = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8861__i = 0, G__8861__a = new Array(arguments.length - 1);
      while (G__8861__i < G__8861__a.length) {
        G__8861__a[G__8861__i] = arguments[G__8861__i + 1];
        ++G__8861__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8861__a, 0);
    }
    return om$dom$param__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$param.cljs$lang$maxFixedArity = 1;
  om$dom$param.cljs$lang$applyTo = function(arglist__8862) {
    var opts__6241__auto__ = cljs.core.first(arglist__8862);
    var children__6242__auto__ = cljs.core.rest(arglist__8862);
    return om$dom$param__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$param.cljs$core$IFn$_invoke$arity$variadic = om$dom$param__delegate;
  return om$dom$param;
}();
om.dom.pre = function() {
  var om$dom$pre__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.pre.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$pre = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8863__i = 0, G__8863__a = new Array(arguments.length - 1);
      while (G__8863__i < G__8863__a.length) {
        G__8863__a[G__8863__i] = arguments[G__8863__i + 1];
        ++G__8863__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8863__a, 0);
    }
    return om$dom$pre__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$pre.cljs$lang$maxFixedArity = 1;
  om$dom$pre.cljs$lang$applyTo = function(arglist__8864) {
    var opts__6241__auto__ = cljs.core.first(arglist__8864);
    var children__6242__auto__ = cljs.core.rest(arglist__8864);
    return om$dom$pre__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$pre.cljs$core$IFn$_invoke$arity$variadic = om$dom$pre__delegate;
  return om$dom$pre;
}();
om.dom.progress = function() {
  var om$dom$progress__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.progress.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$progress = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8865__i = 0, G__8865__a = new Array(arguments.length - 1);
      while (G__8865__i < G__8865__a.length) {
        G__8865__a[G__8865__i] = arguments[G__8865__i + 1];
        ++G__8865__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8865__a, 0);
    }
    return om$dom$progress__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$progress.cljs$lang$maxFixedArity = 1;
  om$dom$progress.cljs$lang$applyTo = function(arglist__8866) {
    var opts__6241__auto__ = cljs.core.first(arglist__8866);
    var children__6242__auto__ = cljs.core.rest(arglist__8866);
    return om$dom$progress__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$progress.cljs$core$IFn$_invoke$arity$variadic = om$dom$progress__delegate;
  return om$dom$progress;
}();
om.dom.q = function() {
  var om$dom$q__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.q.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$q = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8867__i = 0, G__8867__a = new Array(arguments.length - 1);
      while (G__8867__i < G__8867__a.length) {
        G__8867__a[G__8867__i] = arguments[G__8867__i + 1];
        ++G__8867__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8867__a, 0);
    }
    return om$dom$q__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$q.cljs$lang$maxFixedArity = 1;
  om$dom$q.cljs$lang$applyTo = function(arglist__8868) {
    var opts__6241__auto__ = cljs.core.first(arglist__8868);
    var children__6242__auto__ = cljs.core.rest(arglist__8868);
    return om$dom$q__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$q.cljs$core$IFn$_invoke$arity$variadic = om$dom$q__delegate;
  return om$dom$q;
}();
om.dom.rp = function() {
  var om$dom$rp__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.rp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$rp = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8869__i = 0, G__8869__a = new Array(arguments.length - 1);
      while (G__8869__i < G__8869__a.length) {
        G__8869__a[G__8869__i] = arguments[G__8869__i + 1];
        ++G__8869__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8869__a, 0);
    }
    return om$dom$rp__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$rp.cljs$lang$maxFixedArity = 1;
  om$dom$rp.cljs$lang$applyTo = function(arglist__8870) {
    var opts__6241__auto__ = cljs.core.first(arglist__8870);
    var children__6242__auto__ = cljs.core.rest(arglist__8870);
    return om$dom$rp__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$rp.cljs$core$IFn$_invoke$arity$variadic = om$dom$rp__delegate;
  return om$dom$rp;
}();
om.dom.rt = function() {
  var om$dom$rt__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.rt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$rt = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8871__i = 0, G__8871__a = new Array(arguments.length - 1);
      while (G__8871__i < G__8871__a.length) {
        G__8871__a[G__8871__i] = arguments[G__8871__i + 1];
        ++G__8871__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8871__a, 0);
    }
    return om$dom$rt__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$rt.cljs$lang$maxFixedArity = 1;
  om$dom$rt.cljs$lang$applyTo = function(arglist__8872) {
    var opts__6241__auto__ = cljs.core.first(arglist__8872);
    var children__6242__auto__ = cljs.core.rest(arglist__8872);
    return om$dom$rt__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$rt.cljs$core$IFn$_invoke$arity$variadic = om$dom$rt__delegate;
  return om$dom$rt;
}();
om.dom.ruby = function() {
  var om$dom$ruby__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.ruby.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$ruby = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8873__i = 0, G__8873__a = new Array(arguments.length - 1);
      while (G__8873__i < G__8873__a.length) {
        G__8873__a[G__8873__i] = arguments[G__8873__i + 1];
        ++G__8873__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8873__a, 0);
    }
    return om$dom$ruby__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$ruby.cljs$lang$maxFixedArity = 1;
  om$dom$ruby.cljs$lang$applyTo = function(arglist__8874) {
    var opts__6241__auto__ = cljs.core.first(arglist__8874);
    var children__6242__auto__ = cljs.core.rest(arglist__8874);
    return om$dom$ruby__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$ruby.cljs$core$IFn$_invoke$arity$variadic = om$dom$ruby__delegate;
  return om$dom$ruby;
}();
om.dom.s = function() {
  var om$dom$s__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.s.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$s = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8875__i = 0, G__8875__a = new Array(arguments.length - 1);
      while (G__8875__i < G__8875__a.length) {
        G__8875__a[G__8875__i] = arguments[G__8875__i + 1];
        ++G__8875__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8875__a, 0);
    }
    return om$dom$s__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$s.cljs$lang$maxFixedArity = 1;
  om$dom$s.cljs$lang$applyTo = function(arglist__8876) {
    var opts__6241__auto__ = cljs.core.first(arglist__8876);
    var children__6242__auto__ = cljs.core.rest(arglist__8876);
    return om$dom$s__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$s.cljs$core$IFn$_invoke$arity$variadic = om$dom$s__delegate;
  return om$dom$s;
}();
om.dom.samp = function() {
  var om$dom$samp__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.samp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$samp = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8877__i = 0, G__8877__a = new Array(arguments.length - 1);
      while (G__8877__i < G__8877__a.length) {
        G__8877__a[G__8877__i] = arguments[G__8877__i + 1];
        ++G__8877__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8877__a, 0);
    }
    return om$dom$samp__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$samp.cljs$lang$maxFixedArity = 1;
  om$dom$samp.cljs$lang$applyTo = function(arglist__8878) {
    var opts__6241__auto__ = cljs.core.first(arglist__8878);
    var children__6242__auto__ = cljs.core.rest(arglist__8878);
    return om$dom$samp__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$samp.cljs$core$IFn$_invoke$arity$variadic = om$dom$samp__delegate;
  return om$dom$samp;
}();
om.dom.script = function() {
  var om$dom$script__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.script.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$script = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8879__i = 0, G__8879__a = new Array(arguments.length - 1);
      while (G__8879__i < G__8879__a.length) {
        G__8879__a[G__8879__i] = arguments[G__8879__i + 1];
        ++G__8879__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8879__a, 0);
    }
    return om$dom$script__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$script.cljs$lang$maxFixedArity = 1;
  om$dom$script.cljs$lang$applyTo = function(arglist__8880) {
    var opts__6241__auto__ = cljs.core.first(arglist__8880);
    var children__6242__auto__ = cljs.core.rest(arglist__8880);
    return om$dom$script__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$script.cljs$core$IFn$_invoke$arity$variadic = om$dom$script__delegate;
  return om$dom$script;
}();
om.dom.section = function() {
  var om$dom$section__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.section.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$section = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8881__i = 0, G__8881__a = new Array(arguments.length - 1);
      while (G__8881__i < G__8881__a.length) {
        G__8881__a[G__8881__i] = arguments[G__8881__i + 1];
        ++G__8881__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8881__a, 0);
    }
    return om$dom$section__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$section.cljs$lang$maxFixedArity = 1;
  om$dom$section.cljs$lang$applyTo = function(arglist__8882) {
    var opts__6241__auto__ = cljs.core.first(arglist__8882);
    var children__6242__auto__ = cljs.core.rest(arglist__8882);
    return om$dom$section__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$section.cljs$core$IFn$_invoke$arity$variadic = om$dom$section__delegate;
  return om$dom$section;
}();
om.dom.select = function() {
  var om$dom$select__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.select.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$select = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8883__i = 0, G__8883__a = new Array(arguments.length - 1);
      while (G__8883__i < G__8883__a.length) {
        G__8883__a[G__8883__i] = arguments[G__8883__i + 1];
        ++G__8883__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8883__a, 0);
    }
    return om$dom$select__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$select.cljs$lang$maxFixedArity = 1;
  om$dom$select.cljs$lang$applyTo = function(arglist__8884) {
    var opts__6241__auto__ = cljs.core.first(arglist__8884);
    var children__6242__auto__ = cljs.core.rest(arglist__8884);
    return om$dom$select__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$select.cljs$core$IFn$_invoke$arity$variadic = om$dom$select__delegate;
  return om$dom$select;
}();
om.dom.small = function() {
  var om$dom$small__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.small.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$small = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8885__i = 0, G__8885__a = new Array(arguments.length - 1);
      while (G__8885__i < G__8885__a.length) {
        G__8885__a[G__8885__i] = arguments[G__8885__i + 1];
        ++G__8885__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8885__a, 0);
    }
    return om$dom$small__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$small.cljs$lang$maxFixedArity = 1;
  om$dom$small.cljs$lang$applyTo = function(arglist__8886) {
    var opts__6241__auto__ = cljs.core.first(arglist__8886);
    var children__6242__auto__ = cljs.core.rest(arglist__8886);
    return om$dom$small__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$small.cljs$core$IFn$_invoke$arity$variadic = om$dom$small__delegate;
  return om$dom$small;
}();
om.dom.source = function() {
  var om$dom$source__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.source.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$source = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8887__i = 0, G__8887__a = new Array(arguments.length - 1);
      while (G__8887__i < G__8887__a.length) {
        G__8887__a[G__8887__i] = arguments[G__8887__i + 1];
        ++G__8887__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8887__a, 0);
    }
    return om$dom$source__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$source.cljs$lang$maxFixedArity = 1;
  om$dom$source.cljs$lang$applyTo = function(arglist__8888) {
    var opts__6241__auto__ = cljs.core.first(arglist__8888);
    var children__6242__auto__ = cljs.core.rest(arglist__8888);
    return om$dom$source__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$source.cljs$core$IFn$_invoke$arity$variadic = om$dom$source__delegate;
  return om$dom$source;
}();
om.dom.span = function() {
  var om$dom$span__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.span.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$span = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8889__i = 0, G__8889__a = new Array(arguments.length - 1);
      while (G__8889__i < G__8889__a.length) {
        G__8889__a[G__8889__i] = arguments[G__8889__i + 1];
        ++G__8889__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8889__a, 0);
    }
    return om$dom$span__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$span.cljs$lang$maxFixedArity = 1;
  om$dom$span.cljs$lang$applyTo = function(arglist__8890) {
    var opts__6241__auto__ = cljs.core.first(arglist__8890);
    var children__6242__auto__ = cljs.core.rest(arglist__8890);
    return om$dom$span__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$span.cljs$core$IFn$_invoke$arity$variadic = om$dom$span__delegate;
  return om$dom$span;
}();
om.dom.strong = function() {
  var om$dom$strong__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.strong.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$strong = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8891__i = 0, G__8891__a = new Array(arguments.length - 1);
      while (G__8891__i < G__8891__a.length) {
        G__8891__a[G__8891__i] = arguments[G__8891__i + 1];
        ++G__8891__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8891__a, 0);
    }
    return om$dom$strong__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$strong.cljs$lang$maxFixedArity = 1;
  om$dom$strong.cljs$lang$applyTo = function(arglist__8892) {
    var opts__6241__auto__ = cljs.core.first(arglist__8892);
    var children__6242__auto__ = cljs.core.rest(arglist__8892);
    return om$dom$strong__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$strong.cljs$core$IFn$_invoke$arity$variadic = om$dom$strong__delegate;
  return om$dom$strong;
}();
om.dom.style = function() {
  var om$dom$style__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.style.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$style = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8893__i = 0, G__8893__a = new Array(arguments.length - 1);
      while (G__8893__i < G__8893__a.length) {
        G__8893__a[G__8893__i] = arguments[G__8893__i + 1];
        ++G__8893__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8893__a, 0);
    }
    return om$dom$style__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$style.cljs$lang$maxFixedArity = 1;
  om$dom$style.cljs$lang$applyTo = function(arglist__8894) {
    var opts__6241__auto__ = cljs.core.first(arglist__8894);
    var children__6242__auto__ = cljs.core.rest(arglist__8894);
    return om$dom$style__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$style.cljs$core$IFn$_invoke$arity$variadic = om$dom$style__delegate;
  return om$dom$style;
}();
om.dom.sub = function() {
  var om$dom$sub__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.sub.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$sub = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8895__i = 0, G__8895__a = new Array(arguments.length - 1);
      while (G__8895__i < G__8895__a.length) {
        G__8895__a[G__8895__i] = arguments[G__8895__i + 1];
        ++G__8895__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8895__a, 0);
    }
    return om$dom$sub__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$sub.cljs$lang$maxFixedArity = 1;
  om$dom$sub.cljs$lang$applyTo = function(arglist__8896) {
    var opts__6241__auto__ = cljs.core.first(arglist__8896);
    var children__6242__auto__ = cljs.core.rest(arglist__8896);
    return om$dom$sub__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$sub.cljs$core$IFn$_invoke$arity$variadic = om$dom$sub__delegate;
  return om$dom$sub;
}();
om.dom.summary = function() {
  var om$dom$summary__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.summary.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$summary = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8897__i = 0, G__8897__a = new Array(arguments.length - 1);
      while (G__8897__i < G__8897__a.length) {
        G__8897__a[G__8897__i] = arguments[G__8897__i + 1];
        ++G__8897__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8897__a, 0);
    }
    return om$dom$summary__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$summary.cljs$lang$maxFixedArity = 1;
  om$dom$summary.cljs$lang$applyTo = function(arglist__8898) {
    var opts__6241__auto__ = cljs.core.first(arglist__8898);
    var children__6242__auto__ = cljs.core.rest(arglist__8898);
    return om$dom$summary__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$summary.cljs$core$IFn$_invoke$arity$variadic = om$dom$summary__delegate;
  return om$dom$summary;
}();
om.dom.sup = function() {
  var om$dom$sup__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.sup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$sup = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8899__i = 0, G__8899__a = new Array(arguments.length - 1);
      while (G__8899__i < G__8899__a.length) {
        G__8899__a[G__8899__i] = arguments[G__8899__i + 1];
        ++G__8899__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8899__a, 0);
    }
    return om$dom$sup__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$sup.cljs$lang$maxFixedArity = 1;
  om$dom$sup.cljs$lang$applyTo = function(arglist__8900) {
    var opts__6241__auto__ = cljs.core.first(arglist__8900);
    var children__6242__auto__ = cljs.core.rest(arglist__8900);
    return om$dom$sup__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$sup.cljs$core$IFn$_invoke$arity$variadic = om$dom$sup__delegate;
  return om$dom$sup;
}();
om.dom.table = function() {
  var om$dom$table__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.table.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$table = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8901__i = 0, G__8901__a = new Array(arguments.length - 1);
      while (G__8901__i < G__8901__a.length) {
        G__8901__a[G__8901__i] = arguments[G__8901__i + 1];
        ++G__8901__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8901__a, 0);
    }
    return om$dom$table__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$table.cljs$lang$maxFixedArity = 1;
  om$dom$table.cljs$lang$applyTo = function(arglist__8902) {
    var opts__6241__auto__ = cljs.core.first(arglist__8902);
    var children__6242__auto__ = cljs.core.rest(arglist__8902);
    return om$dom$table__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$table.cljs$core$IFn$_invoke$arity$variadic = om$dom$table__delegate;
  return om$dom$table;
}();
om.dom.tbody = function() {
  var om$dom$tbody__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.tbody.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$tbody = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8903__i = 0, G__8903__a = new Array(arguments.length - 1);
      while (G__8903__i < G__8903__a.length) {
        G__8903__a[G__8903__i] = arguments[G__8903__i + 1];
        ++G__8903__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8903__a, 0);
    }
    return om$dom$tbody__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$tbody.cljs$lang$maxFixedArity = 1;
  om$dom$tbody.cljs$lang$applyTo = function(arglist__8904) {
    var opts__6241__auto__ = cljs.core.first(arglist__8904);
    var children__6242__auto__ = cljs.core.rest(arglist__8904);
    return om$dom$tbody__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$tbody.cljs$core$IFn$_invoke$arity$variadic = om$dom$tbody__delegate;
  return om$dom$tbody;
}();
om.dom.td = function() {
  var om$dom$td__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.td.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$td = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8905__i = 0, G__8905__a = new Array(arguments.length - 1);
      while (G__8905__i < G__8905__a.length) {
        G__8905__a[G__8905__i] = arguments[G__8905__i + 1];
        ++G__8905__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8905__a, 0);
    }
    return om$dom$td__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$td.cljs$lang$maxFixedArity = 1;
  om$dom$td.cljs$lang$applyTo = function(arglist__8906) {
    var opts__6241__auto__ = cljs.core.first(arglist__8906);
    var children__6242__auto__ = cljs.core.rest(arglist__8906);
    return om$dom$td__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$td.cljs$core$IFn$_invoke$arity$variadic = om$dom$td__delegate;
  return om$dom$td;
}();
om.dom.tfoot = function() {
  var om$dom$tfoot__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.tfoot.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$tfoot = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8907__i = 0, G__8907__a = new Array(arguments.length - 1);
      while (G__8907__i < G__8907__a.length) {
        G__8907__a[G__8907__i] = arguments[G__8907__i + 1];
        ++G__8907__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8907__a, 0);
    }
    return om$dom$tfoot__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$tfoot.cljs$lang$maxFixedArity = 1;
  om$dom$tfoot.cljs$lang$applyTo = function(arglist__8908) {
    var opts__6241__auto__ = cljs.core.first(arglist__8908);
    var children__6242__auto__ = cljs.core.rest(arglist__8908);
    return om$dom$tfoot__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$tfoot.cljs$core$IFn$_invoke$arity$variadic = om$dom$tfoot__delegate;
  return om$dom$tfoot;
}();
om.dom.th = function() {
  var om$dom$th__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.th.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$th = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8909__i = 0, G__8909__a = new Array(arguments.length - 1);
      while (G__8909__i < G__8909__a.length) {
        G__8909__a[G__8909__i] = arguments[G__8909__i + 1];
        ++G__8909__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8909__a, 0);
    }
    return om$dom$th__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$th.cljs$lang$maxFixedArity = 1;
  om$dom$th.cljs$lang$applyTo = function(arglist__8910) {
    var opts__6241__auto__ = cljs.core.first(arglist__8910);
    var children__6242__auto__ = cljs.core.rest(arglist__8910);
    return om$dom$th__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$th.cljs$core$IFn$_invoke$arity$variadic = om$dom$th__delegate;
  return om$dom$th;
}();
om.dom.thead = function() {
  var om$dom$thead__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.thead.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$thead = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8911__i = 0, G__8911__a = new Array(arguments.length - 1);
      while (G__8911__i < G__8911__a.length) {
        G__8911__a[G__8911__i] = arguments[G__8911__i + 1];
        ++G__8911__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8911__a, 0);
    }
    return om$dom$thead__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$thead.cljs$lang$maxFixedArity = 1;
  om$dom$thead.cljs$lang$applyTo = function(arglist__8912) {
    var opts__6241__auto__ = cljs.core.first(arglist__8912);
    var children__6242__auto__ = cljs.core.rest(arglist__8912);
    return om$dom$thead__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$thead.cljs$core$IFn$_invoke$arity$variadic = om$dom$thead__delegate;
  return om$dom$thead;
}();
om.dom.time = function() {
  var om$dom$time__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.time.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$time = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8913__i = 0, G__8913__a = new Array(arguments.length - 1);
      while (G__8913__i < G__8913__a.length) {
        G__8913__a[G__8913__i] = arguments[G__8913__i + 1];
        ++G__8913__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8913__a, 0);
    }
    return om$dom$time__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$time.cljs$lang$maxFixedArity = 1;
  om$dom$time.cljs$lang$applyTo = function(arglist__8914) {
    var opts__6241__auto__ = cljs.core.first(arglist__8914);
    var children__6242__auto__ = cljs.core.rest(arglist__8914);
    return om$dom$time__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$time.cljs$core$IFn$_invoke$arity$variadic = om$dom$time__delegate;
  return om$dom$time;
}();
om.dom.title = function() {
  var om$dom$title__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.title.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$title = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8915__i = 0, G__8915__a = new Array(arguments.length - 1);
      while (G__8915__i < G__8915__a.length) {
        G__8915__a[G__8915__i] = arguments[G__8915__i + 1];
        ++G__8915__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8915__a, 0);
    }
    return om$dom$title__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$title.cljs$lang$maxFixedArity = 1;
  om$dom$title.cljs$lang$applyTo = function(arglist__8916) {
    var opts__6241__auto__ = cljs.core.first(arglist__8916);
    var children__6242__auto__ = cljs.core.rest(arglist__8916);
    return om$dom$title__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$title.cljs$core$IFn$_invoke$arity$variadic = om$dom$title__delegate;
  return om$dom$title;
}();
om.dom.tr = function() {
  var om$dom$tr__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.tr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$tr = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8917__i = 0, G__8917__a = new Array(arguments.length - 1);
      while (G__8917__i < G__8917__a.length) {
        G__8917__a[G__8917__i] = arguments[G__8917__i + 1];
        ++G__8917__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8917__a, 0);
    }
    return om$dom$tr__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$tr.cljs$lang$maxFixedArity = 1;
  om$dom$tr.cljs$lang$applyTo = function(arglist__8918) {
    var opts__6241__auto__ = cljs.core.first(arglist__8918);
    var children__6242__auto__ = cljs.core.rest(arglist__8918);
    return om$dom$tr__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$tr.cljs$core$IFn$_invoke$arity$variadic = om$dom$tr__delegate;
  return om$dom$tr;
}();
om.dom.track = function() {
  var om$dom$track__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.track.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$track = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8919__i = 0, G__8919__a = new Array(arguments.length - 1);
      while (G__8919__i < G__8919__a.length) {
        G__8919__a[G__8919__i] = arguments[G__8919__i + 1];
        ++G__8919__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8919__a, 0);
    }
    return om$dom$track__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$track.cljs$lang$maxFixedArity = 1;
  om$dom$track.cljs$lang$applyTo = function(arglist__8920) {
    var opts__6241__auto__ = cljs.core.first(arglist__8920);
    var children__6242__auto__ = cljs.core.rest(arglist__8920);
    return om$dom$track__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$track.cljs$core$IFn$_invoke$arity$variadic = om$dom$track__delegate;
  return om$dom$track;
}();
om.dom.u = function() {
  var om$dom$u__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.u.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$u = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8921__i = 0, G__8921__a = new Array(arguments.length - 1);
      while (G__8921__i < G__8921__a.length) {
        G__8921__a[G__8921__i] = arguments[G__8921__i + 1];
        ++G__8921__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8921__a, 0);
    }
    return om$dom$u__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$u.cljs$lang$maxFixedArity = 1;
  om$dom$u.cljs$lang$applyTo = function(arglist__8922) {
    var opts__6241__auto__ = cljs.core.first(arglist__8922);
    var children__6242__auto__ = cljs.core.rest(arglist__8922);
    return om$dom$u__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$u.cljs$core$IFn$_invoke$arity$variadic = om$dom$u__delegate;
  return om$dom$u;
}();
om.dom.ul = function() {
  var om$dom$ul__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.ul.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$ul = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8923__i = 0, G__8923__a = new Array(arguments.length - 1);
      while (G__8923__i < G__8923__a.length) {
        G__8923__a[G__8923__i] = arguments[G__8923__i + 1];
        ++G__8923__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8923__a, 0);
    }
    return om$dom$ul__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$ul.cljs$lang$maxFixedArity = 1;
  om$dom$ul.cljs$lang$applyTo = function(arglist__8924) {
    var opts__6241__auto__ = cljs.core.first(arglist__8924);
    var children__6242__auto__ = cljs.core.rest(arglist__8924);
    return om$dom$ul__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$ul.cljs$core$IFn$_invoke$arity$variadic = om$dom$ul__delegate;
  return om$dom$ul;
}();
om.dom.var$ = function() {
  var om$dom$var__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.var$.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$var = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8925__i = 0, G__8925__a = new Array(arguments.length - 1);
      while (G__8925__i < G__8925__a.length) {
        G__8925__a[G__8925__i] = arguments[G__8925__i + 1];
        ++G__8925__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8925__a, 0);
    }
    return om$dom$var__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$var.cljs$lang$maxFixedArity = 1;
  om$dom$var.cljs$lang$applyTo = function(arglist__8926) {
    var opts__6241__auto__ = cljs.core.first(arglist__8926);
    var children__6242__auto__ = cljs.core.rest(arglist__8926);
    return om$dom$var__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$var.cljs$core$IFn$_invoke$arity$variadic = om$dom$var__delegate;
  return om$dom$var;
}();
om.dom.video = function() {
  var om$dom$video__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.video.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$video = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8927__i = 0, G__8927__a = new Array(arguments.length - 1);
      while (G__8927__i < G__8927__a.length) {
        G__8927__a[G__8927__i] = arguments[G__8927__i + 1];
        ++G__8927__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8927__a, 0);
    }
    return om$dom$video__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$video.cljs$lang$maxFixedArity = 1;
  om$dom$video.cljs$lang$applyTo = function(arglist__8928) {
    var opts__6241__auto__ = cljs.core.first(arglist__8928);
    var children__6242__auto__ = cljs.core.rest(arglist__8928);
    return om$dom$video__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$video.cljs$core$IFn$_invoke$arity$variadic = om$dom$video__delegate;
  return om$dom$video;
}();
om.dom.wbr = function() {
  var om$dom$wbr__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.wbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$wbr = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8929__i = 0, G__8929__a = new Array(arguments.length - 1);
      while (G__8929__i < G__8929__a.length) {
        G__8929__a[G__8929__i] = arguments[G__8929__i + 1];
        ++G__8929__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8929__a, 0);
    }
    return om$dom$wbr__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$wbr.cljs$lang$maxFixedArity = 1;
  om$dom$wbr.cljs$lang$applyTo = function(arglist__8930) {
    var opts__6241__auto__ = cljs.core.first(arglist__8930);
    var children__6242__auto__ = cljs.core.rest(arglist__8930);
    return om$dom$wbr__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$wbr.cljs$core$IFn$_invoke$arity$variadic = om$dom$wbr__delegate;
  return om$dom$wbr;
}();
om.dom.circle = function() {
  var om$dom$circle__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.circle.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$circle = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8931__i = 0, G__8931__a = new Array(arguments.length - 1);
      while (G__8931__i < G__8931__a.length) {
        G__8931__a[G__8931__i] = arguments[G__8931__i + 1];
        ++G__8931__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8931__a, 0);
    }
    return om$dom$circle__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$circle.cljs$lang$maxFixedArity = 1;
  om$dom$circle.cljs$lang$applyTo = function(arglist__8932) {
    var opts__6241__auto__ = cljs.core.first(arglist__8932);
    var children__6242__auto__ = cljs.core.rest(arglist__8932);
    return om$dom$circle__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$circle.cljs$core$IFn$_invoke$arity$variadic = om$dom$circle__delegate;
  return om$dom$circle;
}();
om.dom.ellipse = function() {
  var om$dom$ellipse__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.ellipse.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$ellipse = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8933__i = 0, G__8933__a = new Array(arguments.length - 1);
      while (G__8933__i < G__8933__a.length) {
        G__8933__a[G__8933__i] = arguments[G__8933__i + 1];
        ++G__8933__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8933__a, 0);
    }
    return om$dom$ellipse__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$ellipse.cljs$lang$maxFixedArity = 1;
  om$dom$ellipse.cljs$lang$applyTo = function(arglist__8934) {
    var opts__6241__auto__ = cljs.core.first(arglist__8934);
    var children__6242__auto__ = cljs.core.rest(arglist__8934);
    return om$dom$ellipse__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$ellipse.cljs$core$IFn$_invoke$arity$variadic = om$dom$ellipse__delegate;
  return om$dom$ellipse;
}();
om.dom.g = function() {
  var om$dom$g__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.g.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$g = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8935__i = 0, G__8935__a = new Array(arguments.length - 1);
      while (G__8935__i < G__8935__a.length) {
        G__8935__a[G__8935__i] = arguments[G__8935__i + 1];
        ++G__8935__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8935__a, 0);
    }
    return om$dom$g__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$g.cljs$lang$maxFixedArity = 1;
  om$dom$g.cljs$lang$applyTo = function(arglist__8936) {
    var opts__6241__auto__ = cljs.core.first(arglist__8936);
    var children__6242__auto__ = cljs.core.rest(arglist__8936);
    return om$dom$g__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$g.cljs$core$IFn$_invoke$arity$variadic = om$dom$g__delegate;
  return om$dom$g;
}();
om.dom.line = function() {
  var om$dom$line__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.line.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$line = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8937__i = 0, G__8937__a = new Array(arguments.length - 1);
      while (G__8937__i < G__8937__a.length) {
        G__8937__a[G__8937__i] = arguments[G__8937__i + 1];
        ++G__8937__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8937__a, 0);
    }
    return om$dom$line__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$line.cljs$lang$maxFixedArity = 1;
  om$dom$line.cljs$lang$applyTo = function(arglist__8938) {
    var opts__6241__auto__ = cljs.core.first(arglist__8938);
    var children__6242__auto__ = cljs.core.rest(arglist__8938);
    return om$dom$line__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$line.cljs$core$IFn$_invoke$arity$variadic = om$dom$line__delegate;
  return om$dom$line;
}();
om.dom.path = function() {
  var om$dom$path__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.path.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$path = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8939__i = 0, G__8939__a = new Array(arguments.length - 1);
      while (G__8939__i < G__8939__a.length) {
        G__8939__a[G__8939__i] = arguments[G__8939__i + 1];
        ++G__8939__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8939__a, 0);
    }
    return om$dom$path__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$path.cljs$lang$maxFixedArity = 1;
  om$dom$path.cljs$lang$applyTo = function(arglist__8940) {
    var opts__6241__auto__ = cljs.core.first(arglist__8940);
    var children__6242__auto__ = cljs.core.rest(arglist__8940);
    return om$dom$path__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$path.cljs$core$IFn$_invoke$arity$variadic = om$dom$path__delegate;
  return om$dom$path;
}();
om.dom.polyline = function() {
  var om$dom$polyline__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.polyline.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$polyline = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8941__i = 0, G__8941__a = new Array(arguments.length - 1);
      while (G__8941__i < G__8941__a.length) {
        G__8941__a[G__8941__i] = arguments[G__8941__i + 1];
        ++G__8941__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8941__a, 0);
    }
    return om$dom$polyline__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$polyline.cljs$lang$maxFixedArity = 1;
  om$dom$polyline.cljs$lang$applyTo = function(arglist__8942) {
    var opts__6241__auto__ = cljs.core.first(arglist__8942);
    var children__6242__auto__ = cljs.core.rest(arglist__8942);
    return om$dom$polyline__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$polyline.cljs$core$IFn$_invoke$arity$variadic = om$dom$polyline__delegate;
  return om$dom$polyline;
}();
om.dom.rect = function() {
  var om$dom$rect__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.rect.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$rect = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8943__i = 0, G__8943__a = new Array(arguments.length - 1);
      while (G__8943__i < G__8943__a.length) {
        G__8943__a[G__8943__i] = arguments[G__8943__i + 1];
        ++G__8943__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8943__a, 0);
    }
    return om$dom$rect__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$rect.cljs$lang$maxFixedArity = 1;
  om$dom$rect.cljs$lang$applyTo = function(arglist__8944) {
    var opts__6241__auto__ = cljs.core.first(arglist__8944);
    var children__6242__auto__ = cljs.core.rest(arglist__8944);
    return om$dom$rect__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$rect.cljs$core$IFn$_invoke$arity$variadic = om$dom$rect__delegate;
  return om$dom$rect;
}();
om.dom.svg = function() {
  var om$dom$svg__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.svg.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$svg = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8945__i = 0, G__8945__a = new Array(arguments.length - 1);
      while (G__8945__i < G__8945__a.length) {
        G__8945__a[G__8945__i] = arguments[G__8945__i + 1];
        ++G__8945__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8945__a, 0);
    }
    return om$dom$svg__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$svg.cljs$lang$maxFixedArity = 1;
  om$dom$svg.cljs$lang$applyTo = function(arglist__8946) {
    var opts__6241__auto__ = cljs.core.first(arglist__8946);
    var children__6242__auto__ = cljs.core.rest(arglist__8946);
    return om$dom$svg__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$svg.cljs$core$IFn$_invoke$arity$variadic = om$dom$svg__delegate;
  return om$dom$svg;
}();
om.dom.text = function() {
  var om$dom$text__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.text.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$text = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8947__i = 0, G__8947__a = new Array(arguments.length - 1);
      while (G__8947__i < G__8947__a.length) {
        G__8947__a[G__8947__i] = arguments[G__8947__i + 1];
        ++G__8947__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8947__a, 0);
    }
    return om$dom$text__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$text.cljs$lang$maxFixedArity = 1;
  om$dom$text.cljs$lang$applyTo = function(arglist__8948) {
    var opts__6241__auto__ = cljs.core.first(arglist__8948);
    var children__6242__auto__ = cljs.core.rest(arglist__8948);
    return om$dom$text__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$text.cljs$core$IFn$_invoke$arity$variadic = om$dom$text__delegate;
  return om$dom$text;
}();
om.dom.defs = function() {
  var om$dom$defs__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.defs.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$defs = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8949__i = 0, G__8949__a = new Array(arguments.length - 1);
      while (G__8949__i < G__8949__a.length) {
        G__8949__a[G__8949__i] = arguments[G__8949__i + 1];
        ++G__8949__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8949__a, 0);
    }
    return om$dom$defs__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$defs.cljs$lang$maxFixedArity = 1;
  om$dom$defs.cljs$lang$applyTo = function(arglist__8950) {
    var opts__6241__auto__ = cljs.core.first(arglist__8950);
    var children__6242__auto__ = cljs.core.rest(arglist__8950);
    return om$dom$defs__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$defs.cljs$core$IFn$_invoke$arity$variadic = om$dom$defs__delegate;
  return om$dom$defs;
}();
om.dom.linearGradient = function() {
  var om$dom$linearGradient__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.linearGradient.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$linearGradient = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8951__i = 0, G__8951__a = new Array(arguments.length - 1);
      while (G__8951__i < G__8951__a.length) {
        G__8951__a[G__8951__i] = arguments[G__8951__i + 1];
        ++G__8951__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8951__a, 0);
    }
    return om$dom$linearGradient__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$linearGradient.cljs$lang$maxFixedArity = 1;
  om$dom$linearGradient.cljs$lang$applyTo = function(arglist__8952) {
    var opts__6241__auto__ = cljs.core.first(arglist__8952);
    var children__6242__auto__ = cljs.core.rest(arglist__8952);
    return om$dom$linearGradient__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$linearGradient.cljs$core$IFn$_invoke$arity$variadic = om$dom$linearGradient__delegate;
  return om$dom$linearGradient;
}();
om.dom.polygon = function() {
  var om$dom$polygon__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.polygon.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$polygon = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8953__i = 0, G__8953__a = new Array(arguments.length - 1);
      while (G__8953__i < G__8953__a.length) {
        G__8953__a[G__8953__i] = arguments[G__8953__i + 1];
        ++G__8953__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8953__a, 0);
    }
    return om$dom$polygon__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$polygon.cljs$lang$maxFixedArity = 1;
  om$dom$polygon.cljs$lang$applyTo = function(arglist__8954) {
    var opts__6241__auto__ = cljs.core.first(arglist__8954);
    var children__6242__auto__ = cljs.core.rest(arglist__8954);
    return om$dom$polygon__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$polygon.cljs$core$IFn$_invoke$arity$variadic = om$dom$polygon__delegate;
  return om$dom$polygon;
}();
om.dom.radialGradient = function() {
  var om$dom$radialGradient__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.radialGradient.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$radialGradient = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8955__i = 0, G__8955__a = new Array(arguments.length - 1);
      while (G__8955__i < G__8955__a.length) {
        G__8955__a[G__8955__i] = arguments[G__8955__i + 1];
        ++G__8955__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8955__a, 0);
    }
    return om$dom$radialGradient__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$radialGradient.cljs$lang$maxFixedArity = 1;
  om$dom$radialGradient.cljs$lang$applyTo = function(arglist__8956) {
    var opts__6241__auto__ = cljs.core.first(arglist__8956);
    var children__6242__auto__ = cljs.core.rest(arglist__8956);
    return om$dom$radialGradient__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$radialGradient.cljs$core$IFn$_invoke$arity$variadic = om$dom$radialGradient__delegate;
  return om$dom$radialGradient;
}();
om.dom.stop = function() {
  var om$dom$stop__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.stop.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$stop = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8957__i = 0, G__8957__a = new Array(arguments.length - 1);
      while (G__8957__i < G__8957__a.length) {
        G__8957__a[G__8957__i] = arguments[G__8957__i + 1];
        ++G__8957__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8957__a, 0);
    }
    return om$dom$stop__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$stop.cljs$lang$maxFixedArity = 1;
  om$dom$stop.cljs$lang$applyTo = function(arglist__8958) {
    var opts__6241__auto__ = cljs.core.first(arglist__8958);
    var children__6242__auto__ = cljs.core.rest(arglist__8958);
    return om$dom$stop__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$stop.cljs$core$IFn$_invoke$arity$variadic = om$dom$stop__delegate;
  return om$dom$stop;
}();
om.dom.tspan = function() {
  var om$dom$tspan__delegate = function(opts__6241__auto__, children__6242__auto__) {
    return React.DOM.tspan.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__6241__auto__, children__6242__auto__)));
  };
  var om$dom$tspan = function(opts__6241__auto__, var_args) {
    var children__6242__auto__ = null;
    if (arguments.length > 1) {
      var G__8959__i = 0, G__8959__a = new Array(arguments.length - 1);
      while (G__8959__i < G__8959__a.length) {
        G__8959__a[G__8959__i] = arguments[G__8959__i + 1];
        ++G__8959__i;
      }
      children__6242__auto__ = new cljs.core.IndexedSeq(G__8959__a, 0);
    }
    return om$dom$tspan__delegate.call(this, opts__6241__auto__, children__6242__auto__);
  };
  om$dom$tspan.cljs$lang$maxFixedArity = 1;
  om$dom$tspan.cljs$lang$applyTo = function(arglist__8960) {
    var opts__6241__auto__ = cljs.core.first(arglist__8960);
    var children__6242__auto__ = cljs.core.rest(arglist__8960);
    return om$dom$tspan__delegate(opts__6241__auto__, children__6242__auto__);
  };
  om$dom$tspan.cljs$core$IFn$_invoke$arity$variadic = om$dom$tspan__delegate;
  return om$dom$tspan;
}();
om.dom.wrap_form_element = function om$dom$wrap_form_element(ctor, display_name) {
  return React.createFactory(React.createClass({"render":function() {
    var this$ = this;
    var props = {};
    goog.object.extend(props, this$.props, {"children":this$.props["children"], "onChange":this$["onChange"], "value":this$.state["value"]});
    return ctor.call(null, props);
  }, "componentWillReceiveProps":function(new_props) {
    var this$ = this;
    return this$.setState({"value":new_props["value"]});
  }, "onChange":function(e) {
    var this$ = this;
    var handler = this$.props["onChange"];
    if (handler == null) {
      return null;
    } else {
      handler.call(null, e);
      return this$.setState({"value":e.target.value});
    }
  }, "getInitialState":function() {
    var this$ = this;
    return{"value":this$.props["value"]};
  }, "getDisplayName":function() {
    return display_name;
  }}));
};
om.dom.input = om.dom.wrap_form_element.call(null, React.DOM.input, "input");
om.dom.textarea = om.dom.wrap_form_element.call(null, React.DOM.textarea, "textarea");
om.dom.option = om.dom.wrap_form_element.call(null, React.DOM.option, "option");
om.dom.render = function om$dom$render(component, el) {
  return React.render(component, el);
};
om.dom.render_to_str = function om$dom$render_to_str(c) {
  return React.renderToString(c);
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS") && !goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return goog.labs.userAgent.browser.getOperaVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.labs.userAgent.browser.getOperaVersion_ = function(userAgent) {
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgent);
  var lastTuple = goog.array.peek(versionTuples);
  if (lastTuple[0] == "OPR" && lastTuple[1]) {
    return lastTuple[1];
  }
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.getVersionFromTuples_ = function(versionTuples) {
  goog.asserts.assert(versionTuples.length > 2, "Couldn't extract version tuple from user agent string");
  return versionTuples[2] && versionTuples[2][1] ? versionTuples[2][1] : "";
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit");
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = tuples[1];
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  if (goog.userAgent.GECKO) {
    re = /rv\:([^\);]+)(\)|;)/;
  } else {
    if (goog.userAgent.IE) {
      re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.WEBKIT) {
        re = /WebKit\/(\S+)/;
      }
    }
  }
  if (re) {
    var arr = re.exec(goog.userAgent.getUserAgentString());
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE, LEGACY_IE_RANGES:goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className);
  } else {
    retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = doc.documentElement;
    if (!body && !docEl) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for (var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e");
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for (i = 0;i < rows;i++) {
    totalHtml.push(rowHtml);
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild));
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  if (tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return(element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return(goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return(node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return-1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return-1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect = goog.isFunction(element["getBoundingClientRect"]) ? element.getBoundingClientRect() : {"height":element.offsetHeight, "width":element.offsetWidth};
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.isString(node.className) && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true));
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.devicePixelRatio_;
goog.dom.getPixelRatio = goog.functions.cacheReturnValue(function() {
  var win = goog.dom.getWindow();
  var isFirefoxMobile = goog.userAgent.GECKO && goog.userAgent.MOBILE;
  if (goog.isDef(win.devicePixelRatio) && !isFirefoxMobile) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(.75) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(3) || 1;
    }
  }
  return 1;
});
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.ui.IdGenerator");
goog.ui.IdGenerator = function() {
};
goog.addSingletonGetter(goog.ui.IdGenerator);
goog.ui.IdGenerator.prototype.nextId_ = 0;
goog.ui.IdGenerator.prototype.getNextUniqueId = function() {
  return ":" + (this.nextId_++).toString(36);
};
goog.provide("om.core");
goog.require("cljs.core");
goog.require("goog.ui.IdGenerator");
goog.require("goog.dom");
goog.require("om.dom");
om.core._STAR_parent_STAR_ = null;
om.core._STAR_instrument_STAR_ = null;
om.core._STAR_descriptor_STAR_ = null;
om.core._STAR_state_STAR_ = null;
om.core._STAR_root_key_STAR_ = null;
om.core.IDisplayName = function() {
  var obj8980 = {};
  return obj8980;
}();
om.core.display_name = function om$core$display_name(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IDisplayName$display_name$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IDisplayName$display_name$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core.display_name[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core.display_name["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDisplayName.display-name", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IInitState = function() {
  var obj8982 = {};
  return obj8982;
}();
om.core.init_state = function om$core$init_state(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IInitState$init_state$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IInitState$init_state$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core.init_state[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core.init_state["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IInitState.init-state", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IShouldUpdate = function() {
  var obj8984 = {};
  return obj8984;
}();
om.core.should_update = function om$core$should_update(this$, next_props, next_state) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IShouldUpdate$should_update$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IShouldUpdate$should_update$arity$3(this$, next_props, next_state);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core.should_update[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core.should_update["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IShouldUpdate.should-update", this$);
        }
      }
    }().call(null, this$, next_props, next_state);
  }
};
om.core.IWillMount = function() {
  var obj8986 = {};
  return obj8986;
}();
om.core.will_mount = function om$core$will_mount(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IWillMount$will_mount$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IWillMount$will_mount$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core.will_mount[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core.will_mount["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillMount.will-mount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IDidMount = function() {
  var obj8988 = {};
  return obj8988;
}();
om.core.did_mount = function om$core$did_mount(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IDidMount$did_mount$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IDidMount$did_mount$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core.did_mount[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core.did_mount["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDidMount.did-mount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IWillUnmount = function() {
  var obj8990 = {};
  return obj8990;
}();
om.core.will_unmount = function om$core$will_unmount(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IWillUnmount$will_unmount$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IWillUnmount$will_unmount$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core.will_unmount[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core.will_unmount["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillUnmount.will-unmount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IWillUpdate = function() {
  var obj8992 = {};
  return obj8992;
}();
om.core.will_update = function om$core$will_update(this$, next_props, next_state) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IWillUpdate$will_update$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IWillUpdate$will_update$arity$3(this$, next_props, next_state);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core.will_update[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core.will_update["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillUpdate.will-update", this$);
        }
      }
    }().call(null, this$, next_props, next_state);
  }
};
om.core.IDidUpdate = function() {
  var obj8994 = {};
  return obj8994;
}();
om.core.did_update = function om$core$did_update(this$, prev_props, prev_state) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IDidUpdate$did_update$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IDidUpdate$did_update$arity$3(this$, prev_props, prev_state);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core.did_update[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core.did_update["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDidUpdate.did-update", this$);
        }
      }
    }().call(null, this$, prev_props, prev_state);
  }
};
om.core.IWillReceiveProps = function() {
  var obj8996 = {};
  return obj8996;
}();
om.core.will_receive_props = function om$core$will_receive_props(this$, next_props) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IWillReceiveProps$will_receive_props$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IWillReceiveProps$will_receive_props$arity$2(this$, next_props);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core.will_receive_props[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core.will_receive_props["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillReceiveProps.will-receive-props", this$);
        }
      }
    }().call(null, this$, next_props);
  }
};
om.core.IRender = function() {
  var obj8998 = {};
  return obj8998;
}();
om.core.render = function om$core$render(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IRender$render$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IRender$render$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core.render[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core.render["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRender.render", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IRenderProps = function() {
  var obj9000 = {};
  return obj9000;
}();
om.core.render_props = function om$core$render_props(this$, props, state) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IRenderProps$render_props$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IRenderProps$render_props$arity$3(this$, props, state);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core.render_props[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core.render_props["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderProps.render-props", this$);
        }
      }
    }().call(null, this$, props, state);
  }
};
om.core.IRenderState = function() {
  var obj9002 = {};
  return obj9002;
}();
om.core.render_state = function om$core$render_state(this$, state) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IRenderState$render_state$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IRenderState$render_state$arity$2(this$, state);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core.render_state[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core.render_state["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderState.render-state", this$);
        }
      }
    }().call(null, this$, state);
  }
};
om.core.ICheckState = function() {
  var obj9004 = {};
  return obj9004;
}();
om.core.IOmSwap = function() {
  var obj9006 = {};
  return obj9006;
}();
om.core._om_swap_BANG_ = function om$core$_om_swap_BANG_(this$, cursor, korks, f, tag) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IOmSwap$_om_swap_BANG_$arity$5;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IOmSwap$_om_swap_BANG_$arity$5(this$, cursor, korks, f, tag);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core._om_swap_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._om_swap_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmSwap.-om-swap!", this$);
        }
      }
    }().call(null, this$, cursor, korks, f, tag);
  }
};
om.core.IGetState = function() {
  var obj9008 = {};
  return obj9008;
}();
om.core._get_state = function() {
  var om$core$_get_state = null;
  var om$core$_get_state__1 = function(this$) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.om$core$IGetState$_get_state$arity$1;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.om$core$IGetState$_get_state$arity$1(this$);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = om.core._get_state[goog.typeOf(x__4758__auto__)];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = om.core._get_state["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetState.-get-state", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var om$core$_get_state__2 = function(this$, ks) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.om$core$IGetState$_get_state$arity$2;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.om$core$IGetState$_get_state$arity$2(this$, ks);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = om.core._get_state[goog.typeOf(x__4758__auto__)];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = om.core._get_state["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetState.-get-state", this$);
          }
        }
      }().call(null, this$, ks);
    }
  };
  om$core$_get_state = function(this$, ks) {
    switch(arguments.length) {
      case 1:
        return om$core$_get_state__1.call(this, this$);
      case 2:
        return om$core$_get_state__2.call(this, this$, ks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$_get_state.cljs$core$IFn$_invoke$arity$1 = om$core$_get_state__1;
  om$core$_get_state.cljs$core$IFn$_invoke$arity$2 = om$core$_get_state__2;
  return om$core$_get_state;
}();
om.core.IGetRenderState = function() {
  var obj9010 = {};
  return obj9010;
}();
om.core._get_render_state = function() {
  var om$core$_get_render_state = null;
  var om$core$_get_render_state__1 = function(this$) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.om$core$IGetRenderState$_get_render_state$arity$1;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.om$core$IGetRenderState$_get_render_state$arity$1(this$);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = om.core._get_render_state[goog.typeOf(x__4758__auto__)];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = om.core._get_render_state["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetRenderState.-get-render-state", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var om$core$_get_render_state__2 = function(this$, ks) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.om$core$IGetRenderState$_get_render_state$arity$2;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.om$core$IGetRenderState$_get_render_state$arity$2(this$, ks);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = om.core._get_render_state[goog.typeOf(x__4758__auto__)];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = om.core._get_render_state["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetRenderState.-get-render-state", this$);
          }
        }
      }().call(null, this$, ks);
    }
  };
  om$core$_get_render_state = function(this$, ks) {
    switch(arguments.length) {
      case 1:
        return om$core$_get_render_state__1.call(this, this$);
      case 2:
        return om$core$_get_render_state__2.call(this, this$, ks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$_get_render_state.cljs$core$IFn$_invoke$arity$1 = om$core$_get_render_state__1;
  om$core$_get_render_state.cljs$core$IFn$_invoke$arity$2 = om$core$_get_render_state__2;
  return om$core$_get_render_state;
}();
om.core.ISetState = function() {
  var obj9012 = {};
  return obj9012;
}();
om.core._set_state_BANG_ = function() {
  var om$core$_set_state_BANG_ = null;
  var om$core$_set_state_BANG___3 = function(this$, val, render) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.om$core$ISetState$_set_state_BANG_$arity$3;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.om$core$ISetState$_set_state_BANG_$arity$3(this$, val, render);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = om.core._set_state_BANG_[goog.typeOf(x__4758__auto__)];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = om.core._set_state_BANG_["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISetState.-set-state!", this$);
          }
        }
      }().call(null, this$, val, render);
    }
  };
  var om$core$_set_state_BANG___4 = function(this$, ks, val, render) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.om$core$ISetState$_set_state_BANG_$arity$4;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.om$core$ISetState$_set_state_BANG_$arity$4(this$, ks, val, render);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = om.core._set_state_BANG_[goog.typeOf(x__4758__auto__)];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = om.core._set_state_BANG_["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISetState.-set-state!", this$);
          }
        }
      }().call(null, this$, ks, val, render);
    }
  };
  om$core$_set_state_BANG_ = function(this$, ks, val, render) {
    switch(arguments.length) {
      case 3:
        return om$core$_set_state_BANG___3.call(this, this$, ks, val);
      case 4:
        return om$core$_set_state_BANG___4.call(this, this$, ks, val, render);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$_set_state_BANG_.cljs$core$IFn$_invoke$arity$3 = om$core$_set_state_BANG___3;
  om$core$_set_state_BANG_.cljs$core$IFn$_invoke$arity$4 = om$core$_set_state_BANG___4;
  return om$core$_set_state_BANG_;
}();
om.core.IRenderQueue = function() {
  var obj9014 = {};
  return obj9014;
}();
om.core._get_queue = function om$core$_get_queue(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IRenderQueue$_get_queue$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_get_queue$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core._get_queue[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._get_queue["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-get-queue", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core._queue_render_BANG_ = function om$core$_queue_render_BANG_(this$, c) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IRenderQueue$_queue_render_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_queue_render_BANG_$arity$2(this$, c);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core._queue_render_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._queue_render_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-queue-render!", this$);
        }
      }
    }().call(null, this$, c);
  }
};
om.core._empty_queue_BANG_ = function om$core$_empty_queue_BANG_(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IRenderQueue$_empty_queue_BANG_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_empty_queue_BANG_$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core._empty_queue_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._empty_queue_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-empty-queue!", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IValue = function() {
  var obj9016 = {};
  return obj9016;
}();
om.core._value = function om$core$_value(x) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.om$core$IValue$_value$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.om$core$IValue$_value$arity$1(x);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = om.core._value[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._value["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IValue.-value", x);
        }
      }
    }().call(null, x);
  }
};
om.core.IValue["_"] = true;
om.core._value["_"] = function(x) {
  return x;
};
om.core.ICursor = function() {
  var obj9018 = {};
  return obj9018;
}();
om.core._path = function om$core$_path(cursor) {
  if (function() {
    var and__4110__auto__ = cursor;
    if (and__4110__auto__) {
      return cursor.om$core$ICursor$_path$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return cursor.om$core$ICursor$_path$arity$1(cursor);
  } else {
    var x__4758__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__4122__auto__ = om.core._path[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._path["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursor.-path", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core._state = function om$core$_state(cursor) {
  if (function() {
    var and__4110__auto__ = cursor;
    if (and__4110__auto__) {
      return cursor.om$core$ICursor$_state$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return cursor.om$core$ICursor$_state$arity$1(cursor);
  } else {
    var x__4758__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__4122__auto__ = om.core._state[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._state["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursor.-state", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core.IToCursor = function() {
  var obj9020 = {};
  return obj9020;
}();
om.core._to_cursor = function() {
  var om$core$_to_cursor = null;
  var om$core$_to_cursor__2 = function(value, state) {
    if (function() {
      var and__4110__auto__ = value;
      if (and__4110__auto__) {
        return value.om$core$IToCursor$_to_cursor$arity$2;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return value.om$core$IToCursor$_to_cursor$arity$2(value, state);
    } else {
      var x__4758__auto__ = value == null ? null : value;
      return function() {
        var or__4122__auto__ = om.core._to_cursor[goog.typeOf(x__4758__auto__)];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = om.core._to_cursor["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IToCursor.-to-cursor", value);
          }
        }
      }().call(null, value, state);
    }
  };
  var om$core$_to_cursor__3 = function(value, state, path) {
    if (function() {
      var and__4110__auto__ = value;
      if (and__4110__auto__) {
        return value.om$core$IToCursor$_to_cursor$arity$3;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return value.om$core$IToCursor$_to_cursor$arity$3(value, state, path);
    } else {
      var x__4758__auto__ = value == null ? null : value;
      return function() {
        var or__4122__auto__ = om.core._to_cursor[goog.typeOf(x__4758__auto__)];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = om.core._to_cursor["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IToCursor.-to-cursor", value);
          }
        }
      }().call(null, value, state, path);
    }
  };
  om$core$_to_cursor = function(value, state, path) {
    switch(arguments.length) {
      case 2:
        return om$core$_to_cursor__2.call(this, value, state);
      case 3:
        return om$core$_to_cursor__3.call(this, value, state, path);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$_to_cursor.cljs$core$IFn$_invoke$arity$2 = om$core$_to_cursor__2;
  om$core$_to_cursor.cljs$core$IFn$_invoke$arity$3 = om$core$_to_cursor__3;
  return om$core$_to_cursor;
}();
om.core.ICursorDerive = function() {
  var obj9022 = {};
  return obj9022;
}();
om.core._derive = function om$core$_derive(cursor, derived, state, path) {
  if (function() {
    var and__4110__auto__ = cursor;
    if (and__4110__auto__) {
      return cursor.om$core$ICursorDerive$_derive$arity$4;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return cursor.om$core$ICursorDerive$_derive$arity$4(cursor, derived, state, path);
  } else {
    var x__4758__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__4122__auto__ = om.core._derive[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._derive["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursorDerive.-derive", cursor);
        }
      }
    }().call(null, cursor, derived, state, path);
  }
};
om.core.ICursorDerive["_"] = true;
om.core._derive["_"] = function(this$, derived, state, path) {
  return om.core.to_cursor.call(null, derived, state, path);
};
om.core.path = function om$core$path(cursor) {
  return om.core._path.call(null, cursor);
};
om.core.value = function om$core$value(cursor) {
  return om.core._value.call(null, cursor);
};
om.core.state = function om$core$state(cursor) {
  return om.core._state.call(null, cursor);
};
om.core.ITransact = function() {
  var obj9024 = {};
  return obj9024;
}();
om.core._transact_BANG_ = function om$core$_transact_BANG_(cursor, korks, f, tag) {
  if (function() {
    var and__4110__auto__ = cursor;
    if (and__4110__auto__) {
      return cursor.om$core$ITransact$_transact_BANG_$arity$4;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return cursor.om$core$ITransact$_transact_BANG_$arity$4(cursor, korks, f, tag);
  } else {
    var x__4758__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__4122__auto__ = om.core._transact_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._transact_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransact.-transact!", cursor);
        }
      }
    }().call(null, cursor, korks, f, tag);
  }
};
om.core.INotify = function() {
  var obj9026 = {};
  return obj9026;
}();
om.core._listen_BANG_ = function om$core$_listen_BANG_(x, key, tx_listen) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.om$core$INotify$_listen_BANG_$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.om$core$INotify$_listen_BANG_$arity$3(x, key, tx_listen);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = om.core._listen_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._listen_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-listen!", x);
        }
      }
    }().call(null, x, key, tx_listen);
  }
};
om.core._unlisten_BANG_ = function om$core$_unlisten_BANG_(x, key) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.om$core$INotify$_unlisten_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.om$core$INotify$_unlisten_BANG_$arity$2(x, key);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = om.core._unlisten_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._unlisten_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-unlisten!", x);
        }
      }
    }().call(null, x, key);
  }
};
om.core._notify_BANG_ = function om$core$_notify_BANG_(x, tx_data, root_cursor) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.om$core$INotify$_notify_BANG_$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.om$core$INotify$_notify_BANG_$arity$3(x, tx_data, root_cursor);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = om.core._notify_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._notify_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-notify!", x);
        }
      }
    }().call(null, x, tx_data, root_cursor);
  }
};
om.core.IRootProperties = function() {
  var obj9028 = {};
  return obj9028;
}();
om.core._set_property_BANG_ = function om$core$_set_property_BANG_(this$, id, p, val) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IRootProperties$_set_property_BANG_$arity$4;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IRootProperties$_set_property_BANG_$arity$4(this$, id, p, val);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core._set_property_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._set_property_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootProperties.-set-property!", this$);
        }
      }
    }().call(null, this$, id, p, val);
  }
};
om.core._remove_property_BANG_ = function om$core$_remove_property_BANG_(this$, id, p) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IRootProperties$_remove_property_BANG_$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IRootProperties$_remove_property_BANG_$arity$3(this$, id, p);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core._remove_property_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._remove_property_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootProperties.-remove-property!", this$);
        }
      }
    }().call(null, this$, id, p);
  }
};
om.core._remove_properties_BANG_ = function om$core$_remove_properties_BANG_(this$, id) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IRootProperties$_remove_properties_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IRootProperties$_remove_properties_BANG_$arity$2(this$, id);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core._remove_properties_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._remove_properties_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootProperties.-remove-properties!", this$);
        }
      }
    }().call(null, this$, id);
  }
};
om.core._get_property = function om$core$_get_property(this$, id, p) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IRootProperties$_get_property$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IRootProperties$_get_property$arity$3(this$, id, p);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core._get_property[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._get_property["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootProperties.-get-property", this$);
        }
      }
    }().call(null, this$, id, p);
  }
};
om.core.IRootKey = function() {
  var obj9030 = {};
  return obj9030;
}();
om.core._root_key = function om$core$_root_key(cursor) {
  if (function() {
    var and__4110__auto__ = cursor;
    if (and__4110__auto__) {
      return cursor.om$core$IRootKey$_root_key$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return cursor.om$core$IRootKey$_root_key$arity$1(cursor);
  } else {
    var x__4758__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__4122__auto__ = om.core._root_key[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._root_key["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootKey.-root-key", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core.IAdapt = function() {
  var obj9032 = {};
  return obj9032;
}();
om.core._adapt = function om$core$_adapt(this$, other) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IAdapt$_adapt$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IAdapt$_adapt$arity$2(this$, other);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core._adapt[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._adapt["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAdapt.-adapt", this$);
        }
      }
    }().call(null, this$, other);
  }
};
om.core.IAdapt["_"] = true;
om.core._adapt["_"] = function(_, other) {
  return other;
};
om.core.adapt = function om$core$adapt(x, other) {
  return om.core._adapt.call(null, x, other);
};
om.core.IOmRef = function() {
  var obj9034 = {};
  return obj9034;
}();
om.core._add_dep_BANG_ = function om$core$_add_dep_BANG_(this$, c) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IOmRef$_add_dep_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IOmRef$_add_dep_BANG_$arity$2(this$, c);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core._add_dep_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._add_dep_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmRef.-add-dep!", this$);
        }
      }
    }().call(null, this$, c);
  }
};
om.core._remove_dep_BANG_ = function om$core$_remove_dep_BANG_(this$, c) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IOmRef$_remove_dep_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IOmRef$_remove_dep_BANG_$arity$2(this$, c);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core._remove_dep_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._remove_dep_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmRef.-remove-dep!", this$);
        }
      }
    }().call(null, this$, c);
  }
};
om.core._refresh_deps_BANG_ = function om$core$_refresh_deps_BANG_(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IOmRef$_refresh_deps_BANG_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IOmRef$_refresh_deps_BANG_$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core._refresh_deps_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._refresh_deps_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmRef.-refresh-deps!", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core._get_deps = function om$core$_get_deps(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.om$core$IOmRef$_get_deps$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.om$core$IOmRef$_get_deps$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = om.core._get_deps[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = om.core._get_deps["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmRef.-get-deps", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.transact_STAR_ = function om$core$transact_STAR_(state, cursor, korks, f, tag) {
  var old_state = cljs.core.deref.call(null, state);
  var path = cljs.core.into.call(null, om.core.path.call(null, cursor), korks);
  var ret = function() {
    var G__9036 = state;
    if (G__9036) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__9036.om$core$IOmSwap$;
        }
      }())) {
        return true;
      } else {
        if (!G__9036.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmSwap, G__9036);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmSwap, G__9036);
    }
  }() ? om.core._om_swap_BANG_.call(null, state, cursor, korks, f, tag) : cljs.core.empty_QMARK_.call(null, path) ? cljs.core.swap_BANG_.call(null, state, f) : cljs.core.swap_BANG_.call(null, state, cljs.core.update_in, path, f);
  if (cljs.core._EQ_.call(null, ret, new cljs.core.Keyword("om.core", "defer", "om.core/defer", -1038866178))) {
    return null;
  } else {
    var tx_data = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", -188191168), path, new cljs.core.Keyword(null, "old-value", "old-value", 862546795), cljs.core.get_in.call(null, old_state, path), new cljs.core.Keyword(null, "new-value", "new-value", 1087038368), cljs.core.get_in.call(null, cljs.core.deref.call(null, state), path), new cljs.core.Keyword(null, "old-state", "old-state", 1039580704), old_state, new cljs.core.Keyword(null, "new-state", "new-state", 
    -490349212), cljs.core.deref.call(null, state)], null);
    if (!(tag == null)) {
      return om.core.notify_STAR_.call(null, cursor, cljs.core.assoc.call(null, tx_data, new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag));
    } else {
      return om.core.notify_STAR_.call(null, cursor, tx_data);
    }
  }
};
om.core.cursor_QMARK_ = function om$core$cursor_QMARK_(x) {
  var G__9038 = x;
  if (G__9038) {
    var bit__4796__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4122__auto__ = bit__4796__auto__;
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return G__9038.om$core$ICursor$;
      }
    }())) {
      return true;
    } else {
      if (!G__9038.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__9038);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__9038);
  }
};
om.core.component_QMARK_ = function om$core$component_QMARK_(x) {
  return x["isOmComponent"];
};
om.core.children = function om$core$children(node) {
  var c = node.props.children;
  if (cljs.core.ifn_QMARK_.call(null, c)) {
    return node.props.children = c.call(null, node);
  } else {
    return c;
  }
};
om.core.get_props = function() {
  var om$core$get_props = null;
  var om$core$get_props__1 = function(x) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, x))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "x", "x", -555367584, null))))].join(""));
    }
    return x.props["__om_cursor"];
  };
  var om$core$get_props__2 = function(x, korks) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, x))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "x", "x", -555367584, null))))].join(""));
    }
    var korks__$1 = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    var G__9040 = x.props["__om_cursor"];
    var G__9040__$1 = cljs.core.seq.call(null, korks__$1) ? cljs.core.get_in.call(null, G__9040, korks__$1) : G__9040;
    return G__9040__$1;
  };
  om$core$get_props = function(x, korks) {
    switch(arguments.length) {
      case 1:
        return om$core$get_props__1.call(this, x);
      case 2:
        return om$core$get_props__2.call(this, x, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$get_props.cljs$core$IFn$_invoke$arity$1 = om$core$get_props__1;
  om$core$get_props.cljs$core$IFn$_invoke$arity$2 = om$core$get_props__2;
  return om$core$get_props;
}();
om.core.get_state = function() {
  var om$core$get_state = null;
  var om$core$get_state__1 = function(owner) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    return om.core._get_state.call(null, owner);
  };
  var om$core$get_state__2 = function(owner, korks) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._get_state.call(null, owner, ks);
  };
  om$core$get_state = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return om$core$get_state__1.call(this, owner);
      case 2:
        return om$core$get_state__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$get_state.cljs$core$IFn$_invoke$arity$1 = om$core$get_state__1;
  om$core$get_state.cljs$core$IFn$_invoke$arity$2 = om$core$get_state__2;
  return om$core$get_state;
}();
om.core.get_shared = function() {
  var om$core$get_shared = null;
  var om$core$get_shared__1 = function(owner) {
    if (owner == null) {
      return null;
    } else {
      return owner.props["__om_shared"];
    }
  };
  var om$core$get_shared__2 = function(owner, korks) {
    if (!cljs.core.sequential_QMARK_.call(null, korks)) {
      return cljs.core.get.call(null, om$core$get_shared.call(null, owner), korks);
    } else {
      if (cljs.core.empty_QMARK_.call(null, korks)) {
        return om$core$get_shared.call(null, owner);
      } else {
        return cljs.core.get_in.call(null, om$core$get_shared.call(null, owner), korks);
      }
    }
  };
  om$core$get_shared = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return om$core$get_shared__1.call(this, owner);
      case 2:
        return om$core$get_shared__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$get_shared.cljs$core$IFn$_invoke$arity$1 = om$core$get_shared__1;
  om$core$get_shared.cljs$core$IFn$_invoke$arity$2 = om$core$get_shared__2;
  return om$core$get_shared;
}();
om.core.merge_pending_state = function om$core$merge_pending_state(owner) {
  var state = owner.state;
  var temp__4126__auto__ = state["__om_pending_state"];
  if (cljs.core.truth_(temp__4126__auto__)) {
    var pending_state = temp__4126__auto__;
    var G__9042 = state;
    G__9042["__om_prev_state"] = state["__om_state"];
    G__9042["__om_state"] = pending_state;
    G__9042["__om_pending_state"] = null;
    return G__9042;
  } else {
    return null;
  }
};
om.core.merge_props_state = function() {
  var om$core$merge_props_state = null;
  var om$core$merge_props_state__1 = function(owner) {
    return om$core$merge_props_state.call(null, owner, null);
  };
  var om$core$merge_props_state__2 = function(owner, props) {
    var props__$1 = function() {
      var or__4122__auto__ = props;
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return owner.props;
      }
    }();
    var temp__4126__auto__ = props__$1["__om_state"];
    if (cljs.core.truth_(temp__4126__auto__)) {
      var props_state = temp__4126__auto__;
      var state = owner.state;
      state["__om_pending_state"] = cljs.core.merge.call(null, function() {
        var or__4122__auto__ = state["__om_pending_state"];
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return state["__om_state"];
        }
      }(), props_state);
      return props__$1["__om_state"] = null;
    } else {
      return null;
    }
  };
  om$core$merge_props_state = function(owner, props) {
    switch(arguments.length) {
      case 1:
        return om$core$merge_props_state__1.call(this, owner);
      case 2:
        return om$core$merge_props_state__2.call(this, owner, props);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$merge_props_state.cljs$core$IFn$_invoke$arity$1 = om$core$merge_props_state__1;
  om$core$merge_props_state.cljs$core$IFn$_invoke$arity$2 = om$core$merge_props_state__2;
  return om$core$merge_props_state;
}();
om.core.ref_changed_QMARK_ = function om$core$ref_changed_QMARK_(ref) {
  var val = om.core.value.call(null, ref);
  var val_SINGLEQUOTE_ = cljs.core.get_in.call(null, cljs.core.deref.call(null, om.core.state.call(null, ref)), om.core.path.call(null, ref), new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275));
  return cljs.core.not_EQ_.call(null, val, val_SINGLEQUOTE_);
};
om.core.update_refs = function om$core$update_refs(c) {
  var cstate = c.state;
  var refs = cstate["__om_refs"];
  if (cljs.core.count.call(null, refs) === 0) {
    return null;
  } else {
    return cstate["__om_refs"] = cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, cljs.core.filter.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, function(cstate, refs) {
      return function(ref) {
        var ref_val = om.core.value.call(null, ref);
        var ref_state = om.core.state.call(null, ref);
        var ref_path = om.core.path.call(null, ref);
        var ref_val_SINGLEQUOTE_ = cljs.core.get_in.call(null, cljs.core.deref.call(null, ref_state), ref_path, new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275));
        if (cljs.core.not_EQ_.call(null, ref_val, new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275))) {
          if (cljs.core.not_EQ_.call(null, ref_val, ref_val_SINGLEQUOTE_)) {
            return om.core.adapt.call(null, ref, om.core.to_cursor.call(null, ref_val_SINGLEQUOTE_, ref_state, ref_path));
          } else {
            return ref;
          }
        } else {
          return null;
        }
      };
    }(cstate, refs), refs)));
  }
};
om.core.pure_methods = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "componentDidUpdate", "componentDidUpdate", -1983477981), new cljs.core.Keyword(null, "isOmComponent", "isOmComponent", -2070015162), new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 1573788814), new cljs.core.Keyword(null, "componentWillReceiveProps", "componentWillReceiveProps", 559988974), new cljs.core.Keyword(null, "shouldComponentUpdate", "shouldComponentUpdate", 1795750960), 
new cljs.core.Keyword(null, "render", "render", -1408033454), new cljs.core.Keyword(null, "componentWillUpdate", "componentWillUpdate", 657390932), new cljs.core.Keyword(null, "getInitialState", "getInitialState", 1541760916), new cljs.core.Keyword(null, "componentDidMount", "componentDidMount", 955710936), new cljs.core.Keyword(null, "getDisplayName", "getDisplayName", 1324429466), new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", -285327619)], [function(prev_props, prev_state) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__9044 = c;
    if (G__9044) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__9044.om$core$IDidUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__9044.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__9044);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__9044);
    }
  }()) {
    var state_9065 = this$.state;
    om.core.did_update.call(null, c, om.core.get_props.call(null, {"isOmComponent":true, "props":prev_props}), function() {
      var or__4122__auto__ = state_9065["__om_prev_state"];
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return state_9065["__om_state"];
      }
    }());
  } else {
  }
  return this$.state["__om_prev_state"] = null;
}, true, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var cursor = this$.props["__om_cursor"];
  if (function() {
    var G__9045 = c;
    if (G__9045) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__9045.om$core$IWillUnmount$;
        }
      }())) {
        return true;
      } else {
        if (!G__9045.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__9045);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__9045);
    }
  }()) {
    om.core.will_unmount.call(null, c);
  } else {
  }
  var temp__4126__auto__ = cljs.core.seq.call(null, this$.state["__om_refs"]);
  if (temp__4126__auto__) {
    var refs = temp__4126__auto__;
    var seq__9046 = cljs.core.seq.call(null, refs);
    var chunk__9047 = null;
    var count__9048 = 0;
    var i__9049 = 0;
    while (true) {
      if (i__9049 < count__9048) {
        var ref = cljs.core._nth.call(null, chunk__9047, i__9049);
        om.core.unobserve.call(null, this$, ref);
        var G__9066 = seq__9046;
        var G__9067 = chunk__9047;
        var G__9068 = count__9048;
        var G__9069 = i__9049 + 1;
        seq__9046 = G__9066;
        chunk__9047 = G__9067;
        count__9048 = G__9068;
        i__9049 = G__9069;
        continue;
      } else {
        var temp__4126__auto____$1 = cljs.core.seq.call(null, seq__9046);
        if (temp__4126__auto____$1) {
          var seq__9046__$1 = temp__4126__auto____$1;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__9046__$1)) {
            var c__4907__auto__ = cljs.core.chunk_first.call(null, seq__9046__$1);
            var G__9070 = cljs.core.chunk_rest.call(null, seq__9046__$1);
            var G__9071 = c__4907__auto__;
            var G__9072 = cljs.core.count.call(null, c__4907__auto__);
            var G__9073 = 0;
            seq__9046 = G__9070;
            chunk__9047 = G__9071;
            count__9048 = G__9072;
            i__9049 = G__9073;
            continue;
          } else {
            var ref = cljs.core.first.call(null, seq__9046__$1);
            om.core.unobserve.call(null, this$, ref);
            var G__9074 = cljs.core.next.call(null, seq__9046__$1);
            var G__9075 = null;
            var G__9076 = 0;
            var G__9077 = 0;
            seq__9046 = G__9074;
            chunk__9047 = G__9075;
            count__9048 = G__9076;
            i__9049 = G__9077;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  } else {
    return null;
  }
}, function(next_props) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__9050 = c;
    if (G__9050) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__9050.om$core$IWillReceiveProps$;
        }
      }())) {
        return true;
      } else {
        if (!G__9050.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillReceiveProps, G__9050);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillReceiveProps, G__9050);
    }
  }()) {
    return om.core.will_receive_props.call(null, c, om.core.get_props.call(null, {"isOmComponent":true, "props":next_props}));
  } else {
    return null;
  }
}, function(next_props, next_state) {
  var this$ = this;
  var props = this$.props;
  var state = this$.state;
  var c = om.core.children.call(null, this$);
  om.core.merge_props_state.call(null, this$, next_props);
  if (function() {
    var G__9051 = c;
    if (G__9051) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__9051.om$core$IShouldUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__9051.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IShouldUpdate, G__9051);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IShouldUpdate, G__9051);
    }
  }()) {
    return om.core.should_update.call(null, c, om.core.get_props.call(null, {"isOmComponent":true, "props":next_props}), om.core._get_state.call(null, this$));
  } else {
    var cursor = props["__om_cursor"];
    var next_cursor = next_props["__om_cursor"];
    if (cljs.core.not_EQ_.call(null, om.core._value.call(null, cursor), om.core._value.call(null, next_cursor))) {
      return true;
    } else {
      if (om.core.cursor_QMARK_.call(null, cursor) && om.core.cursor_QMARK_.call(null, next_cursor) && cljs.core.not_EQ_.call(null, om.core._path.call(null, cursor), om.core._path.call(null, next_cursor))) {
        return true;
      } else {
        if (cljs.core.not_EQ_.call(null, om.core._get_state.call(null, this$), om.core._get_render_state.call(null, this$))) {
          return true;
        } else {
          if (cljs.core.truth_(function() {
            var and__4110__auto__ = !(cljs.core.count.call(null, state["__om_refs"]) === 0);
            if (and__4110__auto__) {
              return cljs.core.some.call(null, function(and__4110__auto__, cursor, next_cursor, props, state, c, this$) {
                return function(p1__9043_SHARP_) {
                  return om.core.ref_changed_QMARK_.call(null, p1__9043_SHARP_);
                };
              }(and__4110__auto__, cursor, next_cursor, props, state, c, this$), state["__om_refs"]);
            } else {
              return and__4110__auto__;
            }
          }())) {
            return true;
          } else {
            if (!(props["__om_index"] === next_props["__om_index"])) {
              return true;
            } else {
              return false;
            }
          }
        }
      }
    }
  }
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var _STAR_parent_STAR_9052 = om.core._STAR_parent_STAR_;
  var _STAR_state_STAR_9053 = om.core._STAR_state_STAR_;
  var _STAR_instrument_STAR_9054 = om.core._STAR_instrument_STAR_;
  var _STAR_descriptor_STAR_9055 = om.core._STAR_descriptor_STAR_;
  var _STAR_root_key_STAR_9056 = om.core._STAR_root_key_STAR_;
  om.core._STAR_parent_STAR_ = this$;
  om.core._STAR_state_STAR_ = props["__om_app_state"];
  om.core._STAR_instrument_STAR_ = props["__om_instrument"];
  om.core._STAR_descriptor_STAR_ = props["__om_descriptor"];
  om.core._STAR_root_key_STAR_ = props["__om_root_key"];
  try {
    if (function() {
      var G__9057 = c;
      if (G__9057) {
        var bit__4796__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4122__auto__ = bit__4796__auto__;
          if (cljs.core.truth_(or__4122__auto__)) {
            return or__4122__auto__;
          } else {
            return G__9057.om$core$IRender$;
          }
        }())) {
          return true;
        } else {
          if (!G__9057.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__9057);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__9057);
      }
    }()) {
      return om.core.render.call(null, c);
    } else {
      if (function() {
        var G__9058 = c;
        if (G__9058) {
          var bit__4796__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4122__auto__ = bit__4796__auto__;
            if (cljs.core.truth_(or__4122__auto__)) {
              return or__4122__auto__;
            } else {
              return G__9058.om$core$IRenderProps$;
            }
          }())) {
            return true;
          } else {
            if (!G__9058.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderProps, G__9058);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderProps, G__9058);
        }
      }()) {
        return om.core.render_props.call(null, c, props["__om_cursor"], om.core.get_state.call(null, this$));
      } else {
        if (function() {
          var G__9059 = c;
          if (G__9059) {
            var bit__4796__auto__ = null;
            if (cljs.core.truth_(function() {
              var or__4122__auto__ = bit__4796__auto__;
              if (cljs.core.truth_(or__4122__auto__)) {
                return or__4122__auto__;
              } else {
                return G__9059.om$core$IRenderState$;
              }
            }())) {
              return true;
            } else {
              if (!G__9059.cljs$lang$protocol_mask$partition$) {
                return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__9059);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__9059);
          }
        }()) {
          return om.core.render_state.call(null, c, om.core.get_state.call(null, this$));
        } else {
          return c;
        }
      }
    }
  } finally {
    om.core._STAR_root_key_STAR_ = _STAR_root_key_STAR_9056;
    om.core._STAR_descriptor_STAR_ = _STAR_descriptor_STAR_9055;
    om.core._STAR_instrument_STAR_ = _STAR_instrument_STAR_9054;
    om.core._STAR_state_STAR_ = _STAR_state_STAR_9053;
    om.core._STAR_parent_STAR_ = _STAR_parent_STAR_9052;
  }
}, function(next_props, next_state) {
  var this$ = this;
  var c_9078 = om.core.children.call(null, this$);
  if (function() {
    var G__9060 = c_9078;
    if (G__9060) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__9060.om$core$IWillUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__9060.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__9060);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__9060);
    }
  }()) {
    var state_9079 = this$.state;
    om.core.will_update.call(null, c_9078, om.core.get_props.call(null, {"isOmComponent":true, "props":next_props}), om.core._get_state.call(null, this$));
  } else {
  }
  om.core.merge_pending_state.call(null, this$);
  return om.core.update_refs.call(null, this$);
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var istate = function() {
    var or__4122__auto__ = props["__om_init_state"];
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  var id = (new cljs.core.Keyword("om.core", "id", "om.core/id", 299074693)).cljs$core$IFn$_invoke$arity$1(istate);
  var ret = {"__om_state":cljs.core.merge.call(null, function() {
    var G__9061 = c;
    if (G__9061) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__9061.om$core$IInitState$;
        }
      }())) {
        return true;
      } else {
        if (!G__9061.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__9061);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__9061);
    }
  }() ? om.core.init_state.call(null, c) : null, cljs.core.dissoc.call(null, istate, new cljs.core.Keyword("om.core", "id", "om.core/id", 299074693))), "__om_id":function() {
    var or__4122__auto__ = id;
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return goog.ui.IdGenerator.getInstance().getNextUniqueId();
    }
  }()};
  props["__om_init_state"] = null;
  return ret;
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var cursor = this$.props["__om_cursor"];
  if (function() {
    var G__9062 = c;
    if (G__9062) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__9062.om$core$IDidMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__9062.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidMount, G__9062);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidMount, G__9062);
    }
  }()) {
    return om.core.did_mount.call(null, c);
  } else {
    return null;
  }
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__9063 = c;
    if (G__9063) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__9063.om$core$IDisplayName$;
        }
      }())) {
        return true;
      } else {
        if (!G__9063.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDisplayName, G__9063);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDisplayName, G__9063);
    }
  }()) {
    return om.core.display_name.call(null, c);
  } else {
    return null;
  }
}, function() {
  var this$ = this;
  om.core.merge_props_state.call(null, this$);
  var c_9080 = om.core.children.call(null, this$);
  if (function() {
    var G__9064 = c_9080;
    if (G__9064) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__9064.om$core$IWillMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__9064.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__9064);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__9064);
    }
  }()) {
    om.core.will_mount.call(null, c_9080);
  } else {
  }
  return om.core.merge_pending_state.call(null, this$);
}]);
om.core.specify_state_methods_BANG_ = function om$core$specify_state_methods_BANG_(obj) {
  var x9082 = obj;
  x9082.om$core$IGetState$ = true;
  x9082.om$core$IGetState$_get_state$arity$1 = function(x9082) {
    return function(this$) {
      var this$__$1 = this;
      var state = this$__$1.state;
      var or__4122__auto__ = state["__om_pending_state"];
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return state["__om_state"];
      }
    };
  }(x9082);
  x9082.om$core$IGetState$_get_state$arity$2 = function(x9082) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_state.call(null, this$__$1), ks);
    };
  }(x9082);
  x9082.om$core$IGetRenderState$ = true;
  x9082.om$core$IGetRenderState$_get_render_state$arity$1 = function(x9082) {
    return function(this$) {
      var this$__$1 = this;
      return this$__$1.state["__om_state"];
    };
  }(x9082);
  x9082.om$core$IGetRenderState$_get_render_state$arity$2 = function(x9082) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_render_state.call(null, this$__$1), ks);
    };
  }(x9082);
  x9082.om$core$ISetState$ = true;
  x9082.om$core$ISetState$_set_state_BANG_$arity$3 = function(x9082) {
    return function(this$, val, render) {
      var this$__$1 = this;
      var props = this$__$1.props;
      var app_state = props["__om_app_state"];
      this$__$1.state["__om_pending_state"] = val;
      if (cljs.core.truth_(function() {
        var and__4110__auto__ = !(app_state == null);
        if (and__4110__auto__) {
          return render;
        } else {
          return and__4110__auto__;
        }
      }())) {
        return om.core._queue_render_BANG_.call(null, app_state, this$__$1);
      } else {
        return null;
      }
    };
  }(x9082);
  x9082.om$core$ISetState$_set_state_BANG_$arity$4 = function(x9082) {
    return function(this$, ks, val, render) {
      var this$__$1 = this;
      var props = this$__$1.props;
      var state = this$__$1.state;
      var pstate = om.core._get_state.call(null, this$__$1);
      var app_state = props["__om_app_state"];
      state["__om_pending_state"] = cljs.core.assoc_in.call(null, pstate, ks, val);
      if (cljs.core.truth_(function() {
        var and__4110__auto__ = !(app_state == null);
        if (and__4110__auto__) {
          return render;
        } else {
          return and__4110__auto__;
        }
      }())) {
        return om.core._queue_render_BANG_.call(null, app_state, this$__$1);
      } else {
        return null;
      }
    };
  }(x9082);
  return x9082;
};
om.core.pure_descriptor = om.core.specify_state_methods_BANG_.call(null, cljs.core.clj__GT_js.call(null, om.core.pure_methods));
om.core.react_id = function om$core$react_id(x) {
  var id = x["_rootNodeID"];
  if (cljs.core.truth_(id)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "id", "id", 252129435, null)))].join(""));
  }
  return id;
};
om.core.get_gstate = function om$core$get_gstate(owner) {
  return owner.props["__om_app_state"];
};
om.core.no_local_merge_pending_state = function om$core$no_local_merge_pending_state(owner) {
  var gstate = om.core.get_gstate.call(null, owner);
  var spath = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, owner)], null);
  var states = cljs.core.get_in.call(null, cljs.core.deref.call(null, gstate), spath);
  if (cljs.core.truth_((new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973)).cljs$core$IFn$_invoke$arity$1(states))) {
    return cljs.core.swap_BANG_.call(null, gstate, cljs.core.update_in, spath, function(gstate, spath, states) {
      return function(states__$1) {
        return cljs.core.dissoc.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, states__$1, new cljs.core.Keyword(null, "previous-state", "previous-state", 1888227923), (new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)).cljs$core$IFn$_invoke$arity$1(states__$1)), new cljs.core.Keyword(null, "render-state", "render-state", 2053902270), cljs.core.merge.call(null, (new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)).cljs$core$IFn$_invoke$arity$1(states__$1), 
        (new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973)).cljs$core$IFn$_invoke$arity$1(states__$1))), new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973));
      };
    }(gstate, spath, states));
  } else {
    return null;
  }
};
om.core.no_local_state_methods = cljs.core.assoc.call(null, om.core.pure_methods, new cljs.core.Keyword(null, "getInitialState", "getInitialState", 1541760916), function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var istate = function() {
    var or__4122__auto__ = props["__om_init_state"];
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  var om_id = function() {
    var or__4122__auto__ = (new cljs.core.Keyword("om.core", "id", "om.core/id", 299074693)).cljs$core$IFn$_invoke$arity$1(istate);
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return goog.ui.IdGenerator.getInstance().getNextUniqueId();
    }
  }();
  var state = cljs.core.merge.call(null, cljs.core.dissoc.call(null, istate, new cljs.core.Keyword("om.core", "id", "om.core/id", 299074693)), function() {
    var G__9083 = c;
    if (G__9083) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__9083.om$core$IInitState$;
        }
      }())) {
        return true;
      } else {
        if (!G__9083.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__9083);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__9083);
    }
  }() ? om.core.init_state.call(null, c) : null);
  var spath = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$), new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)], null);
  props["__om_init_state"] = null;
  cljs.core.swap_BANG_.call(null, om.core.get_gstate.call(null, this$), cljs.core.assoc_in, spath, state);
  return{"__om_id":om_id};
}, new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", -285327619), function() {
  var this$ = this;
  om.core.merge_props_state.call(null, this$);
  var c_9092 = om.core.children.call(null, this$);
  if (function() {
    var G__9084 = c_9092;
    if (G__9084) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__9084.om$core$IWillMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__9084.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__9084);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__9084);
    }
  }()) {
    om.core.will_mount.call(null, c_9092);
  } else {
  }
  return om.core.no_local_merge_pending_state.call(null, this$);
}, new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 1573788814), function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__9085 = c;
    if (G__9085) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__9085.om$core$IWillUnmount$;
        }
      }())) {
        return true;
      } else {
        if (!G__9085.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__9085);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__9085);
    }
  }()) {
    om.core.will_unmount.call(null, c);
  } else {
  }
  cljs.core.swap_BANG_.call(null, om.core.get_gstate.call(null, this$), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128)], null), cljs.core.dissoc, om.core.react_id.call(null, this$));
  var temp__4126__auto__ = cljs.core.seq.call(null, this$.state["__om_refs"]);
  if (temp__4126__auto__) {
    var refs = temp__4126__auto__;
    var seq__9086 = cljs.core.seq.call(null, refs);
    var chunk__9087 = null;
    var count__9088 = 0;
    var i__9089 = 0;
    while (true) {
      if (i__9089 < count__9088) {
        var ref = cljs.core._nth.call(null, chunk__9087, i__9089);
        om.core.unobserve.call(null, this$, ref);
        var G__9093 = seq__9086;
        var G__9094 = chunk__9087;
        var G__9095 = count__9088;
        var G__9096 = i__9089 + 1;
        seq__9086 = G__9093;
        chunk__9087 = G__9094;
        count__9088 = G__9095;
        i__9089 = G__9096;
        continue;
      } else {
        var temp__4126__auto____$1 = cljs.core.seq.call(null, seq__9086);
        if (temp__4126__auto____$1) {
          var seq__9086__$1 = temp__4126__auto____$1;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__9086__$1)) {
            var c__4907__auto__ = cljs.core.chunk_first.call(null, seq__9086__$1);
            var G__9097 = cljs.core.chunk_rest.call(null, seq__9086__$1);
            var G__9098 = c__4907__auto__;
            var G__9099 = cljs.core.count.call(null, c__4907__auto__);
            var G__9100 = 0;
            seq__9086 = G__9097;
            chunk__9087 = G__9098;
            count__9088 = G__9099;
            i__9089 = G__9100;
            continue;
          } else {
            var ref = cljs.core.first.call(null, seq__9086__$1);
            om.core.unobserve.call(null, this$, ref);
            var G__9101 = cljs.core.next.call(null, seq__9086__$1);
            var G__9102 = null;
            var G__9103 = 0;
            var G__9104 = 0;
            seq__9086 = G__9101;
            chunk__9087 = G__9102;
            count__9088 = G__9103;
            i__9089 = G__9104;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  } else {
    return null;
  }
}, new cljs.core.Keyword(null, "componentWillUpdate", "componentWillUpdate", 657390932), function(next_props, next_state) {
  var this$ = this;
  var props_9105 = this$.props;
  var c_9106 = om.core.children.call(null, this$);
  if (function() {
    var G__9090 = c_9106;
    if (G__9090) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__9090.om$core$IWillUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__9090.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__9090);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__9090);
    }
  }()) {
    var state_9107 = this$.state;
    om.core.will_update.call(null, c_9106, om.core.get_props.call(null, {"isOmComponent":true, "props":next_props}), om.core._get_state.call(null, this$));
  } else {
  }
  om.core.no_local_merge_pending_state.call(null, this$);
  return om.core.update_refs.call(null, this$);
}, new cljs.core.Keyword(null, "componentDidUpdate", "componentDidUpdate", -1983477981), function(prev_props, prev_state) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var gstate = om.core.get_gstate.call(null, this$);
  var states = cljs.core.get_in.call(null, cljs.core.deref.call(null, gstate), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$)], null));
  var spath = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$)], null);
  if (function() {
    var G__9091 = c;
    if (G__9091) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__9091.om$core$IDidUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__9091.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__9091);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__9091);
    }
  }()) {
    var state_9108 = this$.state;
    om.core.did_update.call(null, c, om.core.get_props.call(null, {"isOmComponent":true, "props":prev_props}), function() {
      var or__4122__auto__ = (new cljs.core.Keyword(null, "previous-state", "previous-state", 1888227923)).cljs$core$IFn$_invoke$arity$1(states);
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return(new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)).cljs$core$IFn$_invoke$arity$1(states);
      }
    }());
  } else {
  }
  if (cljs.core.truth_((new cljs.core.Keyword(null, "previous-state", "previous-state", 1888227923)).cljs$core$IFn$_invoke$arity$1(states))) {
    return cljs.core.swap_BANG_.call(null, gstate, cljs.core.update_in, spath, cljs.core.dissoc, new cljs.core.Keyword(null, "previous-state", "previous-state", 1888227923));
  } else {
    return null;
  }
});
om.core.no_local_descriptor = function om$core$no_local_descriptor(methods$) {
  var x9110 = cljs.core.clj__GT_js.call(null, methods$);
  x9110.om$core$IGetState$ = true;
  x9110.om$core$IGetState$_get_state$arity$1 = function(x9110) {
    return function(this$) {
      var this$__$1 = this;
      var spath = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$__$1)], null);
      var states = cljs.core.get_in.call(null, cljs.core.deref.call(null, om.core.get_gstate.call(null, this$__$1)), spath);
      var or__4122__auto__ = (new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973)).cljs$core$IFn$_invoke$arity$1(states);
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return(new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)).cljs$core$IFn$_invoke$arity$1(states);
      }
    };
  }(x9110);
  x9110.om$core$IGetState$_get_state$arity$2 = function(x9110) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_state.call(null, this$__$1), ks);
    };
  }(x9110);
  x9110.om$core$IGetRenderState$ = true;
  x9110.om$core$IGetRenderState$_get_render_state$arity$1 = function(x9110) {
    return function(this$) {
      var this$__$1 = this;
      var spath = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$__$1), new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)], null);
      return cljs.core.get_in.call(null, cljs.core.deref.call(null, om.core.get_gstate.call(null, this$__$1)), spath);
    };
  }(x9110);
  x9110.om$core$IGetRenderState$_get_render_state$arity$2 = function(x9110) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_render_state.call(null, this$__$1), ks);
    };
  }(x9110);
  x9110.om$core$ISetState$ = true;
  x9110.om$core$ISetState$_set_state_BANG_$arity$3 = function(x9110) {
    return function(this$, val, render) {
      var this$__$1 = this;
      var gstate = om.core.get_gstate.call(null, this$__$1);
      var spath = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$__$1), new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973)], null);
      cljs.core.swap_BANG_.call(null, om.core.get_gstate.call(null, this$__$1), cljs.core.assoc_in, spath, val);
      if (cljs.core.truth_(function() {
        var and__4110__auto__ = !(gstate == null);
        if (and__4110__auto__) {
          return render;
        } else {
          return and__4110__auto__;
        }
      }())) {
        return om.core._queue_render_BANG_.call(null, gstate, this$__$1);
      } else {
        return null;
      }
    };
  }(x9110);
  x9110.om$core$ISetState$_set_state_BANG_$arity$4 = function(x9110) {
    return function(this$, ks, val, render) {
      var this$__$1 = this;
      return om.core._set_state_BANG_.call(null, this$__$1, cljs.core.assoc_in.call(null, om.core._get_state.call(null, this$__$1), ks, val), render);
    };
  }(x9110);
  return x9110;
};
om.core.valid_QMARK_ = function om$core$valid_QMARK_(x) {
  if (function() {
    var G__9112 = x;
    if (G__9112) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__9112.om$core$ICursor$;
        }
      }())) {
        return true;
      } else {
        if (!G__9112.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__9112);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__9112);
    }
  }()) {
    return!cljs.core.keyword_identical_QMARK_.call(null, cljs.core.deref.call(null, x), new cljs.core.Keyword("om.core", "invalid", "om.core/invalid", 1948827993));
  } else {
    return true;
  }
};
om.core.MapCursor = function(value, state, path) {
  this.value = value;
  this.state = state;
  this.path = path;
  this.cljs$lang$protocol_mask$partition0$ = 2163640079;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
om.core.MapCursor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._lookup.call(null, this$__$1, k, null);
};
om.core.MapCursor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, k, not_found) {
  var self__ = this;
  var this$__$1 = this;
  var v = cljs.core._lookup.call(null, self__.value, k, new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275));
  if (!cljs.core._EQ_.call(null, v, new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275))) {
    return om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, k));
  } else {
    return not_found;
  }
};
om.core.MapCursor.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._kv_reduce.call(null, self__.value, f, init);
};
om.core.MapCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._pr_writer.call(null, self__.value, writer, opts);
};
om.core.MapCursor.prototype.om$core$ICursor$ = true;
om.core.MapCursor.prototype.om$core$ICursor$_path$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.path;
};
om.core.MapCursor.prototype.om$core$ICursor$_state$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
om.core.MapCursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.meta.call(null, self__.value);
};
om.core.MapCursor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(self__.value, self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._count.call(null, self__.value);
};
om.core.MapCursor.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash.call(null, self__.value);
};
om.core.MapCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (om.core.cursor_QMARK_.call(null, other)) {
    return cljs.core._EQ_.call(null, self__.value, om.core._value.call(null, other));
  } else {
    return cljs.core._EQ_.call(null, self__.value, other);
  }
};
om.core.MapCursor.prototype.om$core$IValue$ = true;
om.core.MapCursor.prototype.om$core$IValue$_value$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
om.core.MapCursor.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core.empty.call(null, self__.value), self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$IMap$_dissoc$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core._dissoc.call(null, self__.value, k), self__.state, self__.path);
};
om.core.MapCursor.prototype.om$core$ITransact$ = true;
om.core.MapCursor.prototype.om$core$ITransact$_transact_BANG_$arity$4 = function(this$, korks, f, tag) {
  var self__ = this;
  var this$__$1 = this;
  return om.core.transact_STAR_.call(null, self__.state, this$__$1, korks, f, tag);
};
om.core.MapCursor.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._contains_key_QMARK_.call(null, self__.value, k);
};
om.core.MapCursor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(_, k, v) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core._assoc.call(null, self__.value, k, v), self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.count.call(null, self__.value) > 0) {
    return cljs.core.map.call(null, function(this$__$1) {
      return function(p__9114) {
        var vec__9115 = p__9114;
        var k = cljs.core.nth.call(null, vec__9115, 0, null);
        var v = cljs.core.nth.call(null, vec__9115, 1, null);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, k))], null);
      };
    }(this$__$1), self__.value);
  } else {
    return null;
  }
};
om.core.MapCursor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core.with_meta.call(null, self__.value, new_meta), self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$ICollection$_conj$arity$2 = function(_, o) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core._conj.call(null, self__.value, o), self__.state, self__.path);
};
om.core.MapCursor.prototype.call = function() {
  var G__9116 = null;
  var G__9116__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k);
  };
  var G__9116__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k, not_found);
  };
  G__9116 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9116__2.call(this, self__, k);
      case 3:
        return G__9116__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9116.cljs$core$IFn$_invoke$arity$2 = G__9116__2;
  G__9116.cljs$core$IFn$_invoke$arity$3 = G__9116__3;
  return G__9116;
}();
om.core.MapCursor.prototype.apply = function(self__, args9113) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9113)));
};
om.core.MapCursor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k);
};
om.core.MapCursor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k, not_found);
};
om.core.MapCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.state), self__.path, new cljs.core.Keyword("om.core", "invalid", "om.core/invalid", 1948827993));
};
om.core.MapCursor.cljs$lang$type = true;
om.core.MapCursor.cljs$lang$ctorStr = "om.core/MapCursor";
om.core.MapCursor.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "om.core/MapCursor");
};
om.core.__GT_MapCursor = function om$core$__GT_MapCursor(value, state, path) {
  return new om.core.MapCursor(value, state, path);
};
om.core.IndexedCursor = function(value, state, path) {
  this.value = value;
  this.state = state;
  this.path = path;
  this.cljs$lang$protocol_mask$partition0$ = 2180424479;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
om.core.IndexedCursor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, n) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._nth.call(null, this$__$1, n, null);
};
om.core.IndexedCursor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, n, not_found) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._nth.call(null, this$__$1, n, not_found);
};
om.core.IndexedCursor.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._kv_reduce.call(null, self__.value, f, init);
};
om.core.IndexedCursor.prototype.cljs$core$IIndexed$_nth$arity$2 = function(this$, n) {
  var self__ = this;
  var this$__$1 = this;
  return om.core._derive.call(null, this$__$1, cljs.core._nth.call(null, self__.value, n), self__.state, cljs.core.conj.call(null, self__.path, n));
};
om.core.IndexedCursor.prototype.cljs$core$IIndexed$_nth$arity$3 = function(this$, n, not_found) {
  var self__ = this;
  var this$__$1 = this;
  if (n < cljs.core._count.call(null, self__.value)) {
    return om.core._derive.call(null, this$__$1, cljs.core._nth.call(null, self__.value, n, not_found), self__.state, cljs.core.conj.call(null, self__.path, n));
  } else {
    return not_found;
  }
};
om.core.IndexedCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._pr_writer.call(null, self__.value, writer, opts);
};
om.core.IndexedCursor.prototype.om$core$ICursor$ = true;
om.core.IndexedCursor.prototype.om$core$ICursor$_path$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.path;
};
om.core.IndexedCursor.prototype.om$core$ICursor$_state$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
om.core.IndexedCursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.meta.call(null, self__.value);
};
om.core.IndexedCursor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(self__.value, self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._count.call(null, self__.value);
};
om.core.IndexedCursor.prototype.cljs$core$IStack$_peek$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return om.core._derive.call(null, this$__$1, cljs.core._peek.call(null, self__.value), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$IStack$_pop$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return om.core._derive.call(null, this$__$1, cljs.core._pop.call(null, self__.value), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash.call(null, self__.value);
};
om.core.IndexedCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (om.core.cursor_QMARK_.call(null, other)) {
    return cljs.core._EQ_.call(null, self__.value, om.core._value.call(null, other));
  } else {
    return cljs.core._EQ_.call(null, self__.value, other);
  }
};
om.core.IndexedCursor.prototype.om$core$IValue$ = true;
om.core.IndexedCursor.prototype.om$core$IValue$_value$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
om.core.IndexedCursor.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(cljs.core.empty.call(null, self__.value), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.om$core$ITransact$ = true;
om.core.IndexedCursor.prototype.om$core$ITransact$_transact_BANG_$arity$4 = function(this$, korks, f, tag) {
  var self__ = this;
  var this$__$1 = this;
  return om.core.transact_STAR_.call(null, self__.state, this$__$1, korks, f, tag);
};
om.core.IndexedCursor.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._contains_key_QMARK_.call(null, self__.value, k);
};
om.core.IndexedCursor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this$, n, v) {
  var self__ = this;
  var this$__$1 = this;
  return om.core._derive.call(null, this$__$1, cljs.core._assoc_n.call(null, self__.value, n, v), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.count.call(null, self__.value) > 0) {
    return cljs.core.map.call(null, function(this$__$1) {
      return function(v, i) {
        return om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, i));
      };
    }(this$__$1), self__.value, cljs.core.range.call(null));
  } else {
    return null;
  }
};
om.core.IndexedCursor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(cljs.core.with_meta.call(null, self__.value, new_meta), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$ICollection$_conj$arity$2 = function(_, o) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(cljs.core._conj.call(null, self__.value, o), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.call = function() {
  var G__9118 = null;
  var G__9118__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k);
  };
  var G__9118__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k, not_found);
  };
  G__9118 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9118__2.call(this, self__, k);
      case 3:
        return G__9118__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9118.cljs$core$IFn$_invoke$arity$2 = G__9118__2;
  G__9118.cljs$core$IFn$_invoke$arity$3 = G__9118__3;
  return G__9118;
}();
om.core.IndexedCursor.prototype.apply = function(self__, args9117) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9117)));
};
om.core.IndexedCursor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k);
};
om.core.IndexedCursor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k, not_found);
};
om.core.IndexedCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.state), self__.path, new cljs.core.Keyword("om.core", "invalid", "om.core/invalid", 1948827993));
};
om.core.IndexedCursor.cljs$lang$type = true;
om.core.IndexedCursor.cljs$lang$ctorStr = "om.core/IndexedCursor";
om.core.IndexedCursor.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "om.core/IndexedCursor");
};
om.core.__GT_IndexedCursor = function om$core$__GT_IndexedCursor(value, state, path) {
  return new om.core.IndexedCursor(value, state, path);
};
om.core.to_cursor_STAR_ = function om$core$to_cursor_STAR_(val, state, path) {
  var x9120 = cljs.core.clone.call(null, val);
  x9120.cljs$core$IEquiv$ = true;
  x9120.cljs$core$IEquiv$_equiv$arity$2 = function(x9120) {
    return function(_, other) {
      var ___$1 = this;
      if (om.core.cursor_QMARK_.call(null, other)) {
        return cljs.core._EQ_.call(null, val, om.core._value.call(null, other));
      } else {
        return cljs.core._EQ_.call(null, val, other);
      }
    };
  }(x9120);
  x9120.om$core$ITransact$ = true;
  x9120.om$core$ITransact$_transact_BANG_$arity$4 = function(x9120) {
    return function(this$, korks, f, tag) {
      var this$__$1 = this;
      return om.core.transact_STAR_.call(null, state, this$__$1, korks, f, tag);
    };
  }(x9120);
  x9120.om$core$ICursor$ = true;
  x9120.om$core$ICursor$_path$arity$1 = function(x9120) {
    return function(_) {
      var ___$1 = this;
      return path;
    };
  }(x9120);
  x9120.om$core$ICursor$_state$arity$1 = function(x9120) {
    return function(_) {
      var ___$1 = this;
      return state;
    };
  }(x9120);
  x9120.cljs$core$IDeref$ = true;
  x9120.cljs$core$IDeref$_deref$arity$1 = function(x9120) {
    return function(this$) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, cljs.core.deref.call(null, state), path, new cljs.core.Keyword("om.core", "invalid", "om.core/invalid", 1948827993));
    };
  }(x9120);
  return x9120;
};
om.core.to_cursor = function() {
  var om$core$to_cursor = null;
  var om$core$to_cursor__1 = function(val) {
    return om$core$to_cursor.call(null, val, null, cljs.core.PersistentVector.EMPTY);
  };
  var om$core$to_cursor__2 = function(val, state) {
    return om$core$to_cursor.call(null, val, state, cljs.core.PersistentVector.EMPTY);
  };
  var om$core$to_cursor__3 = function(val, state, path) {
    if (om.core.cursor_QMARK_.call(null, val)) {
      return val;
    } else {
      if (function() {
        var G__9123 = val;
        if (G__9123) {
          var bit__4796__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4122__auto__ = bit__4796__auto__;
            if (cljs.core.truth_(or__4122__auto__)) {
              return or__4122__auto__;
            } else {
              return G__9123.om$core$IToCursor$;
            }
          }())) {
            return true;
          } else {
            if (!G__9123.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IToCursor, G__9123);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IToCursor, G__9123);
        }
      }()) {
        return om.core._to_cursor.call(null, val, state, path);
      } else {
        if (cljs.core.indexed_QMARK_.call(null, val)) {
          return new om.core.IndexedCursor(val, state, path);
        } else {
          if (cljs.core.map_QMARK_.call(null, val)) {
            return new om.core.MapCursor(val, state, path);
          } else {
            if (function() {
              var G__9124 = val;
              if (G__9124) {
                var bit__4796__auto__ = G__9124.cljs$lang$protocol_mask$partition1$ & 8192;
                if (bit__4796__auto__ || G__9124.cljs$core$ICloneable$) {
                  return true;
                } else {
                  if (!G__9124.cljs$lang$protocol_mask$partition1$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__9124);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__9124);
              }
            }()) {
              return om.core.to_cursor_STAR_.call(null, val, state, path);
            } else {
              return val;
            }
          }
        }
      }
    }
  };
  om$core$to_cursor = function(val, state, path) {
    switch(arguments.length) {
      case 1:
        return om$core$to_cursor__1.call(this, val);
      case 2:
        return om$core$to_cursor__2.call(this, val, state);
      case 3:
        return om$core$to_cursor__3.call(this, val, state, path);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$to_cursor.cljs$core$IFn$_invoke$arity$1 = om$core$to_cursor__1;
  om$core$to_cursor.cljs$core$IFn$_invoke$arity$2 = om$core$to_cursor__2;
  om$core$to_cursor.cljs$core$IFn$_invoke$arity$3 = om$core$to_cursor__3;
  return om$core$to_cursor;
}();
om.core.notify_STAR_ = function om$core$notify_STAR_(cursor, tx_data) {
  var state = om.core._state.call(null, cursor);
  return om.core._notify_BANG_.call(null, state, tx_data, om.core.to_cursor.call(null, cljs.core.deref.call(null, state), state));
};
om.core.root_cursor = function om$core$root_cursor(atom) {
  if (function() {
    var G__9126 = atom;
    if (G__9126) {
      var bit__4796__auto__ = G__9126.cljs$lang$protocol_mask$partition0$ & 32768;
      if (bit__4796__auto__ || G__9126.cljs$core$IDeref$) {
        return true;
      } else {
        if (!G__9126.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__9126);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__9126);
    }
  }()) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IDeref", "IDeref", 1738423197, null), new cljs.core.Symbol(null, "atom", "atom", 1243487874, null))))].join(""));
  }
  return om.core.to_cursor.call(null, cljs.core.deref.call(null, atom), atom, cljs.core.PersistentVector.EMPTY);
};
om.core._refs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
om.core.ref_sub_cursor = function om$core$ref_sub_cursor(x, parent) {
  var x9128 = cljs.core.clone.call(null, x);
  x9128.om$core$ITransact$ = true;
  x9128.om$core$ITransact$_transact_BANG_$arity$4 = function(x9128) {
    return function(cursor, korks, f, tag) {
      var cursor__$1 = this;
      om.core.commit_BANG_.call(null, cursor__$1, korks, f);
      return om.core._refresh_deps_BANG_.call(null, parent);
    };
  }(x9128);
  x9128.om$core$ICursorDerive$ = true;
  x9128.om$core$ICursorDerive$_derive$arity$4 = function(x9128) {
    return function(this$, derived, state, path) {
      var this$__$1 = this;
      var cursor_SINGLEQUOTE_ = om.core.to_cursor.call(null, derived, state, path);
      if (om.core.cursor_QMARK_.call(null, cursor_SINGLEQUOTE_)) {
        return om.core.adapt.call(null, this$__$1, cursor_SINGLEQUOTE_);
      } else {
        return cursor_SINGLEQUOTE_;
      }
    };
  }(x9128);
  x9128.om$core$IAdapt$ = true;
  x9128.om$core$IAdapt$_adapt$arity$2 = function(x9128) {
    return function(this$, other) {
      var this$__$1 = this;
      return om$core$ref_sub_cursor.call(null, om.core.adapt.call(null, x, other), parent);
    };
  }(x9128);
  x9128.cljs$core$ICloneable$ = true;
  x9128.cljs$core$ICloneable$_clone$arity$1 = function(x9128) {
    return function(this$) {
      var this$__$1 = this;
      return om$core$ref_sub_cursor.call(null, cljs.core.clone.call(null, x), parent);
    };
  }(x9128);
  return x9128;
};
om.core.ref_cursor = function om$core$ref_cursor(cursor) {
  if (om.core.cursor_QMARK_.call(null, cursor)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
  }
  if (function() {
    var G__9135 = cursor;
    if (G__9135) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__9135.om$core$IOmRef$;
        }
      }())) {
        return true;
      } else {
        if (!G__9135.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmRef, G__9135);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmRef, G__9135);
    }
  }()) {
    return cursor;
  } else {
    var path = om.core.path.call(null, cursor);
    var storage = cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, om.core._refs, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [path], null), cljs.core.fnil.call(null, cljs.core.identity, cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY))), path);
    var x9136 = cljs.core.clone.call(null, cursor);
    x9136.om$core$ITransact$ = true;
    x9136.om$core$ITransact$_transact_BANG_$arity$4 = function(x9136, path, storage) {
      return function(cursor__$1, korks, f, tag) {
        var cursor__$2 = this;
        om.core.commit_BANG_.call(null, cursor__$2, korks, f);
        return om.core._refresh_deps_BANG_.call(null, cursor__$2);
      };
    }(x9136, path, storage);
    x9136.om$core$IOmRef$ = true;
    x9136.om$core$IOmRef$_add_dep_BANG_$arity$2 = function(x9136, path, storage) {
      return function(_, c) {
        var ___$1 = this;
        return cljs.core.swap_BANG_.call(null, storage, cljs.core.assoc, om.core.id.call(null, c), c);
      };
    }(x9136, path, storage);
    x9136.om$core$IOmRef$_remove_dep_BANG_$arity$2 = function(x9136, path, storage) {
      return function(_, c) {
        var ___$1 = this;
        var m = cljs.core.swap_BANG_.call(null, storage, cljs.core.dissoc, om.core.id.call(null, c));
        if (cljs.core.count.call(null, m) === 0) {
          return cljs.core.swap_BANG_.call(null, om.core._refs, cljs.core.dissoc, path);
        } else {
          return null;
        }
      };
    }(x9136, path, storage);
    x9136.om$core$IOmRef$_refresh_deps_BANG_$arity$1 = function(x9136, path, storage) {
      return function(_) {
        var ___$1 = this;
        var seq__9137 = cljs.core.seq.call(null, cljs.core.vals.call(null, cljs.core.deref.call(null, storage)));
        var chunk__9138 = null;
        var count__9139 = 0;
        var i__9140 = 0;
        while (true) {
          if (i__9140 < count__9139) {
            var c = cljs.core._nth.call(null, chunk__9138, i__9140);
            om.core._queue_render_BANG_.call(null, om.core.state.call(null, cursor), c);
            var G__9141 = seq__9137;
            var G__9142 = chunk__9138;
            var G__9143 = count__9139;
            var G__9144 = i__9140 + 1;
            seq__9137 = G__9141;
            chunk__9138 = G__9142;
            count__9139 = G__9143;
            i__9140 = G__9144;
            continue;
          } else {
            var temp__4126__auto__ = cljs.core.seq.call(null, seq__9137);
            if (temp__4126__auto__) {
              var seq__9137__$1 = temp__4126__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__9137__$1)) {
                var c__4907__auto__ = cljs.core.chunk_first.call(null, seq__9137__$1);
                var G__9145 = cljs.core.chunk_rest.call(null, seq__9137__$1);
                var G__9146 = c__4907__auto__;
                var G__9147 = cljs.core.count.call(null, c__4907__auto__);
                var G__9148 = 0;
                seq__9137 = G__9145;
                chunk__9138 = G__9146;
                count__9139 = G__9147;
                i__9140 = G__9148;
                continue;
              } else {
                var c = cljs.core.first.call(null, seq__9137__$1);
                om.core._queue_render_BANG_.call(null, om.core.state.call(null, cursor), c);
                var G__9149 = cljs.core.next.call(null, seq__9137__$1);
                var G__9150 = null;
                var G__9151 = 0;
                var G__9152 = 0;
                seq__9137 = G__9149;
                chunk__9138 = G__9150;
                count__9139 = G__9151;
                i__9140 = G__9152;
                continue;
              }
            } else {
              return null;
            }
          }
          break;
        }
      };
    }(x9136, path, storage);
    x9136.om$core$IOmRef$_get_deps$arity$1 = function(x9136, path, storage) {
      return function(_) {
        var ___$1 = this;
        return cljs.core.deref.call(null, storage);
      };
    }(x9136, path, storage);
    x9136.om$core$ICursorDerive$ = true;
    x9136.om$core$ICursorDerive$_derive$arity$4 = function(x9136, path, storage) {
      return function(this$, derived, state, path__$1) {
        var this$__$1 = this;
        var cursor_SINGLEQUOTE_ = om.core.to_cursor.call(null, derived, state, path__$1);
        if (om.core.cursor_QMARK_.call(null, cursor_SINGLEQUOTE_)) {
          return om.core.ref_sub_cursor.call(null, cursor_SINGLEQUOTE_, this$__$1);
        } else {
          return cursor_SINGLEQUOTE_;
        }
      };
    }(x9136, path, storage);
    return x9136;
  }
};
om.core.add_ref_to_component_BANG_ = function om$core$add_ref_to_component_BANG_(c, ref) {
  var state = c.state;
  var refs = function() {
    var or__4122__auto__ = state["__om_refs"];
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return cljs.core.PersistentHashSet.EMPTY;
    }
  }();
  if (cljs.core.contains_QMARK_.call(null, refs, ref)) {
    return null;
  } else {
    return state["__om_refs"] = cljs.core.conj.call(null, refs, ref);
  }
};
om.core.remove_ref_from_component_BANG_ = function om$core$remove_ref_from_component_BANG_(c, ref) {
  var state = c.state;
  var refs = state["__om_refs"];
  if (cljs.core.contains_QMARK_.call(null, refs, ref)) {
    return state["__om_refs"] = cljs.core.disj.call(null, refs, ref);
  } else {
    return null;
  }
};
om.core.observe = function om$core$observe(c, ref) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, c))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "c", "c", -122660552, null))))].join(""));
  }
  if (om.core.cursor_QMARK_.call(null, ref)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "ref", "ref", -1364538802, null))))].join(""));
  }
  om.core.add_ref_to_component_BANG_.call(null, c, ref);
  om.core._add_dep_BANG_.call(null, ref, c);
  return ref;
};
om.core.unobserve = function om$core$unobserve(c, ref) {
  om.core.remove_ref_from_component_BANG_.call(null, c, ref);
  om.core._remove_dep_BANG_.call(null, ref, c);
  return ref;
};
om.core.refresh_queued = false;
om.core.refresh_set = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
om.core.get_renderT = function om$core$get_renderT(state) {
  var or__4122__auto__ = state.om$render$T;
  if (cljs.core.truth_(or__4122__auto__)) {
    return or__4122__auto__;
  } else {
    return 0;
  }
};
om.core.render_all = function() {
  var om$core$render_all = null;
  var om$core$render_all__0 = function() {
    return om$core$render_all.call(null, null);
  };
  var om$core$render_all__1 = function(state) {
    om.core.refresh_queued = false;
    var seq__9157_9161 = cljs.core.seq.call(null, cljs.core.deref.call(null, om.core.refresh_set));
    var chunk__9158_9162 = null;
    var count__9159_9163 = 0;
    var i__9160_9164 = 0;
    while (true) {
      if (i__9160_9164 < count__9159_9163) {
        var f_9165 = cljs.core._nth.call(null, chunk__9158_9162, i__9160_9164);
        f_9165.call(null);
        var G__9166 = seq__9157_9161;
        var G__9167 = chunk__9158_9162;
        var G__9168 = count__9159_9163;
        var G__9169 = i__9160_9164 + 1;
        seq__9157_9161 = G__9166;
        chunk__9158_9162 = G__9167;
        count__9159_9163 = G__9168;
        i__9160_9164 = G__9169;
        continue;
      } else {
        var temp__4126__auto___9170 = cljs.core.seq.call(null, seq__9157_9161);
        if (temp__4126__auto___9170) {
          var seq__9157_9171__$1 = temp__4126__auto___9170;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__9157_9171__$1)) {
            var c__4907__auto___9172 = cljs.core.chunk_first.call(null, seq__9157_9171__$1);
            var G__9173 = cljs.core.chunk_rest.call(null, seq__9157_9171__$1);
            var G__9174 = c__4907__auto___9172;
            var G__9175 = cljs.core.count.call(null, c__4907__auto___9172);
            var G__9176 = 0;
            seq__9157_9161 = G__9173;
            chunk__9158_9162 = G__9174;
            count__9159_9163 = G__9175;
            i__9160_9164 = G__9176;
            continue;
          } else {
            var f_9177 = cljs.core.first.call(null, seq__9157_9171__$1);
            f_9177.call(null);
            var G__9178 = cljs.core.next.call(null, seq__9157_9171__$1);
            var G__9179 = null;
            var G__9180 = 0;
            var G__9181 = 0;
            seq__9157_9161 = G__9178;
            chunk__9158_9162 = G__9179;
            count__9159_9163 = G__9180;
            i__9160_9164 = G__9181;
            continue;
          }
        } else {
        }
      }
      break;
    }
    if (state == null) {
      return null;
    } else {
      return state.om$render$T = om.core.get_renderT.call(null, state) + 1;
    }
  };
  om$core$render_all = function(state) {
    switch(arguments.length) {
      case 0:
        return om$core$render_all__0.call(this);
      case 1:
        return om$core$render_all__1.call(this, state);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$render_all.cljs$core$IFn$_invoke$arity$0 = om$core$render_all__0;
  om$core$render_all.cljs$core$IFn$_invoke$arity$1 = om$core$render_all__1;
  return om$core$render_all;
}();
om.core.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
om.core.valid_component_QMARK_ = function om$core$valid_component_QMARK_(x, f) {
  if (function() {
    var or__4122__auto__ = function() {
      var G__9188 = x;
      if (G__9188) {
        var bit__4796__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4122__auto__ = bit__4796__auto__;
          if (cljs.core.truth_(or__4122__auto__)) {
            return or__4122__auto__;
          } else {
            return G__9188.om$core$IRender$;
          }
        }())) {
          return true;
        } else {
          if (!G__9188.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__9188);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__9188);
      }
    }();
    if (or__4122__auto__) {
      return or__4122__auto__;
    } else {
      var or__4122__auto____$1 = function() {
        var G__9190 = x;
        if (G__9190) {
          var bit__4796__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4122__auto____$1 = bit__4796__auto__;
            if (cljs.core.truth_(or__4122__auto____$1)) {
              return or__4122__auto____$1;
            } else {
              return G__9190.om$core$IRenderProps$;
            }
          }())) {
            return true;
          } else {
            if (!G__9190.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderProps, G__9190);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderProps, G__9190);
        }
      }();
      if (or__4122__auto____$1) {
        return or__4122__auto____$1;
      } else {
        var G__9191 = x;
        if (G__9191) {
          var bit__4796__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4122__auto____$2 = bit__4796__auto__;
            if (cljs.core.truth_(or__4122__auto____$2)) {
              return or__4122__auto____$2;
            } else {
              return G__9191.om$core$IRenderState$;
            }
          }())) {
            return true;
          } else {
            if (!G__9191.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__9191);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__9191);
        }
      }
    }
  }()) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Invalid Om component fn, "), cljs.core.str(f.name), cljs.core.str(" does not return valid instance")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IRender", "IRender", 590822196, null), new cljs.core.Symbol(null, 
    "x", "x", -555367584, null)), cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IRenderProps", "IRenderProps", 2115139472, null), new cljs.core.Symbol(null, "x", "x", -555367584, null)), cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IRenderState", "IRenderState", -897673898, null), new cljs.core.Symbol(null, "x", "x", -555367584, null)))))].join(""));
  }
};
om.core.valid_opts_QMARK_ = function om$core$valid_opts_QMARK_(m) {
  return cljs.core.every_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [new cljs.core.Keyword(null, "descriptor", "descriptor", 76122018), null, new cljs.core.Keyword(null, "fn", "fn", -1175266204), null, new cljs.core.Keyword(null, "instrument", "instrument", -960698844), null, new cljs.core.Keyword(null, "react-key", "react-key", 1337881348), null, new cljs.core.Keyword(null, "key", "key", -1516042587), null, new cljs.core.Keyword(null, "init-state", 
  "init-state", 1450863212), null, new cljs.core.Keyword(null, "state", "state", -1988618099), null, new cljs.core.Keyword(null, "key-fn", "key-fn", -636154479), null, new cljs.core.Keyword(null, "opts", "opts", 155075701), null, new cljs.core.Keyword("om.core", "index", "om.core/index", -1724175434), null, new cljs.core.Keyword(null, "shared", "shared", -384145993), null], null), null), cljs.core.keys.call(null, m));
};
om.core.id = function om$core$id(owner) {
  return owner.state["__om_id"];
};
om.core.get_descriptor = function() {
  var om$core$get_descriptor = null;
  var om$core$get_descriptor__1 = function(f) {
    return om$core$get_descriptor.call(null, f, null);
  };
  var om$core$get_descriptor__2 = function(f, descriptor) {
    if (f["om$descriptor"] == null) {
      f["om$descriptor"] = React.createFactory(React.createClass(function() {
        var or__4122__auto__ = descriptor;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = om.core._STAR_descriptor_STAR_;
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            return om.core.pure_descriptor;
          }
        }
      }()));
    } else {
    }
    return f["om$descriptor"];
  };
  om$core$get_descriptor = function(f, descriptor) {
    switch(arguments.length) {
      case 1:
        return om$core$get_descriptor__1.call(this, f);
      case 2:
        return om$core$get_descriptor__2.call(this, f, descriptor);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$get_descriptor.cljs$core$IFn$_invoke$arity$1 = om$core$get_descriptor__1;
  om$core$get_descriptor.cljs$core$IFn$_invoke$arity$2 = om$core$get_descriptor__2;
  return om$core$get_descriptor;
}();
om.core.getf = function() {
  var om$core$getf = null;
  var om$core$getf__2 = function(f, cursor) {
    if (f instanceof cljs.core.MultiFn) {
      var dv = f.dispatch_fn.call(null, cursor, null);
      return cljs.core.get_method.call(null, f, dv);
    } else {
      return f;
    }
  };
  var om$core$getf__3 = function(f, cursor, opts) {
    if (f instanceof cljs.core.MultiFn) {
      var dv = f.dispatch_fn.call(null, cursor, null, opts);
      return cljs.core.get_method.call(null, f, dv);
    } else {
      return f;
    }
  };
  om$core$getf = function(f, cursor, opts) {
    switch(arguments.length) {
      case 2:
        return om$core$getf__2.call(this, f, cursor);
      case 3:
        return om$core$getf__3.call(this, f, cursor, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$getf.cljs$core$IFn$_invoke$arity$2 = om$core$getf__2;
  om$core$getf.cljs$core$IFn$_invoke$arity$3 = om$core$getf__3;
  return om$core$getf;
}();
om.core.build_STAR_ = function() {
  var om$core$build_STAR_ = null;
  var om$core$build_STAR___2 = function(f, cursor) {
    return om$core$build_STAR_.call(null, f, cursor, null);
  };
  var om$core$build_STAR___3 = function(f, cursor, m) {
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    if (m == null || cljs.core.map_QMARK_.call(null, m)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)))))].join(""));
    }
    if (om.core.valid_opts_QMARK_.call(null, m)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, "build options contains invalid keys, only :key, :key-fn :react-key, ", ":fn, :init-state, :state, and :opts allowed, given ", cljs.core.interpose.call(null, ", ", cljs.core.keys.call(null, m)))), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid-opts?", "valid-opts?", 1000038576, null), new cljs.core.Symbol(null, "m", "m", 
      -1021758608, null))))].join(""));
    }
    if (m == null) {
      var shared = om.core.get_shared.call(null, om.core._STAR_parent_STAR_);
      var ctor = om.core.get_descriptor.call(null, om.core.getf.call(null, f, cursor));
      return ctor.call(null, {"children":function(shared, ctor) {
        return function(this$) {
          var ret = f.call(null, cursor, this$);
          om.core.valid_component_QMARK_.call(null, ret, f);
          return ret;
        };
      }(shared, ctor), "__om_instrument":om.core._STAR_instrument_STAR_, "__om_descriptor":om.core._STAR_descriptor_STAR_, "__om_app_state":om.core._STAR_state_STAR_, "__om_root_key":om.core._STAR_root_key_STAR_, "__om_shared":shared, "__om_cursor":cursor});
    } else {
      var map__9193 = m;
      var map__9193__$1 = cljs.core.seq_QMARK_.call(null, map__9193) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9193) : map__9193;
      var opts = cljs.core.get.call(null, map__9193__$1, new cljs.core.Keyword(null, "opts", "opts", 155075701));
      var init_state = cljs.core.get.call(null, map__9193__$1, new cljs.core.Keyword(null, "init-state", "init-state", 1450863212));
      var state = cljs.core.get.call(null, map__9193__$1, new cljs.core.Keyword(null, "state", "state", -1988618099));
      var key_fn = cljs.core.get.call(null, map__9193__$1, new cljs.core.Keyword(null, "key-fn", "key-fn", -636154479));
      var key = cljs.core.get.call(null, map__9193__$1, new cljs.core.Keyword(null, "key", "key", -1516042587));
      var dataf = cljs.core.get.call(null, m, new cljs.core.Keyword(null, "fn", "fn", -1175266204));
      var cursor_SINGLEQUOTE_ = !(dataf == null) ? function() {
        var temp__4124__auto__ = (new cljs.core.Keyword("om.core", "index", "om.core/index", -1724175434)).cljs$core$IFn$_invoke$arity$1(m);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var i = temp__4124__auto__;
          return dataf.call(null, cursor, i);
        } else {
          return dataf.call(null, cursor);
        }
      }() : cursor;
      var rkey = !(key == null) ? cljs.core.get.call(null, cursor_SINGLEQUOTE_, key) : !(key_fn == null) ? key_fn.call(null, cursor_SINGLEQUOTE_) : cljs.core.get.call(null, m, new cljs.core.Keyword(null, "react-key", "react-key", 1337881348));
      var shared = function() {
        var or__4122__auto__ = (new cljs.core.Keyword(null, "shared", "shared", -384145993)).cljs$core$IFn$_invoke$arity$1(m);
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return om.core.get_shared.call(null, om.core._STAR_parent_STAR_);
        }
      }();
      var ctor = om.core.get_descriptor.call(null, om.core.getf.call(null, f, cursor_SINGLEQUOTE_, opts), (new cljs.core.Keyword(null, "descriptor", "descriptor", 76122018)).cljs$core$IFn$_invoke$arity$1(m));
      return ctor.call(null, {"__om_state":state, "__om_instrument":om.core._STAR_instrument_STAR_, "children":opts == null ? function(map__9193, map__9193__$1, opts, init_state, state, key_fn, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) {
        return function(this$) {
          var ret = f.call(null, cursor_SINGLEQUOTE_, this$);
          om.core.valid_component_QMARK_.call(null, ret, f);
          return ret;
        };
      }(map__9193, map__9193__$1, opts, init_state, state, key_fn, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) : function(map__9193, map__9193__$1, opts, init_state, state, key_fn, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) {
        return function(this$) {
          var ret = f.call(null, cursor_SINGLEQUOTE_, this$, opts);
          om.core.valid_component_QMARK_.call(null, ret, f);
          return ret;
        };
      }(map__9193, map__9193__$1, opts, init_state, state, key_fn, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor), "__om_init_state":init_state, "key":function() {
        var or__4122__auto__ = rkey;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return undefined;
        }
      }(), "__om_app_state":om.core._STAR_state_STAR_, "__om_cursor":cursor_SINGLEQUOTE_, "__om_index":(new cljs.core.Keyword("om.core", "index", "om.core/index", -1724175434)).cljs$core$IFn$_invoke$arity$1(m), "__om_shared":shared, "__om_descriptor":om.core._STAR_descriptor_STAR_, "__om_root_key":om.core._STAR_root_key_STAR_});
    }
  };
  om$core$build_STAR_ = function(f, cursor, m) {
    switch(arguments.length) {
      case 2:
        return om$core$build_STAR___2.call(this, f, cursor);
      case 3:
        return om$core$build_STAR___3.call(this, f, cursor, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$build_STAR_.cljs$core$IFn$_invoke$arity$2 = om$core$build_STAR___2;
  om$core$build_STAR_.cljs$core$IFn$_invoke$arity$3 = om$core$build_STAR___3;
  return om$core$build_STAR_;
}();
om.core.build = function() {
  var om$core$build = null;
  var om$core$build__2 = function(f, x) {
    return om$core$build.call(null, f, x, null);
  };
  var om$core$build__3 = function(f, x, m) {
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    if (m == null || cljs.core.map_QMARK_.call(null, m)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)))))].join(""));
    }
    if (!(om.core._STAR_instrument_STAR_ == null)) {
      var ret = om.core._STAR_instrument_STAR_.call(null, f, x, m);
      if (cljs.core._EQ_.call(null, ret, new cljs.core.Keyword("om.core", "pass", "om.core/pass", -1453289268))) {
        return om.core.build_STAR_.call(null, f, x, m);
      } else {
        return ret;
      }
    } else {
      return om.core.build_STAR_.call(null, f, x, m);
    }
  };
  om$core$build = function(f, x, m) {
    switch(arguments.length) {
      case 2:
        return om$core$build__2.call(this, f, x);
      case 3:
        return om$core$build__3.call(this, f, x, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$build.cljs$core$IFn$_invoke$arity$2 = om$core$build__2;
  om$core$build.cljs$core$IFn$_invoke$arity$3 = om$core$build__3;
  return om$core$build;
}();
om.core.build_all = function() {
  var om$core$build_all = null;
  var om$core$build_all__2 = function(f, xs) {
    return om$core$build_all.call(null, f, xs, null);
  };
  var om$core$build_all__3 = function(f, xs, m) {
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    if (m == null || cljs.core.map_QMARK_.call(null, m)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)))))].join(""));
    }
    return cljs.core.map.call(null, function(x, i) {
      return om.core.build.call(null, f, x, cljs.core.assoc.call(null, m, new cljs.core.Keyword("om.core", "index", "om.core/index", -1724175434), i));
    }, xs, cljs.core.range.call(null));
  };
  om$core$build_all = function(f, xs, m) {
    switch(arguments.length) {
      case 2:
        return om$core$build_all__2.call(this, f, xs);
      case 3:
        return om$core$build_all__3.call(this, f, xs, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$build_all.cljs$core$IFn$_invoke$arity$2 = om$core$build_all__2;
  om$core$build_all.cljs$core$IFn$_invoke$arity$3 = om$core$build_all__3;
  return om$core$build_all;
}();
om.core.setup = function om$core$setup(state, key, tx_listen) {
  if (function() {
    var G__9202 = state;
    if (G__9202) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__9202.om$core$INotify$;
        }
      }())) {
        return true;
      } else {
        if (!G__9202.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.INotify, G__9202);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.INotify, G__9202);
    }
  }()) {
  } else {
    var properties_9210 = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var listeners_9211 = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var render_queue_9212 = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
    var x9203_9213 = state;
    x9203_9213.om$core$IRenderQueue$ = true;
    x9203_9213.om$core$IRenderQueue$_get_queue$arity$1 = function(x9203_9213, properties_9210, listeners_9211, render_queue_9212) {
      return function(this$) {
        var this$__$1 = this;
        return cljs.core.deref.call(null, render_queue_9212);
      };
    }(x9203_9213, properties_9210, listeners_9211, render_queue_9212);
    x9203_9213.om$core$IRenderQueue$_queue_render_BANG_$arity$2 = function(x9203_9213, properties_9210, listeners_9211, render_queue_9212) {
      return function(this$, c) {
        var this$__$1 = this;
        if (cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, render_queue_9212), c)) {
          return null;
        } else {
          cljs.core.swap_BANG_.call(null, render_queue_9212, cljs.core.conj, c);
          return cljs.core.swap_BANG_.call(null, this$__$1, cljs.core.identity);
        }
      };
    }(x9203_9213, properties_9210, listeners_9211, render_queue_9212);
    x9203_9213.om$core$IRenderQueue$_empty_queue_BANG_$arity$1 = function(x9203_9213, properties_9210, listeners_9211, render_queue_9212) {
      return function(this$) {
        var this$__$1 = this;
        return cljs.core.swap_BANG_.call(null, render_queue_9212, cljs.core.empty);
      };
    }(x9203_9213, properties_9210, listeners_9211, render_queue_9212);
    x9203_9213.om$core$INotify$ = true;
    x9203_9213.om$core$INotify$_listen_BANG_$arity$3 = function(x9203_9213, properties_9210, listeners_9211, render_queue_9212) {
      return function(this$, key__$1, tx_listen__$1) {
        var this$__$1 = this;
        if (tx_listen__$1 == null) {
        } else {
          cljs.core.swap_BANG_.call(null, listeners_9211, cljs.core.assoc, key__$1, tx_listen__$1);
        }
        return this$__$1;
      };
    }(x9203_9213, properties_9210, listeners_9211, render_queue_9212);
    x9203_9213.om$core$INotify$_unlisten_BANG_$arity$2 = function(x9203_9213, properties_9210, listeners_9211, render_queue_9212) {
      return function(this$, key__$1) {
        var this$__$1 = this;
        cljs.core.swap_BANG_.call(null, listeners_9211, cljs.core.dissoc, key__$1);
        return this$__$1;
      };
    }(x9203_9213, properties_9210, listeners_9211, render_queue_9212);
    x9203_9213.om$core$INotify$_notify_BANG_$arity$3 = function(x9203_9213, properties_9210, listeners_9211, render_queue_9212) {
      return function(this$, tx_data, root_cursor) {
        var this$__$1 = this;
        var seq__9204_9214 = cljs.core.seq.call(null, cljs.core.deref.call(null, listeners_9211));
        var chunk__9205_9215 = null;
        var count__9206_9216 = 0;
        var i__9207_9217 = 0;
        while (true) {
          if (i__9207_9217 < count__9206_9216) {
            var vec__9208_9218 = cljs.core._nth.call(null, chunk__9205_9215, i__9207_9217);
            var __9219 = cljs.core.nth.call(null, vec__9208_9218, 0, null);
            var f_9220 = cljs.core.nth.call(null, vec__9208_9218, 1, null);
            f_9220.call(null, tx_data, root_cursor);
            var G__9221 = seq__9204_9214;
            var G__9222 = chunk__9205_9215;
            var G__9223 = count__9206_9216;
            var G__9224 = i__9207_9217 + 1;
            seq__9204_9214 = G__9221;
            chunk__9205_9215 = G__9222;
            count__9206_9216 = G__9223;
            i__9207_9217 = G__9224;
            continue;
          } else {
            var temp__4126__auto___9225 = cljs.core.seq.call(null, seq__9204_9214);
            if (temp__4126__auto___9225) {
              var seq__9204_9226__$1 = temp__4126__auto___9225;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__9204_9226__$1)) {
                var c__4907__auto___9227 = cljs.core.chunk_first.call(null, seq__9204_9226__$1);
                var G__9228 = cljs.core.chunk_rest.call(null, seq__9204_9226__$1);
                var G__9229 = c__4907__auto___9227;
                var G__9230 = cljs.core.count.call(null, c__4907__auto___9227);
                var G__9231 = 0;
                seq__9204_9214 = G__9228;
                chunk__9205_9215 = G__9229;
                count__9206_9216 = G__9230;
                i__9207_9217 = G__9231;
                continue;
              } else {
                var vec__9209_9232 = cljs.core.first.call(null, seq__9204_9226__$1);
                var __9233 = cljs.core.nth.call(null, vec__9209_9232, 0, null);
                var f_9234 = cljs.core.nth.call(null, vec__9209_9232, 1, null);
                f_9234.call(null, tx_data, root_cursor);
                var G__9235 = cljs.core.next.call(null, seq__9204_9226__$1);
                var G__9236 = null;
                var G__9237 = 0;
                var G__9238 = 0;
                seq__9204_9214 = G__9235;
                chunk__9205_9215 = G__9236;
                count__9206_9216 = G__9237;
                i__9207_9217 = G__9238;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return this$__$1;
      };
    }(x9203_9213, properties_9210, listeners_9211, render_queue_9212);
    x9203_9213.om$core$IRootProperties$ = true;
    x9203_9213.om$core$IRootProperties$_set_property_BANG_$arity$4 = function(x9203_9213, properties_9210, listeners_9211, render_queue_9212) {
      return function(_, id, k, v) {
        var ___$1 = this;
        return cljs.core.swap_BANG_.call(null, properties_9210, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id, k], null), v);
      };
    }(x9203_9213, properties_9210, listeners_9211, render_queue_9212);
    x9203_9213.om$core$IRootProperties$_remove_property_BANG_$arity$3 = function(x9203_9213, properties_9210, listeners_9211, render_queue_9212) {
      return function(_, id, k) {
        var ___$1 = this;
        return cljs.core.swap_BANG_.call(null, properties_9210, cljs.core.dissoc, id, k);
      };
    }(x9203_9213, properties_9210, listeners_9211, render_queue_9212);
    x9203_9213.om$core$IRootProperties$_remove_properties_BANG_$arity$2 = function(x9203_9213, properties_9210, listeners_9211, render_queue_9212) {
      return function(_, id) {
        var ___$1 = this;
        return cljs.core.swap_BANG_.call(null, properties_9210, cljs.core.dissoc, id);
      };
    }(x9203_9213, properties_9210, listeners_9211, render_queue_9212);
    x9203_9213.om$core$IRootProperties$_get_property$arity$3 = function(x9203_9213, properties_9210, listeners_9211, render_queue_9212) {
      return function(_, id, k) {
        var ___$1 = this;
        return cljs.core.get_in.call(null, cljs.core.deref.call(null, properties_9210), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id, k], null));
      };
    }(x9203_9213, properties_9210, listeners_9211, render_queue_9212);
  }
  return om.core._listen_BANG_.call(null, state, key, tx_listen);
};
om.core.tear_down = function om$core$tear_down(state, key) {
  return om.core._unlisten_BANG_.call(null, state, key);
};
om.core.tag_root_key = function om$core$tag_root_key(cursor, root_key) {
  if (om.core.cursor_QMARK_.call(null, cursor)) {
    var x9240 = cljs.core.clone.call(null, cursor);
    x9240.om$core$IRootKey$ = true;
    x9240.om$core$IRootKey$_root_key$arity$1 = function(x9240) {
      return function(this$) {
        var this$__$1 = this;
        return root_key;
      };
    }(x9240);
    x9240.om$core$IAdapt$ = true;
    x9240.om$core$IAdapt$_adapt$arity$2 = function(x9240) {
      return function(this$, other) {
        var this$__$1 = this;
        return om$core$tag_root_key.call(null, om.core.adapt.call(null, cursor, other), root_key);
      };
    }(x9240);
    x9240.cljs$core$ICloneable$ = true;
    x9240.cljs$core$ICloneable$_clone$arity$1 = function(x9240) {
      return function(this$) {
        var this$__$1 = this;
        return om$core$tag_root_key.call(null, cljs.core.clone.call(null, cursor), root_key);
      };
    }(x9240);
    return x9240;
  } else {
    return cursor;
  }
};
om.core.root = function om$core$root(f, value, p__9241) {
  var map__9304 = p__9241;
  var map__9304__$1 = cljs.core.seq_QMARK_.call(null, map__9304) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9304) : map__9304;
  var options = map__9304__$1;
  var raf = cljs.core.get.call(null, map__9304__$1, new cljs.core.Keyword(null, "raf", "raf", -1295410152));
  var adapt = cljs.core.get.call(null, map__9304__$1, new cljs.core.Keyword(null, "adapt", "adapt", -1817022327));
  var descriptor = cljs.core.get.call(null, map__9304__$1, new cljs.core.Keyword(null, "descriptor", "descriptor", 76122018));
  var instrument = cljs.core.get.call(null, map__9304__$1, new cljs.core.Keyword(null, "instrument", "instrument", -960698844));
  var path = cljs.core.get.call(null, map__9304__$1, new cljs.core.Keyword(null, "path", "path", -188191168));
  var tx_listen = cljs.core.get.call(null, map__9304__$1, new cljs.core.Keyword(null, "tx-listen", "tx-listen", 119130367));
  var target = cljs.core.get.call(null, map__9304__$1, new cljs.core.Keyword(null, "target", "target", 253001721));
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("First argument must be a function"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  if (!(target == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("No target specified to om.core/root"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "target", "target", 1893533248, null)))))].join(""));
  }
  var roots_SINGLEQUOTE__9366 = cljs.core.deref.call(null, om.core.roots);
  if (cljs.core.contains_QMARK_.call(null, roots_SINGLEQUOTE__9366, target)) {
    cljs.core.get.call(null, roots_SINGLEQUOTE__9366, target).call(null);
  } else {
  }
  var watch_key = cljs.core.gensym.call(null);
  var state = function() {
    var G__9305 = value;
    if (G__9305) {
      var bit__4796__auto__ = G__9305.cljs$lang$protocol_mask$partition1$ & 16384;
      if (bit__4796__auto__ || G__9305.cljs$core$IAtom$) {
        return true;
      } else {
        if (!G__9305.cljs$lang$protocol_mask$partition1$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAtom, G__9305);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAtom, G__9305);
    }
  }() ? value : cljs.core.atom.call(null, value);
  var state__$1 = om.core.setup.call(null, state, watch_key, tx_listen);
  var adapt__$1 = function() {
    var or__4122__auto__ = adapt;
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return cljs.core.identity;
    }
  }();
  var m = cljs.core.dissoc.call(null, options, new cljs.core.Keyword(null, "target", "target", 253001721), new cljs.core.Keyword(null, "tx-listen", "tx-listen", 119130367), new cljs.core.Keyword(null, "path", "path", -188191168), new cljs.core.Keyword(null, "adapt", "adapt", -1817022327), new cljs.core.Keyword(null, "raf", "raf", -1295410152));
  var ret = cljs.core.atom.call(null, null);
  var rootf = function(watch_key, state, state__$1, adapt__$1, m, ret, map__9304, map__9304__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target) {
    return function om$core$root_$_rootf() {
      cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.disj, om$core$root_$_rootf);
      var value__$1 = cljs.core.deref.call(null, state__$1);
      var cursor = adapt__$1.call(null, om.core.tag_root_key.call(null, path == null ? om.core.to_cursor.call(null, value__$1, state__$1, cljs.core.PersistentVector.EMPTY) : om.core.to_cursor.call(null, cljs.core.get_in.call(null, value__$1, path), state__$1, path), watch_key));
      if (cljs.core.truth_(om.core._get_property.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "skip-render-root", "skip-render-root", -5219643)))) {
      } else {
        var c_9367 = om.dom.render.call(null, function() {
          var _STAR_descriptor_STAR_9336 = om.core._STAR_descriptor_STAR_;
          var _STAR_instrument_STAR_9337 = om.core._STAR_instrument_STAR_;
          var _STAR_state_STAR_9338 = om.core._STAR_state_STAR_;
          var _STAR_root_key_STAR_9339 = om.core._STAR_root_key_STAR_;
          om.core._STAR_descriptor_STAR_ = descriptor;
          om.core._STAR_instrument_STAR_ = instrument;
          om.core._STAR_state_STAR_ = state__$1;
          om.core._STAR_root_key_STAR_ = watch_key;
          try {
            return om.core.build.call(null, f, cursor, m);
          } finally {
            om.core._STAR_root_key_STAR_ = _STAR_root_key_STAR_9339;
            om.core._STAR_state_STAR_ = _STAR_state_STAR_9338;
            om.core._STAR_instrument_STAR_ = _STAR_instrument_STAR_9337;
            om.core._STAR_descriptor_STAR_ = _STAR_descriptor_STAR_9336;
          }
        }(), target);
        if (cljs.core.deref.call(null, ret) == null) {
          cljs.core.reset_BANG_.call(null, ret, c_9367);
        } else {
        }
      }
      var queue_9368 = om.core._get_queue.call(null, state__$1);
      om.core._empty_queue_BANG_.call(null, state__$1);
      if (cljs.core.empty_QMARK_.call(null, queue_9368)) {
      } else {
        var seq__9340_9369 = cljs.core.seq.call(null, queue_9368);
        var chunk__9341_9370 = null;
        var count__9342_9371 = 0;
        var i__9343_9372 = 0;
        while (true) {
          if (i__9343_9372 < count__9342_9371) {
            var c_9373 = cljs.core._nth.call(null, chunk__9341_9370, i__9343_9372);
            if (cljs.core.truth_(c_9373.isMounted())) {
              var temp__4126__auto___9374 = c_9373.state["__om_next_cursor"];
              if (cljs.core.truth_(temp__4126__auto___9374)) {
                var next_props_9375 = temp__4126__auto___9374;
                c_9373.props["__om_cursor"] = next_props_9375;
                c_9373.state["__om_next_cursor"] = null;
              } else {
              }
              if (cljs.core.truth_(function() {
                var or__4122__auto__ = !function() {
                  var G__9345 = om.core.children.call(null, c_9373);
                  if (G__9345) {
                    var bit__4796__auto__ = null;
                    if (cljs.core.truth_(function() {
                      var or__4122__auto__ = bit__4796__auto__;
                      if (cljs.core.truth_(or__4122__auto__)) {
                        return or__4122__auto__;
                      } else {
                        return G__9345.om$core$ICheckState$;
                      }
                    }())) {
                      return true;
                    } else {
                      if (!G__9345.cljs$lang$protocol_mask$partition$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICheckState, G__9345);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICheckState, G__9345);
                  }
                }();
                if (or__4122__auto__) {
                  return or__4122__auto__;
                } else {
                  return c_9373.shouldComponentUpdate(c_9373.props, c_9373.state);
                }
              }())) {
                c_9373.forceUpdate();
              } else {
              }
            } else {
            }
            var G__9376 = seq__9340_9369;
            var G__9377 = chunk__9341_9370;
            var G__9378 = count__9342_9371;
            var G__9379 = i__9343_9372 + 1;
            seq__9340_9369 = G__9376;
            chunk__9341_9370 = G__9377;
            count__9342_9371 = G__9378;
            i__9343_9372 = G__9379;
            continue;
          } else {
            var temp__4126__auto___9380 = cljs.core.seq.call(null, seq__9340_9369);
            if (temp__4126__auto___9380) {
              var seq__9340_9381__$1 = temp__4126__auto___9380;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__9340_9381__$1)) {
                var c__4907__auto___9382 = cljs.core.chunk_first.call(null, seq__9340_9381__$1);
                var G__9383 = cljs.core.chunk_rest.call(null, seq__9340_9381__$1);
                var G__9384 = c__4907__auto___9382;
                var G__9385 = cljs.core.count.call(null, c__4907__auto___9382);
                var G__9386 = 0;
                seq__9340_9369 = G__9383;
                chunk__9341_9370 = G__9384;
                count__9342_9371 = G__9385;
                i__9343_9372 = G__9386;
                continue;
              } else {
                var c_9387 = cljs.core.first.call(null, seq__9340_9381__$1);
                if (cljs.core.truth_(c_9387.isMounted())) {
                  var temp__4126__auto___9388__$1 = c_9387.state["__om_next_cursor"];
                  if (cljs.core.truth_(temp__4126__auto___9388__$1)) {
                    var next_props_9389 = temp__4126__auto___9388__$1;
                    c_9387.props["__om_cursor"] = next_props_9389;
                    c_9387.state["__om_next_cursor"] = null;
                  } else {
                  }
                  if (cljs.core.truth_(function() {
                    var or__4122__auto__ = !function() {
                      var G__9347 = om.core.children.call(null, c_9387);
                      if (G__9347) {
                        var bit__4796__auto__ = null;
                        if (cljs.core.truth_(function() {
                          var or__4122__auto__ = bit__4796__auto__;
                          if (cljs.core.truth_(or__4122__auto__)) {
                            return or__4122__auto__;
                          } else {
                            return G__9347.om$core$ICheckState$;
                          }
                        }())) {
                          return true;
                        } else {
                          if (!G__9347.cljs$lang$protocol_mask$partition$) {
                            return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICheckState, G__9347);
                          } else {
                            return false;
                          }
                        }
                      } else {
                        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICheckState, G__9347);
                      }
                    }();
                    if (or__4122__auto__) {
                      return or__4122__auto__;
                    } else {
                      return c_9387.shouldComponentUpdate(c_9387.props, c_9387.state);
                    }
                  }())) {
                    c_9387.forceUpdate();
                  } else {
                  }
                } else {
                }
                var G__9390 = cljs.core.next.call(null, seq__9340_9381__$1);
                var G__9391 = null;
                var G__9392 = 0;
                var G__9393 = 0;
                seq__9340_9369 = G__9390;
                chunk__9341_9370 = G__9391;
                count__9342_9371 = G__9392;
                i__9343_9372 = G__9393;
                continue;
              }
            } else {
            }
          }
          break;
        }
      }
      var _refs_9394 = cljs.core.deref.call(null, om.core._refs);
      if (cljs.core.empty_QMARK_.call(null, _refs_9394)) {
      } else {
        var seq__9348_9395 = cljs.core.seq.call(null, _refs_9394);
        var chunk__9349_9396 = null;
        var count__9350_9397 = 0;
        var i__9351_9398 = 0;
        while (true) {
          if (i__9351_9398 < count__9350_9397) {
            var vec__9352_9399 = cljs.core._nth.call(null, chunk__9349_9396, i__9351_9398);
            var path_9400__$1 = cljs.core.nth.call(null, vec__9352_9399, 0, null);
            var cs_9401 = cljs.core.nth.call(null, vec__9352_9399, 1, null);
            var cs_9402__$1 = cljs.core.deref.call(null, cs_9401);
            var seq__9353_9403 = cljs.core.seq.call(null, cs_9402__$1);
            var chunk__9354_9404 = null;
            var count__9355_9405 = 0;
            var i__9356_9406 = 0;
            while (true) {
              if (i__9356_9406 < count__9355_9405) {
                var vec__9357_9407 = cljs.core._nth.call(null, chunk__9354_9404, i__9356_9406);
                var id_9408 = cljs.core.nth.call(null, vec__9357_9407, 0, null);
                var c_9409 = cljs.core.nth.call(null, vec__9357_9407, 1, null);
                if (cljs.core.truth_(c_9409.shouldComponentUpdate(c_9409.props, c_9409.state))) {
                  c_9409.forceUpdate();
                } else {
                }
                var G__9410 = seq__9353_9403;
                var G__9411 = chunk__9354_9404;
                var G__9412 = count__9355_9405;
                var G__9413 = i__9356_9406 + 1;
                seq__9353_9403 = G__9410;
                chunk__9354_9404 = G__9411;
                count__9355_9405 = G__9412;
                i__9356_9406 = G__9413;
                continue;
              } else {
                var temp__4126__auto___9414 = cljs.core.seq.call(null, seq__9353_9403);
                if (temp__4126__auto___9414) {
                  var seq__9353_9415__$1 = temp__4126__auto___9414;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__9353_9415__$1)) {
                    var c__4907__auto___9416 = cljs.core.chunk_first.call(null, seq__9353_9415__$1);
                    var G__9417 = cljs.core.chunk_rest.call(null, seq__9353_9415__$1);
                    var G__9418 = c__4907__auto___9416;
                    var G__9419 = cljs.core.count.call(null, c__4907__auto___9416);
                    var G__9420 = 0;
                    seq__9353_9403 = G__9417;
                    chunk__9354_9404 = G__9418;
                    count__9355_9405 = G__9419;
                    i__9356_9406 = G__9420;
                    continue;
                  } else {
                    var vec__9358_9421 = cljs.core.first.call(null, seq__9353_9415__$1);
                    var id_9422 = cljs.core.nth.call(null, vec__9358_9421, 0, null);
                    var c_9423 = cljs.core.nth.call(null, vec__9358_9421, 1, null);
                    if (cljs.core.truth_(c_9423.shouldComponentUpdate(c_9423.props, c_9423.state))) {
                      c_9423.forceUpdate();
                    } else {
                    }
                    var G__9424 = cljs.core.next.call(null, seq__9353_9415__$1);
                    var G__9425 = null;
                    var G__9426 = 0;
                    var G__9427 = 0;
                    seq__9353_9403 = G__9424;
                    chunk__9354_9404 = G__9425;
                    count__9355_9405 = G__9426;
                    i__9356_9406 = G__9427;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__9428 = seq__9348_9395;
            var G__9429 = chunk__9349_9396;
            var G__9430 = count__9350_9397;
            var G__9431 = i__9351_9398 + 1;
            seq__9348_9395 = G__9428;
            chunk__9349_9396 = G__9429;
            count__9350_9397 = G__9430;
            i__9351_9398 = G__9431;
            continue;
          } else {
            var temp__4126__auto___9432 = cljs.core.seq.call(null, seq__9348_9395);
            if (temp__4126__auto___9432) {
              var seq__9348_9433__$1 = temp__4126__auto___9432;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__9348_9433__$1)) {
                var c__4907__auto___9434 = cljs.core.chunk_first.call(null, seq__9348_9433__$1);
                var G__9435 = cljs.core.chunk_rest.call(null, seq__9348_9433__$1);
                var G__9436 = c__4907__auto___9434;
                var G__9437 = cljs.core.count.call(null, c__4907__auto___9434);
                var G__9438 = 0;
                seq__9348_9395 = G__9435;
                chunk__9349_9396 = G__9436;
                count__9350_9397 = G__9437;
                i__9351_9398 = G__9438;
                continue;
              } else {
                var vec__9359_9439 = cljs.core.first.call(null, seq__9348_9433__$1);
                var path_9440__$1 = cljs.core.nth.call(null, vec__9359_9439, 0, null);
                var cs_9441 = cljs.core.nth.call(null, vec__9359_9439, 1, null);
                var cs_9442__$1 = cljs.core.deref.call(null, cs_9441);
                var seq__9360_9443 = cljs.core.seq.call(null, cs_9442__$1);
                var chunk__9361_9444 = null;
                var count__9362_9445 = 0;
                var i__9363_9446 = 0;
                while (true) {
                  if (i__9363_9446 < count__9362_9445) {
                    var vec__9364_9447 = cljs.core._nth.call(null, chunk__9361_9444, i__9363_9446);
                    var id_9448 = cljs.core.nth.call(null, vec__9364_9447, 0, null);
                    var c_9449 = cljs.core.nth.call(null, vec__9364_9447, 1, null);
                    if (cljs.core.truth_(c_9449.shouldComponentUpdate(c_9449.props, c_9449.state))) {
                      c_9449.forceUpdate();
                    } else {
                    }
                    var G__9450 = seq__9360_9443;
                    var G__9451 = chunk__9361_9444;
                    var G__9452 = count__9362_9445;
                    var G__9453 = i__9363_9446 + 1;
                    seq__9360_9443 = G__9450;
                    chunk__9361_9444 = G__9451;
                    count__9362_9445 = G__9452;
                    i__9363_9446 = G__9453;
                    continue;
                  } else {
                    var temp__4126__auto___9454__$1 = cljs.core.seq.call(null, seq__9360_9443);
                    if (temp__4126__auto___9454__$1) {
                      var seq__9360_9455__$1 = temp__4126__auto___9454__$1;
                      if (cljs.core.chunked_seq_QMARK_.call(null, seq__9360_9455__$1)) {
                        var c__4907__auto___9456 = cljs.core.chunk_first.call(null, seq__9360_9455__$1);
                        var G__9457 = cljs.core.chunk_rest.call(null, seq__9360_9455__$1);
                        var G__9458 = c__4907__auto___9456;
                        var G__9459 = cljs.core.count.call(null, c__4907__auto___9456);
                        var G__9460 = 0;
                        seq__9360_9443 = G__9457;
                        chunk__9361_9444 = G__9458;
                        count__9362_9445 = G__9459;
                        i__9363_9446 = G__9460;
                        continue;
                      } else {
                        var vec__9365_9461 = cljs.core.first.call(null, seq__9360_9455__$1);
                        var id_9462 = cljs.core.nth.call(null, vec__9365_9461, 0, null);
                        var c_9463 = cljs.core.nth.call(null, vec__9365_9461, 1, null);
                        if (cljs.core.truth_(c_9463.shouldComponentUpdate(c_9463.props, c_9463.state))) {
                          c_9463.forceUpdate();
                        } else {
                        }
                        var G__9464 = cljs.core.next.call(null, seq__9360_9455__$1);
                        var G__9465 = null;
                        var G__9466 = 0;
                        var G__9467 = 0;
                        seq__9360_9443 = G__9464;
                        chunk__9361_9444 = G__9465;
                        count__9362_9445 = G__9466;
                        i__9363_9446 = G__9467;
                        continue;
                      }
                    } else {
                    }
                  }
                  break;
                }
                var G__9468 = cljs.core.next.call(null, seq__9348_9433__$1);
                var G__9469 = null;
                var G__9470 = 0;
                var G__9471 = 0;
                seq__9348_9395 = G__9468;
                chunk__9349_9396 = G__9469;
                count__9350_9397 = G__9470;
                i__9351_9398 = G__9471;
                continue;
              }
            } else {
            }
          }
          break;
        }
      }
      om.core._set_property_BANG_.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "skip-render-root", "skip-render-root", -5219643), true);
      return cljs.core.deref.call(null, ret);
    };
  }(watch_key, state, state__$1, adapt__$1, m, ret, map__9304, map__9304__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target);
  cljs.core.add_watch.call(null, state__$1, watch_key, function(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__9304, map__9304__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target) {
    return function(_, ___$1, o, n) {
      if (cljs.core.not.call(null, om.core._get_property.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "ignore", "ignore", -1631542033))) && !(o === n)) {
        om.core._set_property_BANG_.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "skip-render-root", "skip-render-root", -5219643), false);
      } else {
      }
      om.core._set_property_BANG_.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "ignore", "ignore", -1631542033), false);
      if (cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, om.core.refresh_set), rootf)) {
      } else {
        cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.conj, rootf);
      }
      if (cljs.core.truth_(om.core.refresh_queued)) {
        return null;
      } else {
        om.core.refresh_queued = true;
        if (raf === false || !(typeof requestAnimationFrame !== "undefined")) {
          return setTimeout(function(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__9304, map__9304__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target) {
            return function() {
              return om.core.render_all.call(null, state__$1);
            };
          }(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__9304, map__9304__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target), 16);
        } else {
          if (cljs.core.fn_QMARK_.call(null, raf)) {
            return raf.call(null);
          } else {
            return requestAnimationFrame(function(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__9304, map__9304__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target) {
              return function() {
                return om.core.render_all.call(null, state__$1);
              };
            }(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__9304, map__9304__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target));
          }
        }
      }
    };
  }(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__9304, map__9304__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target));
  cljs.core.swap_BANG_.call(null, om.core.roots, cljs.core.assoc, target, function(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__9304, map__9304__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target) {
    return function() {
      om.core._remove_properties_BANG_.call(null, state__$1, watch_key);
      cljs.core.remove_watch.call(null, state__$1, watch_key);
      om.core.tear_down.call(null, state__$1, watch_key);
      cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.disj, rootf);
      cljs.core.swap_BANG_.call(null, om.core.roots, cljs.core.dissoc, target);
      return React.unmountComponentAtNode(target);
    };
  }(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__9304, map__9304__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target));
  return rootf.call(null);
};
om.core.detach_root = function om$core$detach_root(target) {
  if (cljs.core.truth_(goog.dom.isElement(target))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("gdom", "isElement", "gdom/isElement", 465934354, null), new cljs.core.Symbol(null, "target", "target", 1893533248, null))))].join(""));
  }
  var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, om.core.roots), target);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var f = temp__4126__auto__;
    return f.call(null);
  } else {
    return null;
  }
};
om.core.transactable_QMARK_ = function om$core$transactable_QMARK_(x) {
  var G__9473 = x;
  if (G__9473) {
    var bit__4796__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4122__auto__ = bit__4796__auto__;
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return G__9473.om$core$ITransact$;
      }
    }())) {
      return true;
    } else {
      if (!G__9473.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ITransact, G__9473);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, om.core.ITransact, G__9473);
  }
};
om.core.transact_BANG_ = function() {
  var om$core$transact_BANG_ = null;
  var om$core$transact_BANG___2 = function(cursor, f) {
    return om$core$transact_BANG_.call(null, cursor, cljs.core.PersistentVector.EMPTY, f, null);
  };
  var om$core$transact_BANG___3 = function(cursor, korks, f) {
    return om$core$transact_BANG_.call(null, cursor, korks, f, null);
  };
  var om$core$transact_BANG___4 = function(cursor, korks, f, tag) {
    if (om.core.transactable_QMARK_.call(null, cursor)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "transactable?", "transactable?", 780536292, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
    }
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    var korks__$1 = korks == null ? cljs.core.PersistentVector.EMPTY : cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._transact_BANG_.call(null, cursor, korks__$1, f, tag);
  };
  om$core$transact_BANG_ = function(cursor, korks, f, tag) {
    switch(arguments.length) {
      case 2:
        return om$core$transact_BANG___2.call(this, cursor, korks);
      case 3:
        return om$core$transact_BANG___3.call(this, cursor, korks, f);
      case 4:
        return om$core$transact_BANG___4.call(this, cursor, korks, f, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$transact_BANG_.cljs$core$IFn$_invoke$arity$2 = om$core$transact_BANG___2;
  om$core$transact_BANG_.cljs$core$IFn$_invoke$arity$3 = om$core$transact_BANG___3;
  om$core$transact_BANG_.cljs$core$IFn$_invoke$arity$4 = om$core$transact_BANG___4;
  return om$core$transact_BANG_;
}();
om.core.update_BANG_ = function() {
  var om$core$update_BANG_ = null;
  var om$core$update_BANG___2 = function(cursor, v) {
    if (om.core.cursor_QMARK_.call(null, cursor)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
    }
    return om.core.transact_BANG_.call(null, cursor, cljs.core.PersistentVector.EMPTY, function(_) {
      return v;
    }, null);
  };
  var om$core$update_BANG___3 = function(cursor, korks, v) {
    if (om.core.cursor_QMARK_.call(null, cursor)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
    }
    return om.core.transact_BANG_.call(null, cursor, korks, function(_) {
      return v;
    }, null);
  };
  var om$core$update_BANG___4 = function(cursor, korks, v, tag) {
    if (om.core.cursor_QMARK_.call(null, cursor)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
    }
    return om.core.transact_BANG_.call(null, cursor, korks, function(_) {
      return v;
    }, tag);
  };
  om$core$update_BANG_ = function(cursor, korks, v, tag) {
    switch(arguments.length) {
      case 2:
        return om$core$update_BANG___2.call(this, cursor, korks);
      case 3:
        return om$core$update_BANG___3.call(this, cursor, korks, v);
      case 4:
        return om$core$update_BANG___4.call(this, cursor, korks, v, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$update_BANG_.cljs$core$IFn$_invoke$arity$2 = om$core$update_BANG___2;
  om$core$update_BANG_.cljs$core$IFn$_invoke$arity$3 = om$core$update_BANG___3;
  om$core$update_BANG_.cljs$core$IFn$_invoke$arity$4 = om$core$update_BANG___4;
  return om$core$update_BANG_;
}();
om.core.commit_BANG_ = function om$core$commit_BANG_(cursor, korks, f) {
  if (om.core.cursor_QMARK_.call(null, cursor)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
  }
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  var key = function() {
    var G__9475 = cursor;
    if (G__9475) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__9475.om$core$IRootKey$;
        }
      }())) {
        return true;
      } else {
        if (!G__9475.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRootKey, G__9475);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRootKey, G__9475);
    }
  }() ? om.core._root_key.call(null, cursor) : null;
  var app_state = om.core.state.call(null, cursor);
  var korks__$1 = korks == null ? cljs.core.PersistentVector.EMPTY : cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
  var cpath = om.core.path.call(null, cursor);
  var rpath = cljs.core.into.call(null, cpath, korks__$1);
  if (cljs.core.truth_(key)) {
    om.core._set_property_BANG_.call(null, app_state, key, new cljs.core.Keyword(null, "ignore", "ignore", -1631542033), true);
  } else {
  }
  if (cljs.core.empty_QMARK_.call(null, rpath)) {
    return cljs.core.swap_BANG_.call(null, app_state, f);
  } else {
    return cljs.core.swap_BANG_.call(null, app_state, cljs.core.update_in, rpath, f);
  }
};
om.core.get_node = function() {
  var om$core$get_node = null;
  var om$core$get_node__1 = function(owner) {
    return owner.getDOMNode();
  };
  var om$core$get_node__2 = function(owner, name) {
    if (typeof name === "string") {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "string?", "string?", -1129175764, null), new cljs.core.Symbol(null, "name", "name", -810760592, null))))].join(""));
    }
    var temp__4126__auto__ = owner.refs;
    if (cljs.core.truth_(temp__4126__auto__)) {
      var refs = temp__4126__auto__;
      return refs[name].getDOMNode();
    } else {
      return null;
    }
  };
  om$core$get_node = function(owner, name) {
    switch(arguments.length) {
      case 1:
        return om$core$get_node__1.call(this, owner);
      case 2:
        return om$core$get_node__2.call(this, owner, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$get_node.cljs$core$IFn$_invoke$arity$1 = om$core$get_node__1;
  om$core$get_node.cljs$core$IFn$_invoke$arity$2 = om$core$get_node__2;
  return om$core$get_node;
}();
om.core.mounted_QMARK_ = function om$core$mounted_QMARK_(owner) {
  return owner.isMounted();
};
om.core.set_state_BANG_ = function() {
  var om$core$set_state_BANG_ = null;
  var om$core$set_state_BANG___2 = function(owner, v) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    return om.core._set_state_BANG_.call(null, owner, v, true);
  };
  var om$core$set_state_BANG___3 = function(owner, korks, v) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._set_state_BANG_.call(null, owner, ks, v, true);
  };
  om$core$set_state_BANG_ = function(owner, korks, v) {
    switch(arguments.length) {
      case 2:
        return om$core$set_state_BANG___2.call(this, owner, korks);
      case 3:
        return om$core$set_state_BANG___3.call(this, owner, korks, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$set_state_BANG_.cljs$core$IFn$_invoke$arity$2 = om$core$set_state_BANG___2;
  om$core$set_state_BANG_.cljs$core$IFn$_invoke$arity$3 = om$core$set_state_BANG___3;
  return om$core$set_state_BANG_;
}();
om.core.set_state_nr_BANG_ = function() {
  var om$core$set_state_nr_BANG_ = null;
  var om$core$set_state_nr_BANG___2 = function(owner, v) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    return om.core._set_state_BANG_.call(null, owner, v, false);
  };
  var om$core$set_state_nr_BANG___3 = function(owner, korks, v) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._set_state_BANG_.call(null, owner, ks, v, false);
  };
  om$core$set_state_nr_BANG_ = function(owner, korks, v) {
    switch(arguments.length) {
      case 2:
        return om$core$set_state_nr_BANG___2.call(this, owner, korks);
      case 3:
        return om$core$set_state_nr_BANG___3.call(this, owner, korks, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$set_state_nr_BANG_.cljs$core$IFn$_invoke$arity$2 = om$core$set_state_nr_BANG___2;
  om$core$set_state_nr_BANG_.cljs$core$IFn$_invoke$arity$3 = om$core$set_state_nr_BANG___3;
  return om$core$set_state_nr_BANG_;
}();
om.core.update_state_BANG_ = function() {
  var om$core$update_state_BANG_ = null;
  var om$core$update_state_BANG___2 = function(owner, f) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    return om.core.set_state_BANG_.call(null, owner, f.call(null, om.core.get_state.call(null, owner)));
  };
  var om$core$update_state_BANG___3 = function(owner, korks, f) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    return om.core.set_state_BANG_.call(null, owner, korks, f.call(null, om.core.get_state.call(null, owner, korks)));
  };
  om$core$update_state_BANG_ = function(owner, korks, f) {
    switch(arguments.length) {
      case 2:
        return om$core$update_state_BANG___2.call(this, owner, korks);
      case 3:
        return om$core$update_state_BANG___3.call(this, owner, korks, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$update_state_BANG_.cljs$core$IFn$_invoke$arity$2 = om$core$update_state_BANG___2;
  om$core$update_state_BANG_.cljs$core$IFn$_invoke$arity$3 = om$core$update_state_BANG___3;
  return om$core$update_state_BANG_;
}();
om.core.update_state_nr_BANG_ = function() {
  var om$core$update_state_nr_BANG_ = null;
  var om$core$update_state_nr_BANG___2 = function(owner, f) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    return om.core.set_state_nr_BANG_.call(null, owner, f.call(null, om.core.get_state.call(null, owner)));
  };
  var om$core$update_state_nr_BANG___3 = function(owner, korks, f) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    return om.core.set_state_nr_BANG_.call(null, owner, korks, f.call(null, om.core.get_state.call(null, owner, korks)));
  };
  om$core$update_state_nr_BANG_ = function(owner, korks, f) {
    switch(arguments.length) {
      case 2:
        return om$core$update_state_nr_BANG___2.call(this, owner, korks);
      case 3:
        return om$core$update_state_nr_BANG___3.call(this, owner, korks, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$update_state_nr_BANG_.cljs$core$IFn$_invoke$arity$2 = om$core$update_state_nr_BANG___2;
  om$core$update_state_nr_BANG_.cljs$core$IFn$_invoke$arity$3 = om$core$update_state_nr_BANG___3;
  return om$core$update_state_nr_BANG_;
}();
om.core.refresh_BANG_ = function om$core$refresh_BANG_(owner) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  return om.core.update_state_BANG_.call(null, owner, cljs.core.identity);
};
om.core.get_render_state = function() {
  var om$core$get_render_state = null;
  var om$core$get_render_state__1 = function(owner) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    return om.core._get_render_state.call(null, owner);
  };
  var om$core$get_render_state__2 = function(owner, korks) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._get_render_state.call(null, owner, ks);
  };
  om$core$get_render_state = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return om$core$get_render_state__1.call(this, owner);
      case 2:
        return om$core$get_render_state__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  om$core$get_render_state.cljs$core$IFn$_invoke$arity$1 = om$core$get_render_state__1;
  om$core$get_render_state.cljs$core$IFn$_invoke$arity$2 = om$core$get_render_state__2;
  return om$core$get_render_state;
}();
goog.provide("glug.cs");
goog.require("cljs.core");
goog.require("om.dom");
goog.require("om.core");
glug.cs.sort_by_votes = function glug$cs$sort_by_votes(beer_map) {
  return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.sort_by.call(null, new cljs.core.Keyword(null, "votes", "votes", -1161459422), cljs.core._GT_, beer_map));
};
if (typeof glug.cs.app_state !== "undefined") {
} else {
  glug.cs.app_state = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "beer-list", "beer-list", 1867684361), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1843675177), "Sam Adams Winter", new cljs.core.Keyword(null, "votes", "votes", -1161459422), 6, new cljs.core.Keyword(null, "upvoted", "upvoted", 582188092), false], null), 
  new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1843675177), "Peche Mortel", new cljs.core.Keyword(null, "votes", "votes", -1161459422), 3, new cljs.core.Keyword(null, "upvoted", "upvoted", 582188092), false], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1843675177), "PBR", new cljs.core.Keyword(null, "votes", "votes", -1161459422), 0, new cljs.core.Keyword(null, "upvoted", "upvoted", 582188092), false], null)], 
  null)], null));
}
glug.cs.upvote_beer_BANG_ = function glug$cs$upvote_beer_BANG_(e, beer) {
  return om.core.update_BANG_.call(null, beer, cljs.core.merge.call(null, beer, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "upvoted", "upvoted", 582188092), cljs.core.not.call(null, (new cljs.core.Keyword(null, "upvoted", "upvoted", 582188092)).cljs$core$IFn$_invoke$arity$1(beer)), new cljs.core.Keyword(null, "votes", "votes", -1161459422), cljs.core.truth_((new cljs.core.Keyword(null, "upvoted", "upvoted", 582188092)).cljs$core$IFn$_invoke$arity$1(beer)) ? (new cljs.core.Keyword(null, 
  "votes", "votes", -1161459422)).cljs$core$IFn$_invoke$arity$1(beer) - 1 : (new cljs.core.Keyword(null, "votes", "votes", -1161459422)).cljs$core$IFn$_invoke$arity$1(beer) + 1], null)));
};
glug.cs.position = function glug$cs$position(is_needle_QMARK_, haystack) {
  var i = 0;
  while (true) {
    if (cljs.core.truth_(is_needle_QMARK_.call(null, cljs.core.get.call(null, haystack, i)))) {
      return i + 1;
    } else {
      var G__15404 = i + 1;
      i = G__15404;
      continue;
    }
    break;
  }
};
glug.cs.placement = function glug$cs$placement(beer) {
  var sorted_beers = glug.cs.sort_by_votes.call(null, (new cljs.core.Keyword(null, "beer-list", "beer-list", 1867684361)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, glug.cs.app_state)));
  var beer_position = glug.cs.position.call(null, function(sorted_beers) {
    return function(p1__15405_SHARP_) {
      return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(beer), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(p1__15405_SHARP_));
    };
  }(sorted_beers), sorted_beers);
  return 16 * beer_position;
};
glug.cs.beer_view = function glug$cs$beer_view(beer, owner) {
  if (typeof glug.cs.t15410 !== "undefined") {
  } else {
    glug.cs.t15410 = function(owner, beer, beer_view, meta15411) {
      this.owner = owner;
      this.beer = beer;
      this.beer_view = beer_view;
      this.meta15411 = meta15411;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    glug.cs.t15410.prototype.om$core$IRender$ = true;
    glug.cs.t15410.prototype.om$core$IRender$render$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return React.DOM.li(null, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(self__.beer), " (", (new cljs.core.Keyword(null, "votes", "votes", -1161459422)).cljs$core$IFn$_invoke$arity$1(self__.beer), ")", React.DOM.button({"onClick":function(___$1) {
        return function(p1__15406_SHARP_) {
          return glug.cs.upvote_beer_BANG_.call(null, p1__15406_SHARP_, self__.beer);
        };
      }(___$1)}, "Vote"));
    };
    glug.cs.t15410.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15412) {
      var self__ = this;
      var _15412__$1 = this;
      return self__.meta15411;
    };
    glug.cs.t15410.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15412, meta15411__$1) {
      var self__ = this;
      var _15412__$1 = this;
      return new glug.cs.t15410(self__.owner, self__.beer, self__.beer_view, meta15411__$1);
    };
    glug.cs.t15410.cljs$lang$type = true;
    glug.cs.t15410.cljs$lang$ctorStr = "glug.cs/t15410";
    glug.cs.t15410.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
      return cljs.core._write.call(null, writer__4702__auto__, "glug.cs/t15410");
    };
    glug.cs.__GT_t15410 = function glug$cs$beer_view_$___GT_t15410(owner__$1, beer__$1, beer_view__$1, meta15411) {
      return new glug.cs.t15410(owner__$1, beer__$1, beer_view__$1, meta15411);
    };
  }
  return new glug.cs.t15410(owner, beer, glug$cs$beer_view, cljs.core.PersistentArrayMap.EMPTY);
};
glug.cs.beer_list_view = function glug$cs$beer_list_view(data, owner) {
  if (typeof glug.cs.t15416 !== "undefined") {
  } else {
    glug.cs.t15416 = function(owner, data, beer_list_view, meta15417) {
      this.owner = owner;
      this.data = data;
      this.beer_list_view = beer_list_view;
      this.meta15417 = meta15417;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    glug.cs.t15416.prototype.om$core$IRender$ = true;
    glug.cs.t15416.prototype.om$core$IRender$render$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return React.DOM.div(null, React.DOM.h1(null, "Beer List"), cljs.core.apply.call(null, om.dom.ul, {"className":"beer-list"}, om.core.build_all.call(null, glug.cs.beer_view, glug.cs.sort_by_votes.call(null, (new cljs.core.Keyword(null, "beer-list", "beer-list", 1867684361)).cljs$core$IFn$_invoke$arity$1(self__.data)))));
    };
    glug.cs.t15416.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15418) {
      var self__ = this;
      var _15418__$1 = this;
      return self__.meta15417;
    };
    glug.cs.t15416.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15418, meta15417__$1) {
      var self__ = this;
      var _15418__$1 = this;
      return new glug.cs.t15416(self__.owner, self__.data, self__.beer_list_view, meta15417__$1);
    };
    glug.cs.t15416.cljs$lang$type = true;
    glug.cs.t15416.cljs$lang$ctorStr = "glug.cs/t15416";
    glug.cs.t15416.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
      return cljs.core._write.call(null, writer__4702__auto__, "glug.cs/t15416");
    };
    glug.cs.__GT_t15416 = function glug$cs$beer_list_view_$___GT_t15416(owner__$1, data__$1, beer_list_view__$1, meta15417) {
      return new glug.cs.t15416(owner__$1, data__$1, beer_list_view__$1, meta15417);
    };
  }
  return new glug.cs.t15416(owner, data, glug$cs$beer_list_view, cljs.core.PersistentArrayMap.EMPTY);
};
om.core.root.call(null, glug.cs.beer_list_view, glug.cs.app_state, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "target", "target", 253001721), document.getElementById("app")], null));
